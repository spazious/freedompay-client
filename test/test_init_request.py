# coding: utf-8

"""
    Hosted Payment Controls API Documentation v1.5

    The API for Hosted Payment Controls. To access the swagger.json file open the following link: https://hpc.uat.freedompay.com/api/swagger/docs/v1.5

    The version of the OpenAPI document: v1.5
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest
import datetime

from freedompay_client.models.init_request import InitRequest  # noqa: E501

class TestInitRequest(unittest.TestCase):
    """InitRequest unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> InitRequest:
        """Test InitRequest
            include_option is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `InitRequest`
        """
        model = InitRequest()  # noqa: E501
        if include_optional:
            return InitRequest(
                button = freedompay_client.models.button_control.ButtonControl(
                    integrated = True, ),
                button_type = 'Unknown',
                pay_pal = freedompay_client.models.pay_pal_init_request.PayPalInitRequest(
                    commit = True, 
                    disabled = True, 
                    disable_funding = '', 
                    intent = 'Unknown', 
                    invoice_number = '', 
                    payment_method_payee_preferred = 'Unknown', 
                    shipping_preference = 'Unknown', 
                    total_price = '', 
                    country_code = '', 
                    currency_code = '', 
                    debug = True, 
                    locale = '', 
                    culture_code = '', 
                    es_key = '', 
                    legal = freedompay_client.models.legal_control.LegalControl(
                        hide_checkbox = True, 
                        text_type = 'Unknown', ), 
                    store_id = '', 
                    styles = '', 
                    terminal_id = '', 
                    validation_message_type = 'Unknown', 
                    reference_id = '00000000-0000-0000-0000-000000000000', ),
                postal_code = freedompay_client.models.postal_code_control.PostalCodeControl(
                    label_type = 'Unknown', 
                    placeholder_type = 'Unknown', 
                    validation_type = 'Unknown', ),
                pay_by_bank = freedompay_client.models.pay_by_bank_init_request.PayByBankInitRequest(
                    order_id = '', 
                    transaction_id = '', 
                    total_price = '', 
                    currency_code = '', 
                    merchant_redirect_url = '', 
                    culture_code = '', 
                    es_key = '', 
                    legal = freedompay_client.models.legal_control.LegalControl(
                        hide_checkbox = True, 
                        text_type = 'Unknown', ), 
                    store_id = '', 
                    styles = '', 
                    terminal_id = '', 
                    validation_message_type = 'Unknown', 
                    reference_id = '00000000-0000-0000-0000-000000000000', ),
                fraud_check = freedompay_client.models.fraud_check_options.FraudCheckOptions(
                    enabled = True, 
                    kount = freedompay_client.models.kount_options.KountOptions(
                        device_identifier = '', ), ),
                card_number = freedompay_client.models.card_number_control.CardNumberControl(
                    label_type = 'Unknown', 
                    mask_type = 'Default', 
                    placeholder_type = 'Unknown', ),
                consumer_authentication = freedompay_client.models.consumer_authentication.ConsumerAuthentication(
                    enabled = True, 
                    auto_map_to_free_way_request = True, 
                    fields = {
                        'key' : ''
                        }, ),
                dcc = freedompay_client.models.dcc_options.DccOptions(
                    is_enabled = True, ),
                expiration_date = freedompay_client.models.expiration_date_control.ExpirationDateControl(
                    label_type = 'Unknown', 
                    placeholder_type = 'Unknown', 
                    validation_type = 'Unknown', ),
                order_details = freedompay_client.models.order_details.OrderDetails(
                    transaction_total = 1.337, 
                    currency_code = '', 
                    order_number = '', 
                    order_description = '', ),
                security_code = freedompay_client.models.security_code_control.SecurityCodeControl(
                    label_type = 'Unknown', 
                    mask_type = 'Default', 
                    placeholder_type = 'Unknown', 
                    validation_type = 'Unknown', ),
                token_information = freedompay_client.models.token_information.TokenInformation(
                    token = '', 
                    expiration_month = '', 
                    expiration_year = '', ),
                card_icon_display_type = 'Unknown',
                payment_type = 'Unknown',
                workflow_type = 'Unknown',
                culture_code = '',
                es_key = '',
                legal = freedompay_client.models.legal_control.LegalControl(
                    hide_checkbox = True, 
                    text_type = 'Unknown', ),
                store_id = '',
                styles = '',
                terminal_id = '',
                validation_message_type = 'Unknown',
                reference_id = '00000000-0000-0000-0000-000000000000'
            )
        else:
            return InitRequest(
        )
        """

    def testInitRequest(self):
        """Test InitRequest"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
