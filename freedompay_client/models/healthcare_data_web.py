# coding: utf-8

"""
    Hosted Payment Controls API Documentation v1.5

    The API for Hosted Payment Controls. To access the swagger.json file open the following link: https://hpc.uat.freedompay.com/api/swagger/docs/v1.5  # noqa: E501

    OpenAPI spec version: v1.5
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from freedompay_client.configuration import Configuration


class HealthcareDataWeb(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'total_amount': 'str',
        'rx': 'str',
        'vision': 'str',
        'clinic': 'str',
        'dental': 'str'
    }

    attribute_map = {
        'total_amount': 'totalAmount',
        'rx': 'rx',
        'vision': 'vision',
        'clinic': 'clinic',
        'dental': 'dental'
    }

    def __init__(self, total_amount=None, rx=None, vision=None, clinic=None, dental=None, _configuration=None):  # noqa: E501
        """HealthcareDataWeb - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._total_amount = None
        self._rx = None
        self._vision = None
        self._clinic = None
        self._dental = None
        self.discriminator = None

        if total_amount is not None:
            self.total_amount = total_amount
        if rx is not None:
            self.rx = rx
        if vision is not None:
            self.vision = vision
        if clinic is not None:
            self.clinic = clinic
        if dental is not None:
            self.dental = dental

    @property
    def total_amount(self):
        """Gets the total_amount of this HealthcareDataWeb.  # noqa: E501


        :return: The total_amount of this HealthcareDataWeb.  # noqa: E501
        :rtype: str
        """
        return self._total_amount

    @total_amount.setter
    def total_amount(self, total_amount):
        """Sets the total_amount of this HealthcareDataWeb.


        :param total_amount: The total_amount of this HealthcareDataWeb.  # noqa: E501
        :type: str
        """

        self._total_amount = total_amount

    @property
    def rx(self):
        """Gets the rx of this HealthcareDataWeb.  # noqa: E501


        :return: The rx of this HealthcareDataWeb.  # noqa: E501
        :rtype: str
        """
        return self._rx

    @rx.setter
    def rx(self, rx):
        """Sets the rx of this HealthcareDataWeb.


        :param rx: The rx of this HealthcareDataWeb.  # noqa: E501
        :type: str
        """

        self._rx = rx

    @property
    def vision(self):
        """Gets the vision of this HealthcareDataWeb.  # noqa: E501


        :return: The vision of this HealthcareDataWeb.  # noqa: E501
        :rtype: str
        """
        return self._vision

    @vision.setter
    def vision(self, vision):
        """Sets the vision of this HealthcareDataWeb.


        :param vision: The vision of this HealthcareDataWeb.  # noqa: E501
        :type: str
        """

        self._vision = vision

    @property
    def clinic(self):
        """Gets the clinic of this HealthcareDataWeb.  # noqa: E501


        :return: The clinic of this HealthcareDataWeb.  # noqa: E501
        :rtype: str
        """
        return self._clinic

    @clinic.setter
    def clinic(self, clinic):
        """Sets the clinic of this HealthcareDataWeb.


        :param clinic: The clinic of this HealthcareDataWeb.  # noqa: E501
        :type: str
        """

        self._clinic = clinic

    @property
    def dental(self):
        """Gets the dental of this HealthcareDataWeb.  # noqa: E501


        :return: The dental of this HealthcareDataWeb.  # noqa: E501
        :rtype: str
        """
        return self._dental

    @dental.setter
    def dental(self, dental):
        """Sets the dental of this HealthcareDataWeb.


        :param dental: The dental of this HealthcareDataWeb.  # noqa: E501
        :type: str
        """

        self._dental = dental

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(HealthcareDataWeb, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, HealthcareDataWeb):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, HealthcareDataWeb):
            return True

        return self.to_dict() != other.to_dict()
