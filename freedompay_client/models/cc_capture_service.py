# coding: utf-8

"""
    Hosted Payment Controls API Documentation v1.5

    The API for Hosted Payment Controls. To access the swagger.json file open the following link: https://hpc.uat.freedompay.com/api/swagger/docs/v1.5

    The version of the OpenAPI document: v1.5
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel, Field, StrictStr

class CCCaptureService(BaseModel):
    """
    CCCaptureService
    """
    purchasing_level: Optional[StrictStr] = Field(None, alias="purchasingLevel")
    is_split_transaction: Optional[StrictStr] = Field(None, alias="isSplitTransaction")
    use_merchant_creds: Optional[StrictStr] = Field(None, alias="useMerchantCreds")
    business_date: Optional[StrictStr] = Field(None, alias="businessDate")
    partial_payment_id: Optional[StrictStr] = Field(None, alias="partialPaymentId")
    last_payment_flag: Optional[StrictStr] = Field(None, alias="lastPaymentFlag")
    industry_datatype: Optional[StrictStr] = Field(None, alias="industryDatatype")
    run: Optional[StrictStr] = None
    __properties = ["purchasingLevel", "isSplitTransaction", "useMerchantCreds", "businessDate", "partialPaymentId", "lastPaymentFlag", "industryDatatype", "run"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> CCCaptureService:
        """Create an instance of CCCaptureService from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> CCCaptureService:
        """Create an instance of CCCaptureService from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return CCCaptureService.parse_obj(obj)

        _obj = CCCaptureService.parse_obj({
            "purchasing_level": obj.get("purchasingLevel"),
            "is_split_transaction": obj.get("isSplitTransaction"),
            "use_merchant_creds": obj.get("useMerchantCreds"),
            "business_date": obj.get("businessDate"),
            "partial_payment_id": obj.get("partialPaymentId"),
            "last_payment_flag": obj.get("lastPaymentFlag"),
            "industry_datatype": obj.get("industryDatatype"),
            "run": obj.get("run")
        })
        return _obj


