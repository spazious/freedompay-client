# coding: utf-8

"""
    Hosted Payment Controls API Documentation v1.5

    The API for Hosted Payment Controls. To access the swagger.json file open the following link: https://hpc.uat.freedompay.com/api/swagger/docs/v1.5  # noqa: E501

    OpenAPI spec version: v1.5
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from freedompay_client.configuration import Configuration


class PostRequest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'pos_sync_attempt_num': 'int',
        'pos_sync_id': 'str',
        'cc_auth': 'str',
        'payment_key': 'str',
        'request_message': 'RequestMessage',
        'token_information': 'TokenInformation'
    }

    attribute_map = {
        'pos_sync_attempt_num': 'PosSyncAttemptNum',
        'pos_sync_id': 'PosSyncId',
        'cc_auth': 'CcAuth',
        'payment_key': 'PaymentKey',
        'request_message': 'RequestMessage',
        'token_information': 'TokenInformation'
    }

    def __init__(self, pos_sync_attempt_num=None, pos_sync_id=None, cc_auth=None, payment_key=None, request_message=None, token_information=None, _configuration=None):  # noqa: E501
        """PostRequest - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._pos_sync_attempt_num = None
        self._pos_sync_id = None
        self._cc_auth = None
        self._payment_key = None
        self._request_message = None
        self._token_information = None
        self.discriminator = None

        if pos_sync_attempt_num is not None:
            self.pos_sync_attempt_num = pos_sync_attempt_num
        if pos_sync_id is not None:
            self.pos_sync_id = pos_sync_id
        if cc_auth is not None:
            self.cc_auth = cc_auth
        if payment_key is not None:
            self.payment_key = payment_key
        if request_message is not None:
            self.request_message = request_message
        if token_information is not None:
            self.token_information = token_information

    @property
    def pos_sync_attempt_num(self):
        """Gets the pos_sync_attempt_num of this PostRequest.  # noqa: E501


        :return: The pos_sync_attempt_num of this PostRequest.  # noqa: E501
        :rtype: int
        """
        return self._pos_sync_attempt_num

    @pos_sync_attempt_num.setter
    def pos_sync_attempt_num(self, pos_sync_attempt_num):
        """Sets the pos_sync_attempt_num of this PostRequest.


        :param pos_sync_attempt_num: The pos_sync_attempt_num of this PostRequest.  # noqa: E501
        :type: int
        """

        self._pos_sync_attempt_num = pos_sync_attempt_num

    @property
    def pos_sync_id(self):
        """Gets the pos_sync_id of this PostRequest.  # noqa: E501


        :return: The pos_sync_id of this PostRequest.  # noqa: E501
        :rtype: str
        """
        return self._pos_sync_id

    @pos_sync_id.setter
    def pos_sync_id(self, pos_sync_id):
        """Sets the pos_sync_id of this PostRequest.


        :param pos_sync_id: The pos_sync_id of this PostRequest.  # noqa: E501
        :type: str
        """

        self._pos_sync_id = pos_sync_id

    @property
    def cc_auth(self):
        """Gets the cc_auth of this PostRequest.  # noqa: E501


        :return: The cc_auth of this PostRequest.  # noqa: E501
        :rtype: str
        """
        return self._cc_auth

    @cc_auth.setter
    def cc_auth(self, cc_auth):
        """Sets the cc_auth of this PostRequest.


        :param cc_auth: The cc_auth of this PostRequest.  # noqa: E501
        :type: str
        """

        self._cc_auth = cc_auth

    @property
    def payment_key(self):
        """Gets the payment_key of this PostRequest.  # noqa: E501


        :return: The payment_key of this PostRequest.  # noqa: E501
        :rtype: str
        """
        return self._payment_key

    @payment_key.setter
    def payment_key(self, payment_key):
        """Sets the payment_key of this PostRequest.


        :param payment_key: The payment_key of this PostRequest.  # noqa: E501
        :type: str
        """

        self._payment_key = payment_key

    @property
    def request_message(self):
        """Gets the request_message of this PostRequest.  # noqa: E501


        :return: The request_message of this PostRequest.  # noqa: E501
        :rtype: RequestMessage
        """
        return self._request_message

    @request_message.setter
    def request_message(self, request_message):
        """Sets the request_message of this PostRequest.


        :param request_message: The request_message of this PostRequest.  # noqa: E501
        :type: RequestMessage
        """

        self._request_message = request_message

    @property
    def token_information(self):
        """Gets the token_information of this PostRequest.  # noqa: E501


        :return: The token_information of this PostRequest.  # noqa: E501
        :rtype: TokenInformation
        """
        return self._token_information

    @token_information.setter
    def token_information(self, token_information):
        """Sets the token_information of this PostRequest.


        :param token_information: The token_information of this PostRequest.  # noqa: E501
        :type: TokenInformation
        """

        self._token_information = token_information

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PostRequest, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PostRequest):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, PostRequest):
            return True

        return self.to_dict() != other.to_dict()
