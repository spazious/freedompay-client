# coding: utf-8

"""
    Hosted Payment Controls API Documentation v1.5

    The API for Hosted Payment Controls. To access the swagger.json file open the following link: https://hpc.uat.freedompay.com/api/swagger/docs/v1.5

    The version of the OpenAPI document: v1.5
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel, Field, StrictStr

class TokenCreateService(BaseModel):
    """
    TokenCreateService
    """
    type: Optional[StrictStr] = None
    disable_verification: Optional[StrictStr] = Field(None, alias="disableVerification")
    pos_data: Optional[StrictStr] = Field(None, alias="posData")
    dyn_exp: Optional[StrictStr] = Field(None, alias="dynExp")
    run: Optional[StrictStr] = None
    __properties = ["type", "disableVerification", "posData", "dynExp", "run"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> TokenCreateService:
        """Create an instance of TokenCreateService from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> TokenCreateService:
        """Create an instance of TokenCreateService from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return TokenCreateService.parse_obj(obj)

        _obj = TokenCreateService.parse_obj({
            "type": obj.get("type"),
            "disable_verification": obj.get("disableVerification"),
            "pos_data": obj.get("posData"),
            "dyn_exp": obj.get("dynExp"),
            "run": obj.get("run")
        })
        return _obj


