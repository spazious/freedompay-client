# coding: utf-8

"""
    Hosted Payment Controls API Documentation v1.5

    The API for Hosted Payment Controls. To access the swagger.json file open the following link: https://hpc.uat.freedompay.com/api/swagger/docs/v1.5

    The version of the OpenAPI document: v1.5
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import List, Optional
from pydantic import BaseModel, Field, StrictStr, conlist
from freedompay_client.models.user_defined_field import UserDefinedField

class FraudCheckService(BaseModel):
    """
    FraudCheckService
    """
    reference_id: Optional[StrictStr] = Field(None, alias="referenceId")
    option: Optional[StrictStr] = None
    mode: Optional[StrictStr] = None
    device_identifier: Optional[StrictStr] = Field(None, alias="deviceIdentifier")
    commerce_indicator: Optional[StrictStr] = Field(None, alias="commerceIndicator")
    site_identifier: Optional[StrictStr] = Field(None, alias="siteIdentifier")
    customer_since_date: Optional[StrictStr] = Field(None, alias="customerSinceDate")
    estimated_total_amount: Optional[StrictStr] = Field(None, alias="estimatedTotalAmount")
    properties: Optional[conlist(UserDefinedField)] = None
    run_risk_model: Optional[StrictStr] = Field(None, alias="runRiskModel")
    order: Optional[StrictStr] = None
    void_threshold: Optional[StrictStr] = Field(None, alias="voidThreshold")
    auth_data: Optional[StrictStr] = Field(None, alias="authData")
    captcha_data: Optional[StrictStr] = Field(None, alias="captchaData")
    fail_count: Optional[StrictStr] = Field(None, alias="failCount")
    failed_requests: Optional[conlist(StrictStr)] = Field(None, alias="failedRequests")
    run: Optional[StrictStr] = None
    __properties = ["referenceId", "option", "mode", "deviceIdentifier", "commerceIndicator", "siteIdentifier", "customerSinceDate", "estimatedTotalAmount", "properties", "runRiskModel", "order", "voidThreshold", "authData", "captchaData", "failCount", "failedRequests", "run"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> FraudCheckService:
        """Create an instance of FraudCheckService from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of each item in properties (list)
        _items = []
        if self.properties:
            for _item in self.properties:
                if _item:
                    _items.append(_item.to_dict())
            _dict['properties'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> FraudCheckService:
        """Create an instance of FraudCheckService from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return FraudCheckService.parse_obj(obj)

        _obj = FraudCheckService.parse_obj({
            "reference_id": obj.get("referenceId"),
            "option": obj.get("option"),
            "mode": obj.get("mode"),
            "device_identifier": obj.get("deviceIdentifier"),
            "commerce_indicator": obj.get("commerceIndicator"),
            "site_identifier": obj.get("siteIdentifier"),
            "customer_since_date": obj.get("customerSinceDate"),
            "estimated_total_amount": obj.get("estimatedTotalAmount"),
            "properties": [UserDefinedField.from_dict(_item) for _item in obj.get("properties")] if obj.get("properties") is not None else None,
            "run_risk_model": obj.get("runRiskModel"),
            "order": obj.get("order"),
            "void_threshold": obj.get("voidThreshold"),
            "auth_data": obj.get("authData"),
            "captcha_data": obj.get("captchaData"),
            "fail_count": obj.get("failCount"),
            "failed_requests": obj.get("failedRequests"),
            "run": obj.get("run")
        })
        return _obj


