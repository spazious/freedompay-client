# coding: utf-8

"""
    Hosted Payment Controls API Documentation v1.5

    The API for Hosted Payment Controls. To access the swagger.json file open the following link: https://hpc.uat.freedompay.com/api/swagger/docs/v1.5  # noqa: E501

    OpenAPI spec version: v1.5
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from freedompay_client.configuration import Configuration


class FraudCheckService(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'reference_id': 'str',
        'option': 'str',
        'mode': 'str',
        'device_identifier': 'str',
        'commerce_indicator': 'str',
        'site_identifier': 'str',
        'customer_since_date': 'str',
        'estimated_total_amount': 'str',
        'properties': 'list[UserDefinedField]',
        'run_risk_model': 'str',
        'order': 'str',
        'void_threshold': 'str',
        'auth_data': 'str',
        'captcha_data': 'str',
        'fail_count': 'str',
        'failed_requests': 'list[str]',
        'run': 'str'
    }

    attribute_map = {
        'reference_id': 'referenceId',
        'option': 'option',
        'mode': 'mode',
        'device_identifier': 'deviceIdentifier',
        'commerce_indicator': 'commerceIndicator',
        'site_identifier': 'siteIdentifier',
        'customer_since_date': 'customerSinceDate',
        'estimated_total_amount': 'estimatedTotalAmount',
        'properties': 'properties',
        'run_risk_model': 'runRiskModel',
        'order': 'order',
        'void_threshold': 'voidThreshold',
        'auth_data': 'authData',
        'captcha_data': 'captchaData',
        'fail_count': 'failCount',
        'failed_requests': 'failedRequests',
        'run': 'run'
    }

    def __init__(self, reference_id=None, option=None, mode=None, device_identifier=None, commerce_indicator=None, site_identifier=None, customer_since_date=None, estimated_total_amount=None, properties=None, run_risk_model=None, order=None, void_threshold=None, auth_data=None, captcha_data=None, fail_count=None, failed_requests=None, run=None, _configuration=None):  # noqa: E501
        """FraudCheckService - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._reference_id = None
        self._option = None
        self._mode = None
        self._device_identifier = None
        self._commerce_indicator = None
        self._site_identifier = None
        self._customer_since_date = None
        self._estimated_total_amount = None
        self._properties = None
        self._run_risk_model = None
        self._order = None
        self._void_threshold = None
        self._auth_data = None
        self._captcha_data = None
        self._fail_count = None
        self._failed_requests = None
        self._run = None
        self.discriminator = None

        if reference_id is not None:
            self.reference_id = reference_id
        if option is not None:
            self.option = option
        if mode is not None:
            self.mode = mode
        if device_identifier is not None:
            self.device_identifier = device_identifier
        if commerce_indicator is not None:
            self.commerce_indicator = commerce_indicator
        if site_identifier is not None:
            self.site_identifier = site_identifier
        if customer_since_date is not None:
            self.customer_since_date = customer_since_date
        if estimated_total_amount is not None:
            self.estimated_total_amount = estimated_total_amount
        if properties is not None:
            self.properties = properties
        if run_risk_model is not None:
            self.run_risk_model = run_risk_model
        if order is not None:
            self.order = order
        if void_threshold is not None:
            self.void_threshold = void_threshold
        if auth_data is not None:
            self.auth_data = auth_data
        if captcha_data is not None:
            self.captcha_data = captcha_data
        if fail_count is not None:
            self.fail_count = fail_count
        if failed_requests is not None:
            self.failed_requests = failed_requests
        if run is not None:
            self.run = run

    @property
    def reference_id(self):
        """Gets the reference_id of this FraudCheckService.  # noqa: E501


        :return: The reference_id of this FraudCheckService.  # noqa: E501
        :rtype: str
        """
        return self._reference_id

    @reference_id.setter
    def reference_id(self, reference_id):
        """Sets the reference_id of this FraudCheckService.


        :param reference_id: The reference_id of this FraudCheckService.  # noqa: E501
        :type: str
        """

        self._reference_id = reference_id

    @property
    def option(self):
        """Gets the option of this FraudCheckService.  # noqa: E501


        :return: The option of this FraudCheckService.  # noqa: E501
        :rtype: str
        """
        return self._option

    @option.setter
    def option(self, option):
        """Sets the option of this FraudCheckService.


        :param option: The option of this FraudCheckService.  # noqa: E501
        :type: str
        """

        self._option = option

    @property
    def mode(self):
        """Gets the mode of this FraudCheckService.  # noqa: E501


        :return: The mode of this FraudCheckService.  # noqa: E501
        :rtype: str
        """
        return self._mode

    @mode.setter
    def mode(self, mode):
        """Sets the mode of this FraudCheckService.


        :param mode: The mode of this FraudCheckService.  # noqa: E501
        :type: str
        """

        self._mode = mode

    @property
    def device_identifier(self):
        """Gets the device_identifier of this FraudCheckService.  # noqa: E501


        :return: The device_identifier of this FraudCheckService.  # noqa: E501
        :rtype: str
        """
        return self._device_identifier

    @device_identifier.setter
    def device_identifier(self, device_identifier):
        """Sets the device_identifier of this FraudCheckService.


        :param device_identifier: The device_identifier of this FraudCheckService.  # noqa: E501
        :type: str
        """

        self._device_identifier = device_identifier

    @property
    def commerce_indicator(self):
        """Gets the commerce_indicator of this FraudCheckService.  # noqa: E501


        :return: The commerce_indicator of this FraudCheckService.  # noqa: E501
        :rtype: str
        """
        return self._commerce_indicator

    @commerce_indicator.setter
    def commerce_indicator(self, commerce_indicator):
        """Sets the commerce_indicator of this FraudCheckService.


        :param commerce_indicator: The commerce_indicator of this FraudCheckService.  # noqa: E501
        :type: str
        """

        self._commerce_indicator = commerce_indicator

    @property
    def site_identifier(self):
        """Gets the site_identifier of this FraudCheckService.  # noqa: E501


        :return: The site_identifier of this FraudCheckService.  # noqa: E501
        :rtype: str
        """
        return self._site_identifier

    @site_identifier.setter
    def site_identifier(self, site_identifier):
        """Sets the site_identifier of this FraudCheckService.


        :param site_identifier: The site_identifier of this FraudCheckService.  # noqa: E501
        :type: str
        """

        self._site_identifier = site_identifier

    @property
    def customer_since_date(self):
        """Gets the customer_since_date of this FraudCheckService.  # noqa: E501


        :return: The customer_since_date of this FraudCheckService.  # noqa: E501
        :rtype: str
        """
        return self._customer_since_date

    @customer_since_date.setter
    def customer_since_date(self, customer_since_date):
        """Sets the customer_since_date of this FraudCheckService.


        :param customer_since_date: The customer_since_date of this FraudCheckService.  # noqa: E501
        :type: str
        """

        self._customer_since_date = customer_since_date

    @property
    def estimated_total_amount(self):
        """Gets the estimated_total_amount of this FraudCheckService.  # noqa: E501


        :return: The estimated_total_amount of this FraudCheckService.  # noqa: E501
        :rtype: str
        """
        return self._estimated_total_amount

    @estimated_total_amount.setter
    def estimated_total_amount(self, estimated_total_amount):
        """Sets the estimated_total_amount of this FraudCheckService.


        :param estimated_total_amount: The estimated_total_amount of this FraudCheckService.  # noqa: E501
        :type: str
        """

        self._estimated_total_amount = estimated_total_amount

    @property
    def properties(self):
        """Gets the properties of this FraudCheckService.  # noqa: E501


        :return: The properties of this FraudCheckService.  # noqa: E501
        :rtype: list[UserDefinedField]
        """
        return self._properties

    @properties.setter
    def properties(self, properties):
        """Sets the properties of this FraudCheckService.


        :param properties: The properties of this FraudCheckService.  # noqa: E501
        :type: list[UserDefinedField]
        """

        self._properties = properties

    @property
    def run_risk_model(self):
        """Gets the run_risk_model of this FraudCheckService.  # noqa: E501


        :return: The run_risk_model of this FraudCheckService.  # noqa: E501
        :rtype: str
        """
        return self._run_risk_model

    @run_risk_model.setter
    def run_risk_model(self, run_risk_model):
        """Sets the run_risk_model of this FraudCheckService.


        :param run_risk_model: The run_risk_model of this FraudCheckService.  # noqa: E501
        :type: str
        """

        self._run_risk_model = run_risk_model

    @property
    def order(self):
        """Gets the order of this FraudCheckService.  # noqa: E501


        :return: The order of this FraudCheckService.  # noqa: E501
        :rtype: str
        """
        return self._order

    @order.setter
    def order(self, order):
        """Sets the order of this FraudCheckService.


        :param order: The order of this FraudCheckService.  # noqa: E501
        :type: str
        """

        self._order = order

    @property
    def void_threshold(self):
        """Gets the void_threshold of this FraudCheckService.  # noqa: E501


        :return: The void_threshold of this FraudCheckService.  # noqa: E501
        :rtype: str
        """
        return self._void_threshold

    @void_threshold.setter
    def void_threshold(self, void_threshold):
        """Sets the void_threshold of this FraudCheckService.


        :param void_threshold: The void_threshold of this FraudCheckService.  # noqa: E501
        :type: str
        """

        self._void_threshold = void_threshold

    @property
    def auth_data(self):
        """Gets the auth_data of this FraudCheckService.  # noqa: E501


        :return: The auth_data of this FraudCheckService.  # noqa: E501
        :rtype: str
        """
        return self._auth_data

    @auth_data.setter
    def auth_data(self, auth_data):
        """Sets the auth_data of this FraudCheckService.


        :param auth_data: The auth_data of this FraudCheckService.  # noqa: E501
        :type: str
        """

        self._auth_data = auth_data

    @property
    def captcha_data(self):
        """Gets the captcha_data of this FraudCheckService.  # noqa: E501


        :return: The captcha_data of this FraudCheckService.  # noqa: E501
        :rtype: str
        """
        return self._captcha_data

    @captcha_data.setter
    def captcha_data(self, captcha_data):
        """Sets the captcha_data of this FraudCheckService.


        :param captcha_data: The captcha_data of this FraudCheckService.  # noqa: E501
        :type: str
        """

        self._captcha_data = captcha_data

    @property
    def fail_count(self):
        """Gets the fail_count of this FraudCheckService.  # noqa: E501


        :return: The fail_count of this FraudCheckService.  # noqa: E501
        :rtype: str
        """
        return self._fail_count

    @fail_count.setter
    def fail_count(self, fail_count):
        """Sets the fail_count of this FraudCheckService.


        :param fail_count: The fail_count of this FraudCheckService.  # noqa: E501
        :type: str
        """

        self._fail_count = fail_count

    @property
    def failed_requests(self):
        """Gets the failed_requests of this FraudCheckService.  # noqa: E501


        :return: The failed_requests of this FraudCheckService.  # noqa: E501
        :rtype: list[str]
        """
        return self._failed_requests

    @failed_requests.setter
    def failed_requests(self, failed_requests):
        """Sets the failed_requests of this FraudCheckService.


        :param failed_requests: The failed_requests of this FraudCheckService.  # noqa: E501
        :type: list[str]
        """

        self._failed_requests = failed_requests

    @property
    def run(self):
        """Gets the run of this FraudCheckService.  # noqa: E501


        :return: The run of this FraudCheckService.  # noqa: E501
        :rtype: str
        """
        return self._run

    @run.setter
    def run(self, run):
        """Sets the run of this FraudCheckService.


        :param run: The run of this FraudCheckService.  # noqa: E501
        :type: str
        """

        self._run = run

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(FraudCheckService, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, FraudCheckService):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, FraudCheckService):
            return True

        return self.to_dict() != other.to_dict()
