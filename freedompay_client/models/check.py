# coding: utf-8

"""
    Hosted Payment Controls API Documentation v1.5

    The API for Hosted Payment Controls. To access the swagger.json file open the following link: https://hpc.uat.freedompay.com/api/swagger/docs/v1.5

    The version of the OpenAPI document: v1.5
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel, Field, StrictStr

class Check(BaseModel):
    """
    Check
    """
    bank_transit_number: Optional[StrictStr] = Field(None, alias="bankTransitNumber")
    account_number: Optional[StrictStr] = Field(None, alias="accountNumber")
    account_type: Optional[StrictStr] = Field(None, alias="accountType")
    check_number: Optional[StrictStr] = Field(None, alias="checkNumber")
    ach_accepted: Optional[StrictStr] = Field(None, alias="achAccepted")
    check_type: Optional[StrictStr] = Field(None, alias="checkType")
    full_micr: Optional[StrictStr] = Field(None, alias="fullMicr")
    reader_status: Optional[StrictStr] = Field(None, alias="readerStatus")
    __properties = ["bankTransitNumber", "accountNumber", "accountType", "checkNumber", "achAccepted", "checkType", "fullMicr", "readerStatus"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Check:
        """Create an instance of Check from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> Check:
        """Create an instance of Check from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return Check.parse_obj(obj)

        _obj = Check.parse_obj({
            "bank_transit_number": obj.get("bankTransitNumber"),
            "account_number": obj.get("accountNumber"),
            "account_type": obj.get("accountType"),
            "check_number": obj.get("checkNumber"),
            "ach_accepted": obj.get("achAccepted"),
            "check_type": obj.get("checkType"),
            "full_micr": obj.get("fullMicr"),
            "reader_status": obj.get("readerStatus")
        })
        return _obj


