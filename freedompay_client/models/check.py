# coding: utf-8

"""
    Hosted Payment Controls API Documentation v1.5

    The API for Hosted Payment Controls. To access the swagger.json file open the following link: https://hpc.uat.freedompay.com/api/swagger/docs/v1.5  # noqa: E501

    OpenAPI spec version: v1.5
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from freedompay_client.configuration import Configuration


class Check(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'bank_transit_number': 'str',
        'account_number': 'str',
        'account_type': 'str',
        'check_number': 'str',
        'ach_accepted': 'str',
        'check_type': 'str',
        'full_micr': 'str',
        'reader_status': 'str'
    }

    attribute_map = {
        'bank_transit_number': 'bankTransitNumber',
        'account_number': 'accountNumber',
        'account_type': 'accountType',
        'check_number': 'checkNumber',
        'ach_accepted': 'achAccepted',
        'check_type': 'checkType',
        'full_micr': 'fullMicr',
        'reader_status': 'readerStatus'
    }

    def __init__(self, bank_transit_number=None, account_number=None, account_type=None, check_number=None, ach_accepted=None, check_type=None, full_micr=None, reader_status=None, _configuration=None):  # noqa: E501
        """Check - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._bank_transit_number = None
        self._account_number = None
        self._account_type = None
        self._check_number = None
        self._ach_accepted = None
        self._check_type = None
        self._full_micr = None
        self._reader_status = None
        self.discriminator = None

        if bank_transit_number is not None:
            self.bank_transit_number = bank_transit_number
        if account_number is not None:
            self.account_number = account_number
        if account_type is not None:
            self.account_type = account_type
        if check_number is not None:
            self.check_number = check_number
        if ach_accepted is not None:
            self.ach_accepted = ach_accepted
        if check_type is not None:
            self.check_type = check_type
        if full_micr is not None:
            self.full_micr = full_micr
        if reader_status is not None:
            self.reader_status = reader_status

    @property
    def bank_transit_number(self):
        """Gets the bank_transit_number of this Check.  # noqa: E501


        :return: The bank_transit_number of this Check.  # noqa: E501
        :rtype: str
        """
        return self._bank_transit_number

    @bank_transit_number.setter
    def bank_transit_number(self, bank_transit_number):
        """Sets the bank_transit_number of this Check.


        :param bank_transit_number: The bank_transit_number of this Check.  # noqa: E501
        :type: str
        """

        self._bank_transit_number = bank_transit_number

    @property
    def account_number(self):
        """Gets the account_number of this Check.  # noqa: E501


        :return: The account_number of this Check.  # noqa: E501
        :rtype: str
        """
        return self._account_number

    @account_number.setter
    def account_number(self, account_number):
        """Sets the account_number of this Check.


        :param account_number: The account_number of this Check.  # noqa: E501
        :type: str
        """

        self._account_number = account_number

    @property
    def account_type(self):
        """Gets the account_type of this Check.  # noqa: E501


        :return: The account_type of this Check.  # noqa: E501
        :rtype: str
        """
        return self._account_type

    @account_type.setter
    def account_type(self, account_type):
        """Sets the account_type of this Check.


        :param account_type: The account_type of this Check.  # noqa: E501
        :type: str
        """

        self._account_type = account_type

    @property
    def check_number(self):
        """Gets the check_number of this Check.  # noqa: E501


        :return: The check_number of this Check.  # noqa: E501
        :rtype: str
        """
        return self._check_number

    @check_number.setter
    def check_number(self, check_number):
        """Sets the check_number of this Check.


        :param check_number: The check_number of this Check.  # noqa: E501
        :type: str
        """

        self._check_number = check_number

    @property
    def ach_accepted(self):
        """Gets the ach_accepted of this Check.  # noqa: E501


        :return: The ach_accepted of this Check.  # noqa: E501
        :rtype: str
        """
        return self._ach_accepted

    @ach_accepted.setter
    def ach_accepted(self, ach_accepted):
        """Sets the ach_accepted of this Check.


        :param ach_accepted: The ach_accepted of this Check.  # noqa: E501
        :type: str
        """

        self._ach_accepted = ach_accepted

    @property
    def check_type(self):
        """Gets the check_type of this Check.  # noqa: E501


        :return: The check_type of this Check.  # noqa: E501
        :rtype: str
        """
        return self._check_type

    @check_type.setter
    def check_type(self, check_type):
        """Sets the check_type of this Check.


        :param check_type: The check_type of this Check.  # noqa: E501
        :type: str
        """

        self._check_type = check_type

    @property
    def full_micr(self):
        """Gets the full_micr of this Check.  # noqa: E501


        :return: The full_micr of this Check.  # noqa: E501
        :rtype: str
        """
        return self._full_micr

    @full_micr.setter
    def full_micr(self, full_micr):
        """Sets the full_micr of this Check.


        :param full_micr: The full_micr of this Check.  # noqa: E501
        :type: str
        """

        self._full_micr = full_micr

    @property
    def reader_status(self):
        """Gets the reader_status of this Check.  # noqa: E501


        :return: The reader_status of this Check.  # noqa: E501
        :rtype: str
        """
        return self._reader_status

    @reader_status.setter
    def reader_status(self, reader_status):
        """Sets the reader_status of this Check.


        :param reader_status: The reader_status of this Check.  # noqa: E501
        :type: str
        """

        self._reader_status = reader_status

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Check, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Check):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, Check):
            return True

        return self.to_dict() != other.to_dict()
