# coding: utf-8

"""
    Hosted Payment Controls API Documentation v1.5

    The API for Hosted Payment Controls. To access the swagger.json file open the following link: https://hpc.uat.freedompay.com/api/swagger/docs/v1.5  # noqa: E501

    OpenAPI spec version: v1.5
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from freedompay_client.configuration import Configuration


class PayByBankInitRequest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'order_id': 'str',
        'transaction_id': 'str',
        'total_price': 'str',
        'currency_code': 'str',
        'merchant_redirect_url': 'str',
        'culture_code': 'str',
        'es_key': 'str',
        'legal': 'LegalControl',
        'store_id': 'str',
        'styles': 'str',
        'terminal_id': 'str',
        'validation_message_type': 'str',
        'reference_id': 'str'
    }

    attribute_map = {
        'order_id': 'OrderId',
        'transaction_id': 'TransactionId',
        'total_price': 'TotalPrice',
        'currency_code': 'CurrencyCode',
        'merchant_redirect_url': 'MerchantRedirectUrl',
        'culture_code': 'CultureCode',
        'es_key': 'EsKey',
        'legal': 'Legal',
        'store_id': 'StoreId',
        'styles': 'Styles',
        'terminal_id': 'TerminalId',
        'validation_message_type': 'ValidationMessageType',
        'reference_id': 'ReferenceId'
    }

    def __init__(self, order_id=None, transaction_id=None, total_price=None, currency_code=None, merchant_redirect_url=None, culture_code=None, es_key=None, legal=None, store_id=None, styles=None, terminal_id=None, validation_message_type=None, reference_id=None, _configuration=None):  # noqa: E501
        """PayByBankInitRequest - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._order_id = None
        self._transaction_id = None
        self._total_price = None
        self._currency_code = None
        self._merchant_redirect_url = None
        self._culture_code = None
        self._es_key = None
        self._legal = None
        self._store_id = None
        self._styles = None
        self._terminal_id = None
        self._validation_message_type = None
        self._reference_id = None
        self.discriminator = None

        if order_id is not None:
            self.order_id = order_id
        if transaction_id is not None:
            self.transaction_id = transaction_id
        if total_price is not None:
            self.total_price = total_price
        if currency_code is not None:
            self.currency_code = currency_code
        if merchant_redirect_url is not None:
            self.merchant_redirect_url = merchant_redirect_url
        if culture_code is not None:
            self.culture_code = culture_code
        if es_key is not None:
            self.es_key = es_key
        if legal is not None:
            self.legal = legal
        if store_id is not None:
            self.store_id = store_id
        if styles is not None:
            self.styles = styles
        if terminal_id is not None:
            self.terminal_id = terminal_id
        if validation_message_type is not None:
            self.validation_message_type = validation_message_type
        if reference_id is not None:
            self.reference_id = reference_id

    @property
    def order_id(self):
        """Gets the order_id of this PayByBankInitRequest.  # noqa: E501


        :return: The order_id of this PayByBankInitRequest.  # noqa: E501
        :rtype: str
        """
        return self._order_id

    @order_id.setter
    def order_id(self, order_id):
        """Sets the order_id of this PayByBankInitRequest.


        :param order_id: The order_id of this PayByBankInitRequest.  # noqa: E501
        :type: str
        """

        self._order_id = order_id

    @property
    def transaction_id(self):
        """Gets the transaction_id of this PayByBankInitRequest.  # noqa: E501


        :return: The transaction_id of this PayByBankInitRequest.  # noqa: E501
        :rtype: str
        """
        return self._transaction_id

    @transaction_id.setter
    def transaction_id(self, transaction_id):
        """Sets the transaction_id of this PayByBankInitRequest.


        :param transaction_id: The transaction_id of this PayByBankInitRequest.  # noqa: E501
        :type: str
        """

        self._transaction_id = transaction_id

    @property
    def total_price(self):
        """Gets the total_price of this PayByBankInitRequest.  # noqa: E501


        :return: The total_price of this PayByBankInitRequest.  # noqa: E501
        :rtype: str
        """
        return self._total_price

    @total_price.setter
    def total_price(self, total_price):
        """Sets the total_price of this PayByBankInitRequest.


        :param total_price: The total_price of this PayByBankInitRequest.  # noqa: E501
        :type: str
        """

        self._total_price = total_price

    @property
    def currency_code(self):
        """Gets the currency_code of this PayByBankInitRequest.  # noqa: E501


        :return: The currency_code of this PayByBankInitRequest.  # noqa: E501
        :rtype: str
        """
        return self._currency_code

    @currency_code.setter
    def currency_code(self, currency_code):
        """Sets the currency_code of this PayByBankInitRequest.


        :param currency_code: The currency_code of this PayByBankInitRequest.  # noqa: E501
        :type: str
        """

        self._currency_code = currency_code

    @property
    def merchant_redirect_url(self):
        """Gets the merchant_redirect_url of this PayByBankInitRequest.  # noqa: E501


        :return: The merchant_redirect_url of this PayByBankInitRequest.  # noqa: E501
        :rtype: str
        """
        return self._merchant_redirect_url

    @merchant_redirect_url.setter
    def merchant_redirect_url(self, merchant_redirect_url):
        """Sets the merchant_redirect_url of this PayByBankInitRequest.


        :param merchant_redirect_url: The merchant_redirect_url of this PayByBankInitRequest.  # noqa: E501
        :type: str
        """

        self._merchant_redirect_url = merchant_redirect_url

    @property
    def culture_code(self):
        """Gets the culture_code of this PayByBankInitRequest.  # noqa: E501


        :return: The culture_code of this PayByBankInitRequest.  # noqa: E501
        :rtype: str
        """
        return self._culture_code

    @culture_code.setter
    def culture_code(self, culture_code):
        """Sets the culture_code of this PayByBankInitRequest.


        :param culture_code: The culture_code of this PayByBankInitRequest.  # noqa: E501
        :type: str
        """

        self._culture_code = culture_code

    @property
    def es_key(self):
        """Gets the es_key of this PayByBankInitRequest.  # noqa: E501


        :return: The es_key of this PayByBankInitRequest.  # noqa: E501
        :rtype: str
        """
        return self._es_key

    @es_key.setter
    def es_key(self, es_key):
        """Sets the es_key of this PayByBankInitRequest.


        :param es_key: The es_key of this PayByBankInitRequest.  # noqa: E501
        :type: str
        """

        self._es_key = es_key

    @property
    def legal(self):
        """Gets the legal of this PayByBankInitRequest.  # noqa: E501


        :return: The legal of this PayByBankInitRequest.  # noqa: E501
        :rtype: LegalControl
        """
        return self._legal

    @legal.setter
    def legal(self, legal):
        """Sets the legal of this PayByBankInitRequest.


        :param legal: The legal of this PayByBankInitRequest.  # noqa: E501
        :type: LegalControl
        """

        self._legal = legal

    @property
    def store_id(self):
        """Gets the store_id of this PayByBankInitRequest.  # noqa: E501


        :return: The store_id of this PayByBankInitRequest.  # noqa: E501
        :rtype: str
        """
        return self._store_id

    @store_id.setter
    def store_id(self, store_id):
        """Sets the store_id of this PayByBankInitRequest.


        :param store_id: The store_id of this PayByBankInitRequest.  # noqa: E501
        :type: str
        """

        self._store_id = store_id

    @property
    def styles(self):
        """Gets the styles of this PayByBankInitRequest.  # noqa: E501


        :return: The styles of this PayByBankInitRequest.  # noqa: E501
        :rtype: str
        """
        return self._styles

    @styles.setter
    def styles(self, styles):
        """Sets the styles of this PayByBankInitRequest.


        :param styles: The styles of this PayByBankInitRequest.  # noqa: E501
        :type: str
        """

        self._styles = styles

    @property
    def terminal_id(self):
        """Gets the terminal_id of this PayByBankInitRequest.  # noqa: E501


        :return: The terminal_id of this PayByBankInitRequest.  # noqa: E501
        :rtype: str
        """
        return self._terminal_id

    @terminal_id.setter
    def terminal_id(self, terminal_id):
        """Sets the terminal_id of this PayByBankInitRequest.


        :param terminal_id: The terminal_id of this PayByBankInitRequest.  # noqa: E501
        :type: str
        """

        self._terminal_id = terminal_id

    @property
    def validation_message_type(self):
        """Gets the validation_message_type of this PayByBankInitRequest.  # noqa: E501


        :return: The validation_message_type of this PayByBankInitRequest.  # noqa: E501
        :rtype: str
        """
        return self._validation_message_type

    @validation_message_type.setter
    def validation_message_type(self, validation_message_type):
        """Sets the validation_message_type of this PayByBankInitRequest.


        :param validation_message_type: The validation_message_type of this PayByBankInitRequest.  # noqa: E501
        :type: str
        """
        allowed_values = ["Unknown", "None", "Feedback", "Tooltip"]  # noqa: E501
        if (self._configuration.client_side_validation and
                validation_message_type not in allowed_values):
            raise ValueError(
                "Invalid value for `validation_message_type` ({0}), must be one of {1}"  # noqa: E501
                .format(validation_message_type, allowed_values)
            )

        self._validation_message_type = validation_message_type

    @property
    def reference_id(self):
        """Gets the reference_id of this PayByBankInitRequest.  # noqa: E501


        :return: The reference_id of this PayByBankInitRequest.  # noqa: E501
        :rtype: str
        """
        return self._reference_id

    @reference_id.setter
    def reference_id(self, reference_id):
        """Sets the reference_id of this PayByBankInitRequest.


        :param reference_id: The reference_id of this PayByBankInitRequest.  # noqa: E501
        :type: str
        """

        self._reference_id = reference_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PayByBankInitRequest, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PayByBankInitRequest):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, PayByBankInitRequest):
            return True

        return self.to_dict() != other.to_dict()
