# coding: utf-8

"""
    Hosted Payment Controls API Documentation v1.5

    The API for Hosted Payment Controls. To access the swagger.json file open the following link: https://hpc.uat.freedompay.com/api/swagger/docs/v1.5  # noqa: E501

    OpenAPI spec version: v1.5
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from freedompay_client.configuration import Configuration


class EodService(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'level': 'str',
        'group_code': 'str',
        'run': 'str'
    }

    attribute_map = {
        'level': 'level',
        'group_code': 'groupCode',
        'run': 'run'
    }

    def __init__(self, level=None, group_code=None, run=None, _configuration=None):  # noqa: E501
        """EodService - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._level = None
        self._group_code = None
        self._run = None
        self.discriminator = None

        if level is not None:
            self.level = level
        if group_code is not None:
            self.group_code = group_code
        if run is not None:
            self.run = run

    @property
    def level(self):
        """Gets the level of this EodService.  # noqa: E501


        :return: The level of this EodService.  # noqa: E501
        :rtype: str
        """
        return self._level

    @level.setter
    def level(self, level):
        """Sets the level of this EodService.


        :param level: The level of this EodService.  # noqa: E501
        :type: str
        """

        self._level = level

    @property
    def group_code(self):
        """Gets the group_code of this EodService.  # noqa: E501


        :return: The group_code of this EodService.  # noqa: E501
        :rtype: str
        """
        return self._group_code

    @group_code.setter
    def group_code(self, group_code):
        """Sets the group_code of this EodService.


        :param group_code: The group_code of this EodService.  # noqa: E501
        :type: str
        """

        self._group_code = group_code

    @property
    def run(self):
        """Gets the run of this EodService.  # noqa: E501


        :return: The run of this EodService.  # noqa: E501
        :rtype: str
        """
        return self._run

    @run.setter
    def run(self, run):
        """Sets the run of this EodService.


        :param run: The run of this EodService.  # noqa: E501
        :type: str
        """

        self._run = run

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(EodService, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, EodService):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, EodService):
            return True

        return self.to_dict() != other.to_dict()
