# coding: utf-8

"""
    Hosted Payment Controls API Documentation v1.5

    The API for Hosted Payment Controls. To access the swagger.json file open the following link: https://hpc.uat.freedompay.com/api/swagger/docs/v1.5  # noqa: E501

    OpenAPI spec version: v1.5
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from freedompay_client.configuration import Configuration


class ConsumerAuthentication(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'enabled': 'bool',
        'auto_map_to_free_way_request': 'bool',
        'fields': 'dict(str, str)'
    }

    attribute_map = {
        'enabled': 'Enabled',
        'auto_map_to_free_way_request': 'AutoMapToFreeWayRequest',
        'fields': 'Fields'
    }

    def __init__(self, enabled=None, auto_map_to_free_way_request=None, fields=None, _configuration=None):  # noqa: E501
        """ConsumerAuthentication - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._enabled = None
        self._auto_map_to_free_way_request = None
        self._fields = None
        self.discriminator = None

        if enabled is not None:
            self.enabled = enabled
        if auto_map_to_free_way_request is not None:
            self.auto_map_to_free_way_request = auto_map_to_free_way_request
        if fields is not None:
            self.fields = fields

    @property
    def enabled(self):
        """Gets the enabled of this ConsumerAuthentication.  # noqa: E501


        :return: The enabled of this ConsumerAuthentication.  # noqa: E501
        :rtype: bool
        """
        return self._enabled

    @enabled.setter
    def enabled(self, enabled):
        """Sets the enabled of this ConsumerAuthentication.


        :param enabled: The enabled of this ConsumerAuthentication.  # noqa: E501
        :type: bool
        """

        self._enabled = enabled

    @property
    def auto_map_to_free_way_request(self):
        """Gets the auto_map_to_free_way_request of this ConsumerAuthentication.  # noqa: E501


        :return: The auto_map_to_free_way_request of this ConsumerAuthentication.  # noqa: E501
        :rtype: bool
        """
        return self._auto_map_to_free_way_request

    @auto_map_to_free_way_request.setter
    def auto_map_to_free_way_request(self, auto_map_to_free_way_request):
        """Sets the auto_map_to_free_way_request of this ConsumerAuthentication.


        :param auto_map_to_free_way_request: The auto_map_to_free_way_request of this ConsumerAuthentication.  # noqa: E501
        :type: bool
        """

        self._auto_map_to_free_way_request = auto_map_to_free_way_request

    @property
    def fields(self):
        """Gets the fields of this ConsumerAuthentication.  # noqa: E501


        :return: The fields of this ConsumerAuthentication.  # noqa: E501
        :rtype: dict(str, str)
        """
        return self._fields

    @fields.setter
    def fields(self, fields):
        """Sets the fields of this ConsumerAuthentication.


        :param fields: The fields of this ConsumerAuthentication.  # noqa: E501
        :type: dict(str, str)
        """

        self._fields = fields

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ConsumerAuthentication, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ConsumerAuthentication):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ConsumerAuthentication):
            return True

        return self.to_dict() != other.to_dict()
