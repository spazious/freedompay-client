# coding: utf-8

"""
    Hosted Payment Controls API Documentation v1.5

    The API for Hosted Payment Controls. To access the swagger.json file open the following link: https://hpc.uat.freedompay.com/api/swagger/docs/v1.5  # noqa: E501

    OpenAPI spec version: v1.5
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from freedompay_client.configuration import Configuration


class PayPalInitRequest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'commit': 'bool',
        'disabled': 'bool',
        'disable_funding': 'str',
        'intent': 'str',
        'invoice_number': 'str',
        'payment_method_payee_preferred': 'str',
        'shipping_preference': 'str',
        'total_price': 'str',
        'country_code': 'str',
        'currency_code': 'str',
        'debug': 'bool',
        'locale': 'str',
        'culture_code': 'str',
        'es_key': 'str',
        'legal': 'LegalControl',
        'store_id': 'str',
        'styles': 'str',
        'terminal_id': 'str',
        'validation_message_type': 'str',
        'reference_id': 'str'
    }

    attribute_map = {
        'commit': 'Commit',
        'disabled': 'Disabled',
        'disable_funding': 'DisableFunding',
        'intent': 'Intent',
        'invoice_number': 'InvoiceNumber',
        'payment_method_payee_preferred': 'PaymentMethodPayeePreferred',
        'shipping_preference': 'ShippingPreference',
        'total_price': 'TotalPrice',
        'country_code': 'CountryCode',
        'currency_code': 'CurrencyCode',
        'debug': 'Debug',
        'locale': 'Locale',
        'culture_code': 'CultureCode',
        'es_key': 'EsKey',
        'legal': 'Legal',
        'store_id': 'StoreId',
        'styles': 'Styles',
        'terminal_id': 'TerminalId',
        'validation_message_type': 'ValidationMessageType',
        'reference_id': 'ReferenceId'
    }

    def __init__(self, commit=None, disabled=None, disable_funding=None, intent=None, invoice_number=None, payment_method_payee_preferred=None, shipping_preference=None, total_price=None, country_code=None, currency_code=None, debug=None, locale=None, culture_code=None, es_key=None, legal=None, store_id=None, styles=None, terminal_id=None, validation_message_type=None, reference_id=None, _configuration=None):  # noqa: E501
        """PayPalInitRequest - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._commit = None
        self._disabled = None
        self._disable_funding = None
        self._intent = None
        self._invoice_number = None
        self._payment_method_payee_preferred = None
        self._shipping_preference = None
        self._total_price = None
        self._country_code = None
        self._currency_code = None
        self._debug = None
        self._locale = None
        self._culture_code = None
        self._es_key = None
        self._legal = None
        self._store_id = None
        self._styles = None
        self._terminal_id = None
        self._validation_message_type = None
        self._reference_id = None
        self.discriminator = None

        if commit is not None:
            self.commit = commit
        if disabled is not None:
            self.disabled = disabled
        if disable_funding is not None:
            self.disable_funding = disable_funding
        if intent is not None:
            self.intent = intent
        if invoice_number is not None:
            self.invoice_number = invoice_number
        if payment_method_payee_preferred is not None:
            self.payment_method_payee_preferred = payment_method_payee_preferred
        if shipping_preference is not None:
            self.shipping_preference = shipping_preference
        if total_price is not None:
            self.total_price = total_price
        if country_code is not None:
            self.country_code = country_code
        if currency_code is not None:
            self.currency_code = currency_code
        if debug is not None:
            self.debug = debug
        if locale is not None:
            self.locale = locale
        if culture_code is not None:
            self.culture_code = culture_code
        if es_key is not None:
            self.es_key = es_key
        if legal is not None:
            self.legal = legal
        if store_id is not None:
            self.store_id = store_id
        if styles is not None:
            self.styles = styles
        if terminal_id is not None:
            self.terminal_id = terminal_id
        if validation_message_type is not None:
            self.validation_message_type = validation_message_type
        if reference_id is not None:
            self.reference_id = reference_id

    @property
    def commit(self):
        """Gets the commit of this PayPalInitRequest.  # noqa: E501


        :return: The commit of this PayPalInitRequest.  # noqa: E501
        :rtype: bool
        """
        return self._commit

    @commit.setter
    def commit(self, commit):
        """Sets the commit of this PayPalInitRequest.


        :param commit: The commit of this PayPalInitRequest.  # noqa: E501
        :type: bool
        """

        self._commit = commit

    @property
    def disabled(self):
        """Gets the disabled of this PayPalInitRequest.  # noqa: E501


        :return: The disabled of this PayPalInitRequest.  # noqa: E501
        :rtype: bool
        """
        return self._disabled

    @disabled.setter
    def disabled(self, disabled):
        """Sets the disabled of this PayPalInitRequest.


        :param disabled: The disabled of this PayPalInitRequest.  # noqa: E501
        :type: bool
        """

        self._disabled = disabled

    @property
    def disable_funding(self):
        """Gets the disable_funding of this PayPalInitRequest.  # noqa: E501


        :return: The disable_funding of this PayPalInitRequest.  # noqa: E501
        :rtype: str
        """
        return self._disable_funding

    @disable_funding.setter
    def disable_funding(self, disable_funding):
        """Sets the disable_funding of this PayPalInitRequest.


        :param disable_funding: The disable_funding of this PayPalInitRequest.  # noqa: E501
        :type: str
        """

        self._disable_funding = disable_funding

    @property
    def intent(self):
        """Gets the intent of this PayPalInitRequest.  # noqa: E501


        :return: The intent of this PayPalInitRequest.  # noqa: E501
        :rtype: str
        """
        return self._intent

    @intent.setter
    def intent(self, intent):
        """Sets the intent of this PayPalInitRequest.


        :param intent: The intent of this PayPalInitRequest.  # noqa: E501
        :type: str
        """
        allowed_values = ["Unknown", "AUTHORIZE", "CAPTURE"]  # noqa: E501
        if (self._configuration.client_side_validation and
                intent not in allowed_values):
            raise ValueError(
                "Invalid value for `intent` ({0}), must be one of {1}"  # noqa: E501
                .format(intent, allowed_values)
            )

        self._intent = intent

    @property
    def invoice_number(self):
        """Gets the invoice_number of this PayPalInitRequest.  # noqa: E501


        :return: The invoice_number of this PayPalInitRequest.  # noqa: E501
        :rtype: str
        """
        return self._invoice_number

    @invoice_number.setter
    def invoice_number(self, invoice_number):
        """Sets the invoice_number of this PayPalInitRequest.


        :param invoice_number: The invoice_number of this PayPalInitRequest.  # noqa: E501
        :type: str
        """

        self._invoice_number = invoice_number

    @property
    def payment_method_payee_preferred(self):
        """Gets the payment_method_payee_preferred of this PayPalInitRequest.  # noqa: E501


        :return: The payment_method_payee_preferred of this PayPalInitRequest.  # noqa: E501
        :rtype: str
        """
        return self._payment_method_payee_preferred

    @payment_method_payee_preferred.setter
    def payment_method_payee_preferred(self, payment_method_payee_preferred):
        """Sets the payment_method_payee_preferred of this PayPalInitRequest.


        :param payment_method_payee_preferred: The payment_method_payee_preferred of this PayPalInitRequest.  # noqa: E501
        :type: str
        """
        allowed_values = ["Unknown", "UNRESTRICTED", "IMMEDIATE_PAYMENT_REQUIRED"]  # noqa: E501
        if (self._configuration.client_side_validation and
                payment_method_payee_preferred not in allowed_values):
            raise ValueError(
                "Invalid value for `payment_method_payee_preferred` ({0}), must be one of {1}"  # noqa: E501
                .format(payment_method_payee_preferred, allowed_values)
            )

        self._payment_method_payee_preferred = payment_method_payee_preferred

    @property
    def shipping_preference(self):
        """Gets the shipping_preference of this PayPalInitRequest.  # noqa: E501


        :return: The shipping_preference of this PayPalInitRequest.  # noqa: E501
        :rtype: str
        """
        return self._shipping_preference

    @shipping_preference.setter
    def shipping_preference(self, shipping_preference):
        """Sets the shipping_preference of this PayPalInitRequest.


        :param shipping_preference: The shipping_preference of this PayPalInitRequest.  # noqa: E501
        :type: str
        """
        allowed_values = ["Unknown", "GET_FROM_FILE", "NO_SHIPPING"]  # noqa: E501
        if (self._configuration.client_side_validation and
                shipping_preference not in allowed_values):
            raise ValueError(
                "Invalid value for `shipping_preference` ({0}), must be one of {1}"  # noqa: E501
                .format(shipping_preference, allowed_values)
            )

        self._shipping_preference = shipping_preference

    @property
    def total_price(self):
        """Gets the total_price of this PayPalInitRequest.  # noqa: E501


        :return: The total_price of this PayPalInitRequest.  # noqa: E501
        :rtype: str
        """
        return self._total_price

    @total_price.setter
    def total_price(self, total_price):
        """Sets the total_price of this PayPalInitRequest.


        :param total_price: The total_price of this PayPalInitRequest.  # noqa: E501
        :type: str
        """

        self._total_price = total_price

    @property
    def country_code(self):
        """Gets the country_code of this PayPalInitRequest.  # noqa: E501


        :return: The country_code of this PayPalInitRequest.  # noqa: E501
        :rtype: str
        """
        return self._country_code

    @country_code.setter
    def country_code(self, country_code):
        """Sets the country_code of this PayPalInitRequest.


        :param country_code: The country_code of this PayPalInitRequest.  # noqa: E501
        :type: str
        """

        self._country_code = country_code

    @property
    def currency_code(self):
        """Gets the currency_code of this PayPalInitRequest.  # noqa: E501


        :return: The currency_code of this PayPalInitRequest.  # noqa: E501
        :rtype: str
        """
        return self._currency_code

    @currency_code.setter
    def currency_code(self, currency_code):
        """Sets the currency_code of this PayPalInitRequest.


        :param currency_code: The currency_code of this PayPalInitRequest.  # noqa: E501
        :type: str
        """

        self._currency_code = currency_code

    @property
    def debug(self):
        """Gets the debug of this PayPalInitRequest.  # noqa: E501


        :return: The debug of this PayPalInitRequest.  # noqa: E501
        :rtype: bool
        """
        return self._debug

    @debug.setter
    def debug(self, debug):
        """Sets the debug of this PayPalInitRequest.


        :param debug: The debug of this PayPalInitRequest.  # noqa: E501
        :type: bool
        """

        self._debug = debug

    @property
    def locale(self):
        """Gets the locale of this PayPalInitRequest.  # noqa: E501


        :return: The locale of this PayPalInitRequest.  # noqa: E501
        :rtype: str
        """
        return self._locale

    @locale.setter
    def locale(self, locale):
        """Sets the locale of this PayPalInitRequest.


        :param locale: The locale of this PayPalInitRequest.  # noqa: E501
        :type: str
        """

        self._locale = locale

    @property
    def culture_code(self):
        """Gets the culture_code of this PayPalInitRequest.  # noqa: E501


        :return: The culture_code of this PayPalInitRequest.  # noqa: E501
        :rtype: str
        """
        return self._culture_code

    @culture_code.setter
    def culture_code(self, culture_code):
        """Sets the culture_code of this PayPalInitRequest.


        :param culture_code: The culture_code of this PayPalInitRequest.  # noqa: E501
        :type: str
        """

        self._culture_code = culture_code

    @property
    def es_key(self):
        """Gets the es_key of this PayPalInitRequest.  # noqa: E501


        :return: The es_key of this PayPalInitRequest.  # noqa: E501
        :rtype: str
        """
        return self._es_key

    @es_key.setter
    def es_key(self, es_key):
        """Sets the es_key of this PayPalInitRequest.


        :param es_key: The es_key of this PayPalInitRequest.  # noqa: E501
        :type: str
        """

        self._es_key = es_key

    @property
    def legal(self):
        """Gets the legal of this PayPalInitRequest.  # noqa: E501


        :return: The legal of this PayPalInitRequest.  # noqa: E501
        :rtype: LegalControl
        """
        return self._legal

    @legal.setter
    def legal(self, legal):
        """Sets the legal of this PayPalInitRequest.


        :param legal: The legal of this PayPalInitRequest.  # noqa: E501
        :type: LegalControl
        """

        self._legal = legal

    @property
    def store_id(self):
        """Gets the store_id of this PayPalInitRequest.  # noqa: E501


        :return: The store_id of this PayPalInitRequest.  # noqa: E501
        :rtype: str
        """
        return self._store_id

    @store_id.setter
    def store_id(self, store_id):
        """Sets the store_id of this PayPalInitRequest.


        :param store_id: The store_id of this PayPalInitRequest.  # noqa: E501
        :type: str
        """

        self._store_id = store_id

    @property
    def styles(self):
        """Gets the styles of this PayPalInitRequest.  # noqa: E501


        :return: The styles of this PayPalInitRequest.  # noqa: E501
        :rtype: str
        """
        return self._styles

    @styles.setter
    def styles(self, styles):
        """Sets the styles of this PayPalInitRequest.


        :param styles: The styles of this PayPalInitRequest.  # noqa: E501
        :type: str
        """

        self._styles = styles

    @property
    def terminal_id(self):
        """Gets the terminal_id of this PayPalInitRequest.  # noqa: E501


        :return: The terminal_id of this PayPalInitRequest.  # noqa: E501
        :rtype: str
        """
        return self._terminal_id

    @terminal_id.setter
    def terminal_id(self, terminal_id):
        """Sets the terminal_id of this PayPalInitRequest.


        :param terminal_id: The terminal_id of this PayPalInitRequest.  # noqa: E501
        :type: str
        """

        self._terminal_id = terminal_id

    @property
    def validation_message_type(self):
        """Gets the validation_message_type of this PayPalInitRequest.  # noqa: E501


        :return: The validation_message_type of this PayPalInitRequest.  # noqa: E501
        :rtype: str
        """
        return self._validation_message_type

    @validation_message_type.setter
    def validation_message_type(self, validation_message_type):
        """Sets the validation_message_type of this PayPalInitRequest.


        :param validation_message_type: The validation_message_type of this PayPalInitRequest.  # noqa: E501
        :type: str
        """
        allowed_values = ["Unknown", "None", "Feedback", "Tooltip"]  # noqa: E501
        if (self._configuration.client_side_validation and
                validation_message_type not in allowed_values):
            raise ValueError(
                "Invalid value for `validation_message_type` ({0}), must be one of {1}"  # noqa: E501
                .format(validation_message_type, allowed_values)
            )

        self._validation_message_type = validation_message_type

    @property
    def reference_id(self):
        """Gets the reference_id of this PayPalInitRequest.  # noqa: E501


        :return: The reference_id of this PayPalInitRequest.  # noqa: E501
        :rtype: str
        """
        return self._reference_id

    @reference_id.setter
    def reference_id(self, reference_id):
        """Sets the reference_id of this PayPalInitRequest.


        :param reference_id: The reference_id of this PayPalInitRequest.  # noqa: E501
        :type: str
        """

        self._reference_id = reference_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PayPalInitRequest, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PayPalInitRequest):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, PayPalInitRequest):
            return True

        return self.to_dict() != other.to_dict()
