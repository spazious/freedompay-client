# coding: utf-8

"""
    Hosted Payment Controls API Documentation v1.5

    The API for Hosted Payment Controls. To access the swagger.json file open the following link: https://hpc.uat.freedompay.com/api/swagger/docs/v1.5

    The version of the OpenAPI document: v1.5
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel, Field, StrictBool, StrictStr, validator
from freedompay_client.models.legal_control import LegalControl

class PayPalInitRequest(BaseModel):
    """
    PayPalInitRequest
    """
    commit: Optional[StrictBool] = Field(None, alias="Commit")
    disabled: Optional[StrictBool] = Field(None, alias="Disabled")
    disable_funding: Optional[StrictStr] = Field(None, alias="DisableFunding")
    intent: Optional[StrictStr] = Field(None, alias="Intent")
    invoice_number: Optional[StrictStr] = Field(None, alias="InvoiceNumber")
    payment_method_payee_preferred: Optional[StrictStr] = Field(None, alias="PaymentMethodPayeePreferred")
    shipping_preference: Optional[StrictStr] = Field(None, alias="ShippingPreference")
    total_price: Optional[StrictStr] = Field(None, alias="TotalPrice")
    country_code: Optional[StrictStr] = Field(None, alias="CountryCode")
    currency_code: Optional[StrictStr] = Field(None, alias="CurrencyCode")
    debug: Optional[StrictBool] = Field(None, alias="Debug")
    locale: Optional[StrictStr] = Field(None, alias="Locale")
    culture_code: Optional[StrictStr] = Field(None, alias="CultureCode")
    es_key: Optional[StrictStr] = Field(None, alias="EsKey")
    legal: Optional[LegalControl] = Field(None, alias="Legal")
    store_id: Optional[StrictStr] = Field(None, alias="StoreId")
    styles: Optional[StrictStr] = Field(None, alias="Styles")
    terminal_id: Optional[StrictStr] = Field(None, alias="TerminalId")
    validation_message_type: Optional[StrictStr] = Field(None, alias="ValidationMessageType")
    reference_id: Optional[StrictStr] = Field(None, alias="ReferenceId")
    __properties = ["Commit", "Disabled", "DisableFunding", "Intent", "InvoiceNumber", "PaymentMethodPayeePreferred", "ShippingPreference", "TotalPrice", "CountryCode", "CurrencyCode", "Debug", "Locale", "CultureCode", "EsKey", "Legal", "StoreId", "Styles", "TerminalId", "ValidationMessageType", "ReferenceId"]

    @validator('intent')
    def intent_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in ('Unknown', 'AUTHORIZE', 'CAPTURE'):
            raise ValueError("must be one of enum values ('Unknown', 'AUTHORIZE', 'CAPTURE')")
        return value

    @validator('payment_method_payee_preferred')
    def payment_method_payee_preferred_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in ('Unknown', 'UNRESTRICTED', 'IMMEDIATE_PAYMENT_REQUIRED'):
            raise ValueError("must be one of enum values ('Unknown', 'UNRESTRICTED', 'IMMEDIATE_PAYMENT_REQUIRED')")
        return value

    @validator('shipping_preference')
    def shipping_preference_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in ('Unknown', 'GET_FROM_FILE', 'NO_SHIPPING'):
            raise ValueError("must be one of enum values ('Unknown', 'GET_FROM_FILE', 'NO_SHIPPING')")
        return value

    @validator('validation_message_type')
    def validation_message_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in ('Unknown', 'None', 'Feedback', 'Tooltip'):
            raise ValueError("must be one of enum values ('Unknown', 'None', 'Feedback', 'Tooltip')")
        return value

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> PayPalInitRequest:
        """Create an instance of PayPalInitRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of legal
        if self.legal:
            _dict['Legal'] = self.legal.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> PayPalInitRequest:
        """Create an instance of PayPalInitRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return PayPalInitRequest.parse_obj(obj)

        _obj = PayPalInitRequest.parse_obj({
            "commit": obj.get("Commit"),
            "disabled": obj.get("Disabled"),
            "disable_funding": obj.get("DisableFunding"),
            "intent": obj.get("Intent"),
            "invoice_number": obj.get("InvoiceNumber"),
            "payment_method_payee_preferred": obj.get("PaymentMethodPayeePreferred"),
            "shipping_preference": obj.get("ShippingPreference"),
            "total_price": obj.get("TotalPrice"),
            "country_code": obj.get("CountryCode"),
            "currency_code": obj.get("CurrencyCode"),
            "debug": obj.get("Debug"),
            "locale": obj.get("Locale"),
            "culture_code": obj.get("CultureCode"),
            "es_key": obj.get("EsKey"),
            "legal": LegalControl.from_dict(obj.get("Legal")) if obj.get("Legal") is not None else None,
            "store_id": obj.get("StoreId"),
            "styles": obj.get("Styles"),
            "terminal_id": obj.get("TerminalId"),
            "validation_message_type": obj.get("ValidationMessageType"),
            "reference_id": obj.get("ReferenceId")
        })
        return _obj


