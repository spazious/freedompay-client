# coding: utf-8

"""
    Hosted Payment Controls API Documentation v1.5

    The API for Hosted Payment Controls. To access the swagger.json file open the following link: https://hpc.uat.freedompay.com/api/swagger/docs/v1.5

    The version of the OpenAPI document: v1.5
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel, Field, StrictStr

class Pos(BaseModel):
    """
    Pos
    """
    register_number: Optional[StrictStr] = Field(None, alias="registerNumber")
    entry_mode: Optional[StrictStr] = Field(None, alias="entryMode")
    track1: Optional[StrictStr] = None
    track2: Optional[StrictStr] = None
    track3: Optional[StrictStr] = None
    track_ksn: Optional[StrictStr] = Field(None, alias="trackKsn")
    sequence_number: Optional[StrictStr] = Field(None, alias="sequenceNumber")
    card_present: Optional[StrictStr] = Field(None, alias="cardPresent")
    track1e: Optional[StrictStr] = None
    track2e: Optional[StrictStr] = None
    track1len: Optional[StrictStr] = None
    track2len: Optional[StrictStr] = None
    tracke: Optional[StrictStr] = None
    enc_mode: Optional[StrictStr] = Field(None, alias="encMode")
    msr_type: Optional[StrictStr] = Field(None, alias="msrType")
    payment_date: Optional[StrictStr] = Field(None, alias="paymentDate")
    chip_data: Optional[StrictStr] = Field(None, alias="chipData")
    issuer_script_results: Optional[StrictStr] = Field(None, alias="issuerScriptResults")
    caps: Optional[StrictStr] = None
    fallback_reason: Optional[StrictStr] = Field(None, alias="fallbackReason")
    sig_data: Optional[StrictStr] = Field(None, alias="sigData")
    __properties = ["registerNumber", "entryMode", "track1", "track2", "track3", "trackKsn", "sequenceNumber", "cardPresent", "track1e", "track2e", "track1len", "track2len", "tracke", "encMode", "msrType", "paymentDate", "chipData", "issuerScriptResults", "caps", "fallbackReason", "sigData"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Pos:
        """Create an instance of Pos from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> Pos:
        """Create an instance of Pos from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return Pos.parse_obj(obj)

        _obj = Pos.parse_obj({
            "register_number": obj.get("registerNumber"),
            "entry_mode": obj.get("entryMode"),
            "track1": obj.get("track1"),
            "track2": obj.get("track2"),
            "track3": obj.get("track3"),
            "track_ksn": obj.get("trackKsn"),
            "sequence_number": obj.get("sequenceNumber"),
            "card_present": obj.get("cardPresent"),
            "track1e": obj.get("track1e"),
            "track2e": obj.get("track2e"),
            "track1len": obj.get("track1len"),
            "track2len": obj.get("track2len"),
            "tracke": obj.get("tracke"),
            "enc_mode": obj.get("encMode"),
            "msr_type": obj.get("msrType"),
            "payment_date": obj.get("paymentDate"),
            "chip_data": obj.get("chipData"),
            "issuer_script_results": obj.get("issuerScriptResults"),
            "caps": obj.get("caps"),
            "fallback_reason": obj.get("fallbackReason"),
            "sig_data": obj.get("sigData")
        })
        return _obj


