# coding: utf-8

"""
    Hosted Payment Controls API Documentation v1.5

    The API for Hosted Payment Controls. To access the swagger.json file open the following link: https://hpc.uat.freedompay.com/api/swagger/docs/v1.5  # noqa: E501

    OpenAPI spec version: v1.5
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from freedompay_client.configuration import Configuration


class Pos(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'register_number': 'str',
        'entry_mode': 'str',
        'track1': 'str',
        'track2': 'str',
        'track3': 'str',
        'track_ksn': 'str',
        'sequence_number': 'str',
        'card_present': 'str',
        'track1e': 'str',
        'track2e': 'str',
        'track1len': 'str',
        'track2len': 'str',
        'tracke': 'str',
        'enc_mode': 'str',
        'msr_type': 'str',
        'payment_date': 'str',
        'chip_data': 'str',
        'issuer_script_results': 'str',
        'caps': 'str',
        'fallback_reason': 'str',
        'sig_data': 'str'
    }

    attribute_map = {
        'register_number': 'registerNumber',
        'entry_mode': 'entryMode',
        'track1': 'track1',
        'track2': 'track2',
        'track3': 'track3',
        'track_ksn': 'trackKsn',
        'sequence_number': 'sequenceNumber',
        'card_present': 'cardPresent',
        'track1e': 'track1e',
        'track2e': 'track2e',
        'track1len': 'track1len',
        'track2len': 'track2len',
        'tracke': 'tracke',
        'enc_mode': 'encMode',
        'msr_type': 'msrType',
        'payment_date': 'paymentDate',
        'chip_data': 'chipData',
        'issuer_script_results': 'issuerScriptResults',
        'caps': 'caps',
        'fallback_reason': 'fallbackReason',
        'sig_data': 'sigData'
    }

    def __init__(self, register_number=None, entry_mode=None, track1=None, track2=None, track3=None, track_ksn=None, sequence_number=None, card_present=None, track1e=None, track2e=None, track1len=None, track2len=None, tracke=None, enc_mode=None, msr_type=None, payment_date=None, chip_data=None, issuer_script_results=None, caps=None, fallback_reason=None, sig_data=None, _configuration=None):  # noqa: E501
        """Pos - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._register_number = None
        self._entry_mode = None
        self._track1 = None
        self._track2 = None
        self._track3 = None
        self._track_ksn = None
        self._sequence_number = None
        self._card_present = None
        self._track1e = None
        self._track2e = None
        self._track1len = None
        self._track2len = None
        self._tracke = None
        self._enc_mode = None
        self._msr_type = None
        self._payment_date = None
        self._chip_data = None
        self._issuer_script_results = None
        self._caps = None
        self._fallback_reason = None
        self._sig_data = None
        self.discriminator = None

        if register_number is not None:
            self.register_number = register_number
        if entry_mode is not None:
            self.entry_mode = entry_mode
        if track1 is not None:
            self.track1 = track1
        if track2 is not None:
            self.track2 = track2
        if track3 is not None:
            self.track3 = track3
        if track_ksn is not None:
            self.track_ksn = track_ksn
        if sequence_number is not None:
            self.sequence_number = sequence_number
        if card_present is not None:
            self.card_present = card_present
        if track1e is not None:
            self.track1e = track1e
        if track2e is not None:
            self.track2e = track2e
        if track1len is not None:
            self.track1len = track1len
        if track2len is not None:
            self.track2len = track2len
        if tracke is not None:
            self.tracke = tracke
        if enc_mode is not None:
            self.enc_mode = enc_mode
        if msr_type is not None:
            self.msr_type = msr_type
        if payment_date is not None:
            self.payment_date = payment_date
        if chip_data is not None:
            self.chip_data = chip_data
        if issuer_script_results is not None:
            self.issuer_script_results = issuer_script_results
        if caps is not None:
            self.caps = caps
        if fallback_reason is not None:
            self.fallback_reason = fallback_reason
        if sig_data is not None:
            self.sig_data = sig_data

    @property
    def register_number(self):
        """Gets the register_number of this Pos.  # noqa: E501


        :return: The register_number of this Pos.  # noqa: E501
        :rtype: str
        """
        return self._register_number

    @register_number.setter
    def register_number(self, register_number):
        """Sets the register_number of this Pos.


        :param register_number: The register_number of this Pos.  # noqa: E501
        :type: str
        """

        self._register_number = register_number

    @property
    def entry_mode(self):
        """Gets the entry_mode of this Pos.  # noqa: E501


        :return: The entry_mode of this Pos.  # noqa: E501
        :rtype: str
        """
        return self._entry_mode

    @entry_mode.setter
    def entry_mode(self, entry_mode):
        """Sets the entry_mode of this Pos.


        :param entry_mode: The entry_mode of this Pos.  # noqa: E501
        :type: str
        """

        self._entry_mode = entry_mode

    @property
    def track1(self):
        """Gets the track1 of this Pos.  # noqa: E501


        :return: The track1 of this Pos.  # noqa: E501
        :rtype: str
        """
        return self._track1

    @track1.setter
    def track1(self, track1):
        """Sets the track1 of this Pos.


        :param track1: The track1 of this Pos.  # noqa: E501
        :type: str
        """

        self._track1 = track1

    @property
    def track2(self):
        """Gets the track2 of this Pos.  # noqa: E501


        :return: The track2 of this Pos.  # noqa: E501
        :rtype: str
        """
        return self._track2

    @track2.setter
    def track2(self, track2):
        """Sets the track2 of this Pos.


        :param track2: The track2 of this Pos.  # noqa: E501
        :type: str
        """

        self._track2 = track2

    @property
    def track3(self):
        """Gets the track3 of this Pos.  # noqa: E501


        :return: The track3 of this Pos.  # noqa: E501
        :rtype: str
        """
        return self._track3

    @track3.setter
    def track3(self, track3):
        """Sets the track3 of this Pos.


        :param track3: The track3 of this Pos.  # noqa: E501
        :type: str
        """

        self._track3 = track3

    @property
    def track_ksn(self):
        """Gets the track_ksn of this Pos.  # noqa: E501


        :return: The track_ksn of this Pos.  # noqa: E501
        :rtype: str
        """
        return self._track_ksn

    @track_ksn.setter
    def track_ksn(self, track_ksn):
        """Sets the track_ksn of this Pos.


        :param track_ksn: The track_ksn of this Pos.  # noqa: E501
        :type: str
        """

        self._track_ksn = track_ksn

    @property
    def sequence_number(self):
        """Gets the sequence_number of this Pos.  # noqa: E501


        :return: The sequence_number of this Pos.  # noqa: E501
        :rtype: str
        """
        return self._sequence_number

    @sequence_number.setter
    def sequence_number(self, sequence_number):
        """Sets the sequence_number of this Pos.


        :param sequence_number: The sequence_number of this Pos.  # noqa: E501
        :type: str
        """

        self._sequence_number = sequence_number

    @property
    def card_present(self):
        """Gets the card_present of this Pos.  # noqa: E501


        :return: The card_present of this Pos.  # noqa: E501
        :rtype: str
        """
        return self._card_present

    @card_present.setter
    def card_present(self, card_present):
        """Sets the card_present of this Pos.


        :param card_present: The card_present of this Pos.  # noqa: E501
        :type: str
        """

        self._card_present = card_present

    @property
    def track1e(self):
        """Gets the track1e of this Pos.  # noqa: E501


        :return: The track1e of this Pos.  # noqa: E501
        :rtype: str
        """
        return self._track1e

    @track1e.setter
    def track1e(self, track1e):
        """Sets the track1e of this Pos.


        :param track1e: The track1e of this Pos.  # noqa: E501
        :type: str
        """

        self._track1e = track1e

    @property
    def track2e(self):
        """Gets the track2e of this Pos.  # noqa: E501


        :return: The track2e of this Pos.  # noqa: E501
        :rtype: str
        """
        return self._track2e

    @track2e.setter
    def track2e(self, track2e):
        """Sets the track2e of this Pos.


        :param track2e: The track2e of this Pos.  # noqa: E501
        :type: str
        """

        self._track2e = track2e

    @property
    def track1len(self):
        """Gets the track1len of this Pos.  # noqa: E501


        :return: The track1len of this Pos.  # noqa: E501
        :rtype: str
        """
        return self._track1len

    @track1len.setter
    def track1len(self, track1len):
        """Sets the track1len of this Pos.


        :param track1len: The track1len of this Pos.  # noqa: E501
        :type: str
        """

        self._track1len = track1len

    @property
    def track2len(self):
        """Gets the track2len of this Pos.  # noqa: E501


        :return: The track2len of this Pos.  # noqa: E501
        :rtype: str
        """
        return self._track2len

    @track2len.setter
    def track2len(self, track2len):
        """Sets the track2len of this Pos.


        :param track2len: The track2len of this Pos.  # noqa: E501
        :type: str
        """

        self._track2len = track2len

    @property
    def tracke(self):
        """Gets the tracke of this Pos.  # noqa: E501


        :return: The tracke of this Pos.  # noqa: E501
        :rtype: str
        """
        return self._tracke

    @tracke.setter
    def tracke(self, tracke):
        """Sets the tracke of this Pos.


        :param tracke: The tracke of this Pos.  # noqa: E501
        :type: str
        """

        self._tracke = tracke

    @property
    def enc_mode(self):
        """Gets the enc_mode of this Pos.  # noqa: E501


        :return: The enc_mode of this Pos.  # noqa: E501
        :rtype: str
        """
        return self._enc_mode

    @enc_mode.setter
    def enc_mode(self, enc_mode):
        """Sets the enc_mode of this Pos.


        :param enc_mode: The enc_mode of this Pos.  # noqa: E501
        :type: str
        """

        self._enc_mode = enc_mode

    @property
    def msr_type(self):
        """Gets the msr_type of this Pos.  # noqa: E501


        :return: The msr_type of this Pos.  # noqa: E501
        :rtype: str
        """
        return self._msr_type

    @msr_type.setter
    def msr_type(self, msr_type):
        """Sets the msr_type of this Pos.


        :param msr_type: The msr_type of this Pos.  # noqa: E501
        :type: str
        """

        self._msr_type = msr_type

    @property
    def payment_date(self):
        """Gets the payment_date of this Pos.  # noqa: E501


        :return: The payment_date of this Pos.  # noqa: E501
        :rtype: str
        """
        return self._payment_date

    @payment_date.setter
    def payment_date(self, payment_date):
        """Sets the payment_date of this Pos.


        :param payment_date: The payment_date of this Pos.  # noqa: E501
        :type: str
        """

        self._payment_date = payment_date

    @property
    def chip_data(self):
        """Gets the chip_data of this Pos.  # noqa: E501


        :return: The chip_data of this Pos.  # noqa: E501
        :rtype: str
        """
        return self._chip_data

    @chip_data.setter
    def chip_data(self, chip_data):
        """Sets the chip_data of this Pos.


        :param chip_data: The chip_data of this Pos.  # noqa: E501
        :type: str
        """

        self._chip_data = chip_data

    @property
    def issuer_script_results(self):
        """Gets the issuer_script_results of this Pos.  # noqa: E501


        :return: The issuer_script_results of this Pos.  # noqa: E501
        :rtype: str
        """
        return self._issuer_script_results

    @issuer_script_results.setter
    def issuer_script_results(self, issuer_script_results):
        """Sets the issuer_script_results of this Pos.


        :param issuer_script_results: The issuer_script_results of this Pos.  # noqa: E501
        :type: str
        """

        self._issuer_script_results = issuer_script_results

    @property
    def caps(self):
        """Gets the caps of this Pos.  # noqa: E501


        :return: The caps of this Pos.  # noqa: E501
        :rtype: str
        """
        return self._caps

    @caps.setter
    def caps(self, caps):
        """Sets the caps of this Pos.


        :param caps: The caps of this Pos.  # noqa: E501
        :type: str
        """

        self._caps = caps

    @property
    def fallback_reason(self):
        """Gets the fallback_reason of this Pos.  # noqa: E501


        :return: The fallback_reason of this Pos.  # noqa: E501
        :rtype: str
        """
        return self._fallback_reason

    @fallback_reason.setter
    def fallback_reason(self, fallback_reason):
        """Sets the fallback_reason of this Pos.


        :param fallback_reason: The fallback_reason of this Pos.  # noqa: E501
        :type: str
        """

        self._fallback_reason = fallback_reason

    @property
    def sig_data(self):
        """Gets the sig_data of this Pos.  # noqa: E501


        :return: The sig_data of this Pos.  # noqa: E501
        :rtype: str
        """
        return self._sig_data

    @sig_data.setter
    def sig_data(self, sig_data):
        """Sets the sig_data of this Pos.


        :param sig_data: The sig_data of this Pos.  # noqa: E501
        :type: str
        """

        self._sig_data = sig_data

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Pos, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Pos):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, Pos):
            return True

        return self.to_dict() != other.to_dict()
