# coding: utf-8

"""
    Hosted Payment Controls API Documentation v1.5

    The API for Hosted Payment Controls. To access the swagger.json file open the following link: https://hpc.uat.freedompay.com/api/swagger/docs/v1.5

    The version of the OpenAPI document: v1.5
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel, Field, StrictStr

class MerchantDefinedData(BaseModel):
    """
    MerchantDefinedData
    """
    format_id: Optional[StrictStr] = Field(None, alias="formatId")
    field1: Optional[StrictStr] = None
    field2: Optional[StrictStr] = None
    field3: Optional[StrictStr] = None
    field4: Optional[StrictStr] = None
    field5: Optional[StrictStr] = None
    field6: Optional[StrictStr] = None
    field7: Optional[StrictStr] = None
    field8: Optional[StrictStr] = None
    field9: Optional[StrictStr] = None
    field10: Optional[StrictStr] = None
    field11: Optional[StrictStr] = None
    field12: Optional[StrictStr] = None
    field13: Optional[StrictStr] = None
    field14: Optional[StrictStr] = None
    field15: Optional[StrictStr] = None
    field16: Optional[StrictStr] = None
    field17: Optional[StrictStr] = None
    field18: Optional[StrictStr] = None
    field19: Optional[StrictStr] = None
    field20: Optional[StrictStr] = None
    __properties = ["formatId", "field1", "field2", "field3", "field4", "field5", "field6", "field7", "field8", "field9", "field10", "field11", "field12", "field13", "field14", "field15", "field16", "field17", "field18", "field19", "field20"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> MerchantDefinedData:
        """Create an instance of MerchantDefinedData from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> MerchantDefinedData:
        """Create an instance of MerchantDefinedData from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return MerchantDefinedData.parse_obj(obj)

        _obj = MerchantDefinedData.parse_obj({
            "format_id": obj.get("formatId"),
            "field1": obj.get("field1"),
            "field2": obj.get("field2"),
            "field3": obj.get("field3"),
            "field4": obj.get("field4"),
            "field5": obj.get("field5"),
            "field6": obj.get("field6"),
            "field7": obj.get("field7"),
            "field8": obj.get("field8"),
            "field9": obj.get("field9"),
            "field10": obj.get("field10"),
            "field11": obj.get("field11"),
            "field12": obj.get("field12"),
            "field13": obj.get("field13"),
            "field14": obj.get("field14"),
            "field15": obj.get("field15"),
            "field16": obj.get("field16"),
            "field17": obj.get("field17"),
            "field18": obj.get("field18"),
            "field19": obj.get("field19"),
            "field20": obj.get("field20")
        })
        return _obj


