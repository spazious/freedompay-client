# coding: utf-8

"""
    Hosted Payment Controls API Documentation v1.5

    The API for Hosted Payment Controls. To access the swagger.json file open the following link: https://hpc.uat.freedompay.com/api/swagger/docs/v1.5  # noqa: E501

    OpenAPI spec version: v1.5
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from freedompay_client.configuration import Configuration


class MerchantDefinedData(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'format_id': 'str',
        'field1': 'str',
        'field2': 'str',
        'field3': 'str',
        'field4': 'str',
        'field5': 'str',
        'field6': 'str',
        'field7': 'str',
        'field8': 'str',
        'field9': 'str',
        'field10': 'str',
        'field11': 'str',
        'field12': 'str',
        'field13': 'str',
        'field14': 'str',
        'field15': 'str',
        'field16': 'str',
        'field17': 'str',
        'field18': 'str',
        'field19': 'str',
        'field20': 'str'
    }

    attribute_map = {
        'format_id': 'formatId',
        'field1': 'field1',
        'field2': 'field2',
        'field3': 'field3',
        'field4': 'field4',
        'field5': 'field5',
        'field6': 'field6',
        'field7': 'field7',
        'field8': 'field8',
        'field9': 'field9',
        'field10': 'field10',
        'field11': 'field11',
        'field12': 'field12',
        'field13': 'field13',
        'field14': 'field14',
        'field15': 'field15',
        'field16': 'field16',
        'field17': 'field17',
        'field18': 'field18',
        'field19': 'field19',
        'field20': 'field20'
    }

    def __init__(self, format_id=None, field1=None, field2=None, field3=None, field4=None, field5=None, field6=None, field7=None, field8=None, field9=None, field10=None, field11=None, field12=None, field13=None, field14=None, field15=None, field16=None, field17=None, field18=None, field19=None, field20=None, _configuration=None):  # noqa: E501
        """MerchantDefinedData - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._format_id = None
        self._field1 = None
        self._field2 = None
        self._field3 = None
        self._field4 = None
        self._field5 = None
        self._field6 = None
        self._field7 = None
        self._field8 = None
        self._field9 = None
        self._field10 = None
        self._field11 = None
        self._field12 = None
        self._field13 = None
        self._field14 = None
        self._field15 = None
        self._field16 = None
        self._field17 = None
        self._field18 = None
        self._field19 = None
        self._field20 = None
        self.discriminator = None

        if format_id is not None:
            self.format_id = format_id
        if field1 is not None:
            self.field1 = field1
        if field2 is not None:
            self.field2 = field2
        if field3 is not None:
            self.field3 = field3
        if field4 is not None:
            self.field4 = field4
        if field5 is not None:
            self.field5 = field5
        if field6 is not None:
            self.field6 = field6
        if field7 is not None:
            self.field7 = field7
        if field8 is not None:
            self.field8 = field8
        if field9 is not None:
            self.field9 = field9
        if field10 is not None:
            self.field10 = field10
        if field11 is not None:
            self.field11 = field11
        if field12 is not None:
            self.field12 = field12
        if field13 is not None:
            self.field13 = field13
        if field14 is not None:
            self.field14 = field14
        if field15 is not None:
            self.field15 = field15
        if field16 is not None:
            self.field16 = field16
        if field17 is not None:
            self.field17 = field17
        if field18 is not None:
            self.field18 = field18
        if field19 is not None:
            self.field19 = field19
        if field20 is not None:
            self.field20 = field20

    @property
    def format_id(self):
        """Gets the format_id of this MerchantDefinedData.  # noqa: E501


        :return: The format_id of this MerchantDefinedData.  # noqa: E501
        :rtype: str
        """
        return self._format_id

    @format_id.setter
    def format_id(self, format_id):
        """Sets the format_id of this MerchantDefinedData.


        :param format_id: The format_id of this MerchantDefinedData.  # noqa: E501
        :type: str
        """

        self._format_id = format_id

    @property
    def field1(self):
        """Gets the field1 of this MerchantDefinedData.  # noqa: E501


        :return: The field1 of this MerchantDefinedData.  # noqa: E501
        :rtype: str
        """
        return self._field1

    @field1.setter
    def field1(self, field1):
        """Sets the field1 of this MerchantDefinedData.


        :param field1: The field1 of this MerchantDefinedData.  # noqa: E501
        :type: str
        """

        self._field1 = field1

    @property
    def field2(self):
        """Gets the field2 of this MerchantDefinedData.  # noqa: E501


        :return: The field2 of this MerchantDefinedData.  # noqa: E501
        :rtype: str
        """
        return self._field2

    @field2.setter
    def field2(self, field2):
        """Sets the field2 of this MerchantDefinedData.


        :param field2: The field2 of this MerchantDefinedData.  # noqa: E501
        :type: str
        """

        self._field2 = field2

    @property
    def field3(self):
        """Gets the field3 of this MerchantDefinedData.  # noqa: E501


        :return: The field3 of this MerchantDefinedData.  # noqa: E501
        :rtype: str
        """
        return self._field3

    @field3.setter
    def field3(self, field3):
        """Sets the field3 of this MerchantDefinedData.


        :param field3: The field3 of this MerchantDefinedData.  # noqa: E501
        :type: str
        """

        self._field3 = field3

    @property
    def field4(self):
        """Gets the field4 of this MerchantDefinedData.  # noqa: E501


        :return: The field4 of this MerchantDefinedData.  # noqa: E501
        :rtype: str
        """
        return self._field4

    @field4.setter
    def field4(self, field4):
        """Sets the field4 of this MerchantDefinedData.


        :param field4: The field4 of this MerchantDefinedData.  # noqa: E501
        :type: str
        """

        self._field4 = field4

    @property
    def field5(self):
        """Gets the field5 of this MerchantDefinedData.  # noqa: E501


        :return: The field5 of this MerchantDefinedData.  # noqa: E501
        :rtype: str
        """
        return self._field5

    @field5.setter
    def field5(self, field5):
        """Sets the field5 of this MerchantDefinedData.


        :param field5: The field5 of this MerchantDefinedData.  # noqa: E501
        :type: str
        """

        self._field5 = field5

    @property
    def field6(self):
        """Gets the field6 of this MerchantDefinedData.  # noqa: E501


        :return: The field6 of this MerchantDefinedData.  # noqa: E501
        :rtype: str
        """
        return self._field6

    @field6.setter
    def field6(self, field6):
        """Sets the field6 of this MerchantDefinedData.


        :param field6: The field6 of this MerchantDefinedData.  # noqa: E501
        :type: str
        """

        self._field6 = field6

    @property
    def field7(self):
        """Gets the field7 of this MerchantDefinedData.  # noqa: E501


        :return: The field7 of this MerchantDefinedData.  # noqa: E501
        :rtype: str
        """
        return self._field7

    @field7.setter
    def field7(self, field7):
        """Sets the field7 of this MerchantDefinedData.


        :param field7: The field7 of this MerchantDefinedData.  # noqa: E501
        :type: str
        """

        self._field7 = field7

    @property
    def field8(self):
        """Gets the field8 of this MerchantDefinedData.  # noqa: E501


        :return: The field8 of this MerchantDefinedData.  # noqa: E501
        :rtype: str
        """
        return self._field8

    @field8.setter
    def field8(self, field8):
        """Sets the field8 of this MerchantDefinedData.


        :param field8: The field8 of this MerchantDefinedData.  # noqa: E501
        :type: str
        """

        self._field8 = field8

    @property
    def field9(self):
        """Gets the field9 of this MerchantDefinedData.  # noqa: E501


        :return: The field9 of this MerchantDefinedData.  # noqa: E501
        :rtype: str
        """
        return self._field9

    @field9.setter
    def field9(self, field9):
        """Sets the field9 of this MerchantDefinedData.


        :param field9: The field9 of this MerchantDefinedData.  # noqa: E501
        :type: str
        """

        self._field9 = field9

    @property
    def field10(self):
        """Gets the field10 of this MerchantDefinedData.  # noqa: E501


        :return: The field10 of this MerchantDefinedData.  # noqa: E501
        :rtype: str
        """
        return self._field10

    @field10.setter
    def field10(self, field10):
        """Sets the field10 of this MerchantDefinedData.


        :param field10: The field10 of this MerchantDefinedData.  # noqa: E501
        :type: str
        """

        self._field10 = field10

    @property
    def field11(self):
        """Gets the field11 of this MerchantDefinedData.  # noqa: E501


        :return: The field11 of this MerchantDefinedData.  # noqa: E501
        :rtype: str
        """
        return self._field11

    @field11.setter
    def field11(self, field11):
        """Sets the field11 of this MerchantDefinedData.


        :param field11: The field11 of this MerchantDefinedData.  # noqa: E501
        :type: str
        """

        self._field11 = field11

    @property
    def field12(self):
        """Gets the field12 of this MerchantDefinedData.  # noqa: E501


        :return: The field12 of this MerchantDefinedData.  # noqa: E501
        :rtype: str
        """
        return self._field12

    @field12.setter
    def field12(self, field12):
        """Sets the field12 of this MerchantDefinedData.


        :param field12: The field12 of this MerchantDefinedData.  # noqa: E501
        :type: str
        """

        self._field12 = field12

    @property
    def field13(self):
        """Gets the field13 of this MerchantDefinedData.  # noqa: E501


        :return: The field13 of this MerchantDefinedData.  # noqa: E501
        :rtype: str
        """
        return self._field13

    @field13.setter
    def field13(self, field13):
        """Sets the field13 of this MerchantDefinedData.


        :param field13: The field13 of this MerchantDefinedData.  # noqa: E501
        :type: str
        """

        self._field13 = field13

    @property
    def field14(self):
        """Gets the field14 of this MerchantDefinedData.  # noqa: E501


        :return: The field14 of this MerchantDefinedData.  # noqa: E501
        :rtype: str
        """
        return self._field14

    @field14.setter
    def field14(self, field14):
        """Sets the field14 of this MerchantDefinedData.


        :param field14: The field14 of this MerchantDefinedData.  # noqa: E501
        :type: str
        """

        self._field14 = field14

    @property
    def field15(self):
        """Gets the field15 of this MerchantDefinedData.  # noqa: E501


        :return: The field15 of this MerchantDefinedData.  # noqa: E501
        :rtype: str
        """
        return self._field15

    @field15.setter
    def field15(self, field15):
        """Sets the field15 of this MerchantDefinedData.


        :param field15: The field15 of this MerchantDefinedData.  # noqa: E501
        :type: str
        """

        self._field15 = field15

    @property
    def field16(self):
        """Gets the field16 of this MerchantDefinedData.  # noqa: E501


        :return: The field16 of this MerchantDefinedData.  # noqa: E501
        :rtype: str
        """
        return self._field16

    @field16.setter
    def field16(self, field16):
        """Sets the field16 of this MerchantDefinedData.


        :param field16: The field16 of this MerchantDefinedData.  # noqa: E501
        :type: str
        """

        self._field16 = field16

    @property
    def field17(self):
        """Gets the field17 of this MerchantDefinedData.  # noqa: E501


        :return: The field17 of this MerchantDefinedData.  # noqa: E501
        :rtype: str
        """
        return self._field17

    @field17.setter
    def field17(self, field17):
        """Sets the field17 of this MerchantDefinedData.


        :param field17: The field17 of this MerchantDefinedData.  # noqa: E501
        :type: str
        """

        self._field17 = field17

    @property
    def field18(self):
        """Gets the field18 of this MerchantDefinedData.  # noqa: E501


        :return: The field18 of this MerchantDefinedData.  # noqa: E501
        :rtype: str
        """
        return self._field18

    @field18.setter
    def field18(self, field18):
        """Sets the field18 of this MerchantDefinedData.


        :param field18: The field18 of this MerchantDefinedData.  # noqa: E501
        :type: str
        """

        self._field18 = field18

    @property
    def field19(self):
        """Gets the field19 of this MerchantDefinedData.  # noqa: E501


        :return: The field19 of this MerchantDefinedData.  # noqa: E501
        :rtype: str
        """
        return self._field19

    @field19.setter
    def field19(self, field19):
        """Sets the field19 of this MerchantDefinedData.


        :param field19: The field19 of this MerchantDefinedData.  # noqa: E501
        :type: str
        """

        self._field19 = field19

    @property
    def field20(self):
        """Gets the field20 of this MerchantDefinedData.  # noqa: E501


        :return: The field20 of this MerchantDefinedData.  # noqa: E501
        :rtype: str
        """
        return self._field20

    @field20.setter
    def field20(self, field20):
        """Sets the field20 of this MerchantDefinedData.


        :param field20: The field20 of this MerchantDefinedData.  # noqa: E501
        :type: str
        """

        self._field20 = field20

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(MerchantDefinedData, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, MerchantDefinedData):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, MerchantDefinedData):
            return True

        return self.to_dict() != other.to_dict()
