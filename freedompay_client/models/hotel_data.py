# coding: utf-8

"""
    Hosted Payment Controls API Documentation v1.5

    The API for Hosted Payment Controls. To access the swagger.json file open the following link: https://hpc.uat.freedompay.com/api/swagger/docs/v1.5  # noqa: E501

    OpenAPI spec version: v1.5
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from freedompay_client.configuration import Configuration


class HotelData(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'room_occupant_count': 'str',
        'room_type': 'str',
        'notes': 'str',
        'properties': 'list[UserDefinedField]',
        'expected_duration': 'str',
        'folio_number': 'str',
        'no_show': 'str',
        'program_code': 'str',
        'checkin_date': 'str',
        'checkout_date': 'str',
        'extra_charge_types': 'str',
        'room_rate': 'str',
        'room_rate_unit': 'str',
        'room_tax': 'str',
        'extra_charge_total': 'str',
        'renter_name': 'str'
    }

    attribute_map = {
        'room_occupant_count': 'roomOccupantCount',
        'room_type': 'roomType',
        'notes': 'notes',
        'properties': 'properties',
        'expected_duration': 'expectedDuration',
        'folio_number': 'folioNumber',
        'no_show': 'noShow',
        'program_code': 'programCode',
        'checkin_date': 'checkinDate',
        'checkout_date': 'checkoutDate',
        'extra_charge_types': 'extraChargeTypes',
        'room_rate': 'roomRate',
        'room_rate_unit': 'roomRateUnit',
        'room_tax': 'roomTax',
        'extra_charge_total': 'extraChargeTotal',
        'renter_name': 'renterName'
    }

    def __init__(self, room_occupant_count=None, room_type=None, notes=None, properties=None, expected_duration=None, folio_number=None, no_show=None, program_code=None, checkin_date=None, checkout_date=None, extra_charge_types=None, room_rate=None, room_rate_unit=None, room_tax=None, extra_charge_total=None, renter_name=None, _configuration=None):  # noqa: E501
        """HotelData - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._room_occupant_count = None
        self._room_type = None
        self._notes = None
        self._properties = None
        self._expected_duration = None
        self._folio_number = None
        self._no_show = None
        self._program_code = None
        self._checkin_date = None
        self._checkout_date = None
        self._extra_charge_types = None
        self._room_rate = None
        self._room_rate_unit = None
        self._room_tax = None
        self._extra_charge_total = None
        self._renter_name = None
        self.discriminator = None

        if room_occupant_count is not None:
            self.room_occupant_count = room_occupant_count
        if room_type is not None:
            self.room_type = room_type
        if notes is not None:
            self.notes = notes
        if properties is not None:
            self.properties = properties
        if expected_duration is not None:
            self.expected_duration = expected_duration
        if folio_number is not None:
            self.folio_number = folio_number
        if no_show is not None:
            self.no_show = no_show
        if program_code is not None:
            self.program_code = program_code
        if checkin_date is not None:
            self.checkin_date = checkin_date
        if checkout_date is not None:
            self.checkout_date = checkout_date
        if extra_charge_types is not None:
            self.extra_charge_types = extra_charge_types
        if room_rate is not None:
            self.room_rate = room_rate
        if room_rate_unit is not None:
            self.room_rate_unit = room_rate_unit
        if room_tax is not None:
            self.room_tax = room_tax
        if extra_charge_total is not None:
            self.extra_charge_total = extra_charge_total
        if renter_name is not None:
            self.renter_name = renter_name

    @property
    def room_occupant_count(self):
        """Gets the room_occupant_count of this HotelData.  # noqa: E501


        :return: The room_occupant_count of this HotelData.  # noqa: E501
        :rtype: str
        """
        return self._room_occupant_count

    @room_occupant_count.setter
    def room_occupant_count(self, room_occupant_count):
        """Sets the room_occupant_count of this HotelData.


        :param room_occupant_count: The room_occupant_count of this HotelData.  # noqa: E501
        :type: str
        """

        self._room_occupant_count = room_occupant_count

    @property
    def room_type(self):
        """Gets the room_type of this HotelData.  # noqa: E501


        :return: The room_type of this HotelData.  # noqa: E501
        :rtype: str
        """
        return self._room_type

    @room_type.setter
    def room_type(self, room_type):
        """Sets the room_type of this HotelData.


        :param room_type: The room_type of this HotelData.  # noqa: E501
        :type: str
        """

        self._room_type = room_type

    @property
    def notes(self):
        """Gets the notes of this HotelData.  # noqa: E501


        :return: The notes of this HotelData.  # noqa: E501
        :rtype: str
        """
        return self._notes

    @notes.setter
    def notes(self, notes):
        """Sets the notes of this HotelData.


        :param notes: The notes of this HotelData.  # noqa: E501
        :type: str
        """

        self._notes = notes

    @property
    def properties(self):
        """Gets the properties of this HotelData.  # noqa: E501


        :return: The properties of this HotelData.  # noqa: E501
        :rtype: list[UserDefinedField]
        """
        return self._properties

    @properties.setter
    def properties(self, properties):
        """Sets the properties of this HotelData.


        :param properties: The properties of this HotelData.  # noqa: E501
        :type: list[UserDefinedField]
        """

        self._properties = properties

    @property
    def expected_duration(self):
        """Gets the expected_duration of this HotelData.  # noqa: E501


        :return: The expected_duration of this HotelData.  # noqa: E501
        :rtype: str
        """
        return self._expected_duration

    @expected_duration.setter
    def expected_duration(self, expected_duration):
        """Sets the expected_duration of this HotelData.


        :param expected_duration: The expected_duration of this HotelData.  # noqa: E501
        :type: str
        """

        self._expected_duration = expected_duration

    @property
    def folio_number(self):
        """Gets the folio_number of this HotelData.  # noqa: E501


        :return: The folio_number of this HotelData.  # noqa: E501
        :rtype: str
        """
        return self._folio_number

    @folio_number.setter
    def folio_number(self, folio_number):
        """Sets the folio_number of this HotelData.


        :param folio_number: The folio_number of this HotelData.  # noqa: E501
        :type: str
        """

        self._folio_number = folio_number

    @property
    def no_show(self):
        """Gets the no_show of this HotelData.  # noqa: E501


        :return: The no_show of this HotelData.  # noqa: E501
        :rtype: str
        """
        return self._no_show

    @no_show.setter
    def no_show(self, no_show):
        """Sets the no_show of this HotelData.


        :param no_show: The no_show of this HotelData.  # noqa: E501
        :type: str
        """

        self._no_show = no_show

    @property
    def program_code(self):
        """Gets the program_code of this HotelData.  # noqa: E501


        :return: The program_code of this HotelData.  # noqa: E501
        :rtype: str
        """
        return self._program_code

    @program_code.setter
    def program_code(self, program_code):
        """Sets the program_code of this HotelData.


        :param program_code: The program_code of this HotelData.  # noqa: E501
        :type: str
        """

        self._program_code = program_code

    @property
    def checkin_date(self):
        """Gets the checkin_date of this HotelData.  # noqa: E501


        :return: The checkin_date of this HotelData.  # noqa: E501
        :rtype: str
        """
        return self._checkin_date

    @checkin_date.setter
    def checkin_date(self, checkin_date):
        """Sets the checkin_date of this HotelData.


        :param checkin_date: The checkin_date of this HotelData.  # noqa: E501
        :type: str
        """

        self._checkin_date = checkin_date

    @property
    def checkout_date(self):
        """Gets the checkout_date of this HotelData.  # noqa: E501


        :return: The checkout_date of this HotelData.  # noqa: E501
        :rtype: str
        """
        return self._checkout_date

    @checkout_date.setter
    def checkout_date(self, checkout_date):
        """Sets the checkout_date of this HotelData.


        :param checkout_date: The checkout_date of this HotelData.  # noqa: E501
        :type: str
        """

        self._checkout_date = checkout_date

    @property
    def extra_charge_types(self):
        """Gets the extra_charge_types of this HotelData.  # noqa: E501


        :return: The extra_charge_types of this HotelData.  # noqa: E501
        :rtype: str
        """
        return self._extra_charge_types

    @extra_charge_types.setter
    def extra_charge_types(self, extra_charge_types):
        """Sets the extra_charge_types of this HotelData.


        :param extra_charge_types: The extra_charge_types of this HotelData.  # noqa: E501
        :type: str
        """

        self._extra_charge_types = extra_charge_types

    @property
    def room_rate(self):
        """Gets the room_rate of this HotelData.  # noqa: E501


        :return: The room_rate of this HotelData.  # noqa: E501
        :rtype: str
        """
        return self._room_rate

    @room_rate.setter
    def room_rate(self, room_rate):
        """Sets the room_rate of this HotelData.


        :param room_rate: The room_rate of this HotelData.  # noqa: E501
        :type: str
        """

        self._room_rate = room_rate

    @property
    def room_rate_unit(self):
        """Gets the room_rate_unit of this HotelData.  # noqa: E501


        :return: The room_rate_unit of this HotelData.  # noqa: E501
        :rtype: str
        """
        return self._room_rate_unit

    @room_rate_unit.setter
    def room_rate_unit(self, room_rate_unit):
        """Sets the room_rate_unit of this HotelData.


        :param room_rate_unit: The room_rate_unit of this HotelData.  # noqa: E501
        :type: str
        """

        self._room_rate_unit = room_rate_unit

    @property
    def room_tax(self):
        """Gets the room_tax of this HotelData.  # noqa: E501


        :return: The room_tax of this HotelData.  # noqa: E501
        :rtype: str
        """
        return self._room_tax

    @room_tax.setter
    def room_tax(self, room_tax):
        """Sets the room_tax of this HotelData.


        :param room_tax: The room_tax of this HotelData.  # noqa: E501
        :type: str
        """

        self._room_tax = room_tax

    @property
    def extra_charge_total(self):
        """Gets the extra_charge_total of this HotelData.  # noqa: E501


        :return: The extra_charge_total of this HotelData.  # noqa: E501
        :rtype: str
        """
        return self._extra_charge_total

    @extra_charge_total.setter
    def extra_charge_total(self, extra_charge_total):
        """Sets the extra_charge_total of this HotelData.


        :param extra_charge_total: The extra_charge_total of this HotelData.  # noqa: E501
        :type: str
        """

        self._extra_charge_total = extra_charge_total

    @property
    def renter_name(self):
        """Gets the renter_name of this HotelData.  # noqa: E501


        :return: The renter_name of this HotelData.  # noqa: E501
        :rtype: str
        """
        return self._renter_name

    @renter_name.setter
    def renter_name(self, renter_name):
        """Sets the renter_name of this HotelData.


        :param renter_name: The renter_name of this HotelData.  # noqa: E501
        :type: str
        """

        self._renter_name = renter_name

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(HotelData, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, HotelData):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, HotelData):
            return True

        return self.to_dict() != other.to_dict()
