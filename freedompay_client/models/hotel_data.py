# coding: utf-8

"""
    Hosted Payment Controls API Documentation v1.5

    The API for Hosted Payment Controls. To access the swagger.json file open the following link: https://hpc.uat.freedompay.com/api/swagger/docs/v1.5

    The version of the OpenAPI document: v1.5
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import List, Optional
from pydantic import BaseModel, Field, StrictStr, conlist
from freedompay_client.models.user_defined_field import UserDefinedField

class HotelData(BaseModel):
    """
    HotelData
    """
    room_occupant_count: Optional[StrictStr] = Field(None, alias="roomOccupantCount")
    room_type: Optional[StrictStr] = Field(None, alias="roomType")
    notes: Optional[StrictStr] = None
    properties: Optional[conlist(UserDefinedField)] = None
    expected_duration: Optional[StrictStr] = Field(None, alias="expectedDuration")
    folio_number: Optional[StrictStr] = Field(None, alias="folioNumber")
    no_show: Optional[StrictStr] = Field(None, alias="noShow")
    program_code: Optional[StrictStr] = Field(None, alias="programCode")
    checkin_date: Optional[StrictStr] = Field(None, alias="checkinDate")
    checkout_date: Optional[StrictStr] = Field(None, alias="checkoutDate")
    extra_charge_types: Optional[StrictStr] = Field(None, alias="extraChargeTypes")
    room_rate: Optional[StrictStr] = Field(None, alias="roomRate")
    room_rate_unit: Optional[StrictStr] = Field(None, alias="roomRateUnit")
    room_tax: Optional[StrictStr] = Field(None, alias="roomTax")
    extra_charge_total: Optional[StrictStr] = Field(None, alias="extraChargeTotal")
    renter_name: Optional[StrictStr] = Field(None, alias="renterName")
    __properties = ["roomOccupantCount", "roomType", "notes", "properties", "expectedDuration", "folioNumber", "noShow", "programCode", "checkinDate", "checkoutDate", "extraChargeTypes", "roomRate", "roomRateUnit", "roomTax", "extraChargeTotal", "renterName"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> HotelData:
        """Create an instance of HotelData from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of each item in properties (list)
        _items = []
        if self.properties:
            for _item in self.properties:
                if _item:
                    _items.append(_item.to_dict())
            _dict['properties'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> HotelData:
        """Create an instance of HotelData from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return HotelData.parse_obj(obj)

        _obj = HotelData.parse_obj({
            "room_occupant_count": obj.get("roomOccupantCount"),
            "room_type": obj.get("roomType"),
            "notes": obj.get("notes"),
            "properties": [UserDefinedField.from_dict(_item) for _item in obj.get("properties")] if obj.get("properties") is not None else None,
            "expected_duration": obj.get("expectedDuration"),
            "folio_number": obj.get("folioNumber"),
            "no_show": obj.get("noShow"),
            "program_code": obj.get("programCode"),
            "checkin_date": obj.get("checkinDate"),
            "checkout_date": obj.get("checkoutDate"),
            "extra_charge_types": obj.get("extraChargeTypes"),
            "room_rate": obj.get("roomRate"),
            "room_rate_unit": obj.get("roomRateUnit"),
            "room_tax": obj.get("roomTax"),
            "extra_charge_total": obj.get("extraChargeTotal"),
            "renter_name": obj.get("renterName")
        })
        return _obj


