# coding: utf-8

"""
    Hosted Payment Controls API Documentation v1.5

    The API for Hosted Payment Controls. To access the swagger.json file open the following link: https://hpc.uat.freedompay.com/api/swagger/docs/v1.5  # noqa: E501

    OpenAPI spec version: v1.5
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from freedompay_client.configuration import Configuration


class SecurityCodeControl(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'label_type': 'str',
        'mask_type': 'str',
        'placeholder_type': 'str',
        'validation_type': 'str'
    }

    attribute_map = {
        'label_type': 'LabelType',
        'mask_type': 'MaskType',
        'placeholder_type': 'PlaceholderType',
        'validation_type': 'ValidationType'
    }

    def __init__(self, label_type=None, mask_type=None, placeholder_type=None, validation_type=None, _configuration=None):  # noqa: E501
        """SecurityCodeControl - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._label_type = None
        self._mask_type = None
        self._placeholder_type = None
        self._validation_type = None
        self.discriminator = None

        if label_type is not None:
            self.label_type = label_type
        if mask_type is not None:
            self.mask_type = mask_type
        if placeholder_type is not None:
            self.placeholder_type = placeholder_type
        if validation_type is not None:
            self.validation_type = validation_type

    @property
    def label_type(self):
        """Gets the label_type of this SecurityCodeControl.  # noqa: E501


        :return: The label_type of this SecurityCodeControl.  # noqa: E501
        :rtype: str
        """
        return self._label_type

    @label_type.setter
    def label_type(self, label_type):
        """Sets the label_type of this SecurityCodeControl.


        :param label_type: The label_type of this SecurityCodeControl.  # noqa: E501
        :type: str
        """
        allowed_values = ["Unknown", "Default", "Required", "IfPresent", "Optional", "NotAvailable", "PinDefault"]  # noqa: E501
        if (self._configuration.client_side_validation and
                label_type not in allowed_values):
            raise ValueError(
                "Invalid value for `label_type` ({0}), must be one of {1}"  # noqa: E501
                .format(label_type, allowed_values)
            )

        self._label_type = label_type

    @property
    def mask_type(self):
        """Gets the mask_type of this SecurityCodeControl.  # noqa: E501


        :return: The mask_type of this SecurityCodeControl.  # noqa: E501
        :rtype: str
        """
        return self._mask_type

    @mask_type.setter
    def mask_type(self, mask_type):
        """Sets the mask_type of this SecurityCodeControl.


        :param mask_type: The mask_type of this SecurityCodeControl.  # noqa: E501
        :type: str
        """
        allowed_values = ["Default", "None", "Blur", "Keypress"]  # noqa: E501
        if (self._configuration.client_side_validation and
                mask_type not in allowed_values):
            raise ValueError(
                "Invalid value for `mask_type` ({0}), must be one of {1}"  # noqa: E501
                .format(mask_type, allowed_values)
            )

        self._mask_type = mask_type

    @property
    def placeholder_type(self):
        """Gets the placeholder_type of this SecurityCodeControl.  # noqa: E501


        :return: The placeholder_type of this SecurityCodeControl.  # noqa: E501
        :rtype: str
        """
        return self._placeholder_type

    @placeholder_type.setter
    def placeholder_type(self, placeholder_type):
        """Sets the placeholder_type of this SecurityCodeControl.


        :param placeholder_type: The placeholder_type of this SecurityCodeControl.  # noqa: E501
        :type: str
        """
        allowed_values = ["Unknown", "Blank", "Default", "Cvc", "Cvv", "CvcNumber", "CvvNumber", "Pin"]  # noqa: E501
        if (self._configuration.client_side_validation and
                placeholder_type not in allowed_values):
            raise ValueError(
                "Invalid value for `placeholder_type` ({0}), must be one of {1}"  # noqa: E501
                .format(placeholder_type, allowed_values)
            )

        self._placeholder_type = placeholder_type

    @property
    def validation_type(self):
        """Gets the validation_type of this SecurityCodeControl.  # noqa: E501


        :return: The validation_type of this SecurityCodeControl.  # noqa: E501
        :rtype: str
        """
        return self._validation_type

    @validation_type.setter
    def validation_type(self, validation_type):
        """Sets the validation_type of this SecurityCodeControl.


        :param validation_type: The validation_type of this SecurityCodeControl.  # noqa: E501
        :type: str
        """
        allowed_values = ["Unknown", "NotApplicable", "Optional", "Required", "OptionalExplicit"]  # noqa: E501
        if (self._configuration.client_side_validation and
                validation_type not in allowed_values):
            raise ValueError(
                "Invalid value for `validation_type` ({0}), must be one of {1}"  # noqa: E501
                .format(validation_type, allowed_values)
            )

        self._validation_type = validation_type

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(SecurityCodeControl, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SecurityCodeControl):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, SecurityCodeControl):
            return True

        return self.to_dict() != other.to_dict()
