# coding: utf-8

"""
    Hosted Payment Controls API Documentation v1.5

    The API for Hosted Payment Controls. To access the swagger.json file open the following link: https://hpc.uat.freedompay.com/api/swagger/docs/v1.5

    The version of the OpenAPI document: v1.5
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel, Field, StrictStr

class InvoiceHeader(BaseModel):
    """
    InvoiceHeader
    """
    invoice_number: Optional[StrictStr] = Field(None, alias="invoiceNumber")
    invoice_date: Optional[StrictStr] = Field(None, alias="invoiceDate")
    merchant_descriptor: Optional[StrictStr] = Field(None, alias="merchantDescriptor")
    merchant_descriptor_contact: Optional[StrictStr] = Field(None, alias="merchantDescriptorContact")
    merchant_descriptor_url: Optional[StrictStr] = Field(None, alias="merchantDescriptorUrl")
    purchaser_code: Optional[StrictStr] = Field(None, alias="purchaserCode")
    purchaser_order_date: Optional[StrictStr] = Field(None, alias="purchaserOrderDate")
    goods_indicator: Optional[StrictStr] = Field(None, alias="goodsIndicator")
    customer_po: Optional[StrictStr] = Field(None, alias="customerPO")
    product_code_standard: Optional[StrictStr] = Field(None, alias="productCodeStandard")
    eid_indicator: Optional[StrictStr] = Field(None, alias="eidIndicator")
    __properties = ["invoiceNumber", "invoiceDate", "merchantDescriptor", "merchantDescriptorContact", "merchantDescriptorUrl", "purchaserCode", "purchaserOrderDate", "goodsIndicator", "customerPO", "productCodeStandard", "eidIndicator"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> InvoiceHeader:
        """Create an instance of InvoiceHeader from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> InvoiceHeader:
        """Create an instance of InvoiceHeader from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return InvoiceHeader.parse_obj(obj)

        _obj = InvoiceHeader.parse_obj({
            "invoice_number": obj.get("invoiceNumber"),
            "invoice_date": obj.get("invoiceDate"),
            "merchant_descriptor": obj.get("merchantDescriptor"),
            "merchant_descriptor_contact": obj.get("merchantDescriptorContact"),
            "merchant_descriptor_url": obj.get("merchantDescriptorUrl"),
            "purchaser_code": obj.get("purchaserCode"),
            "purchaser_order_date": obj.get("purchaserOrderDate"),
            "goods_indicator": obj.get("goodsIndicator"),
            "customer_po": obj.get("customerPO"),
            "product_code_standard": obj.get("productCodeStandard"),
            "eid_indicator": obj.get("eidIndicator")
        })
        return _obj


