# coding: utf-8

"""
    Hosted Payment Controls API Documentation v1.5

    The API for Hosted Payment Controls. To access the swagger.json file open the following link: https://hpc.uat.freedompay.com/api/swagger/docs/v1.5  # noqa: E501

    OpenAPI spec version: v1.5
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from freedompay_client.configuration import Configuration


class CCCreditService(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'trans_type': 'str',
        'offline': 'str',
        'offline_code': 'str',
        'return_balance': 'str',
        'business_date': 'str',
        'bill_payment': 'str',
        'recurring': 'str',
        'commerce_indicator': 'str',
        'partial_payment_id': 'str',
        'last_payment_flag': 'str',
        'industry_datatype': 'str',
        'run': 'str'
    }

    attribute_map = {
        'trans_type': 'transType',
        'offline': 'offline',
        'offline_code': 'offlineCode',
        'return_balance': 'returnBalance',
        'business_date': 'businessDate',
        'bill_payment': 'billPayment',
        'recurring': 'recurring',
        'commerce_indicator': 'commerceIndicator',
        'partial_payment_id': 'partialPaymentId',
        'last_payment_flag': 'lastPaymentFlag',
        'industry_datatype': 'industryDatatype',
        'run': 'run'
    }

    def __init__(self, trans_type=None, offline=None, offline_code=None, return_balance=None, business_date=None, bill_payment=None, recurring=None, commerce_indicator=None, partial_payment_id=None, last_payment_flag=None, industry_datatype=None, run=None, _configuration=None):  # noqa: E501
        """CCCreditService - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._trans_type = None
        self._offline = None
        self._offline_code = None
        self._return_balance = None
        self._business_date = None
        self._bill_payment = None
        self._recurring = None
        self._commerce_indicator = None
        self._partial_payment_id = None
        self._last_payment_flag = None
        self._industry_datatype = None
        self._run = None
        self.discriminator = None

        if trans_type is not None:
            self.trans_type = trans_type
        if offline is not None:
            self.offline = offline
        if offline_code is not None:
            self.offline_code = offline_code
        if return_balance is not None:
            self.return_balance = return_balance
        if business_date is not None:
            self.business_date = business_date
        if bill_payment is not None:
            self.bill_payment = bill_payment
        if recurring is not None:
            self.recurring = recurring
        if commerce_indicator is not None:
            self.commerce_indicator = commerce_indicator
        if partial_payment_id is not None:
            self.partial_payment_id = partial_payment_id
        if last_payment_flag is not None:
            self.last_payment_flag = last_payment_flag
        if industry_datatype is not None:
            self.industry_datatype = industry_datatype
        if run is not None:
            self.run = run

    @property
    def trans_type(self):
        """Gets the trans_type of this CCCreditService.  # noqa: E501


        :return: The trans_type of this CCCreditService.  # noqa: E501
        :rtype: str
        """
        return self._trans_type

    @trans_type.setter
    def trans_type(self, trans_type):
        """Sets the trans_type of this CCCreditService.


        :param trans_type: The trans_type of this CCCreditService.  # noqa: E501
        :type: str
        """

        self._trans_type = trans_type

    @property
    def offline(self):
        """Gets the offline of this CCCreditService.  # noqa: E501


        :return: The offline of this CCCreditService.  # noqa: E501
        :rtype: str
        """
        return self._offline

    @offline.setter
    def offline(self, offline):
        """Sets the offline of this CCCreditService.


        :param offline: The offline of this CCCreditService.  # noqa: E501
        :type: str
        """

        self._offline = offline

    @property
    def offline_code(self):
        """Gets the offline_code of this CCCreditService.  # noqa: E501


        :return: The offline_code of this CCCreditService.  # noqa: E501
        :rtype: str
        """
        return self._offline_code

    @offline_code.setter
    def offline_code(self, offline_code):
        """Sets the offline_code of this CCCreditService.


        :param offline_code: The offline_code of this CCCreditService.  # noqa: E501
        :type: str
        """

        self._offline_code = offline_code

    @property
    def return_balance(self):
        """Gets the return_balance of this CCCreditService.  # noqa: E501


        :return: The return_balance of this CCCreditService.  # noqa: E501
        :rtype: str
        """
        return self._return_balance

    @return_balance.setter
    def return_balance(self, return_balance):
        """Sets the return_balance of this CCCreditService.


        :param return_balance: The return_balance of this CCCreditService.  # noqa: E501
        :type: str
        """

        self._return_balance = return_balance

    @property
    def business_date(self):
        """Gets the business_date of this CCCreditService.  # noqa: E501


        :return: The business_date of this CCCreditService.  # noqa: E501
        :rtype: str
        """
        return self._business_date

    @business_date.setter
    def business_date(self, business_date):
        """Sets the business_date of this CCCreditService.


        :param business_date: The business_date of this CCCreditService.  # noqa: E501
        :type: str
        """

        self._business_date = business_date

    @property
    def bill_payment(self):
        """Gets the bill_payment of this CCCreditService.  # noqa: E501


        :return: The bill_payment of this CCCreditService.  # noqa: E501
        :rtype: str
        """
        return self._bill_payment

    @bill_payment.setter
    def bill_payment(self, bill_payment):
        """Sets the bill_payment of this CCCreditService.


        :param bill_payment: The bill_payment of this CCCreditService.  # noqa: E501
        :type: str
        """

        self._bill_payment = bill_payment

    @property
    def recurring(self):
        """Gets the recurring of this CCCreditService.  # noqa: E501


        :return: The recurring of this CCCreditService.  # noqa: E501
        :rtype: str
        """
        return self._recurring

    @recurring.setter
    def recurring(self, recurring):
        """Sets the recurring of this CCCreditService.


        :param recurring: The recurring of this CCCreditService.  # noqa: E501
        :type: str
        """

        self._recurring = recurring

    @property
    def commerce_indicator(self):
        """Gets the commerce_indicator of this CCCreditService.  # noqa: E501


        :return: The commerce_indicator of this CCCreditService.  # noqa: E501
        :rtype: str
        """
        return self._commerce_indicator

    @commerce_indicator.setter
    def commerce_indicator(self, commerce_indicator):
        """Sets the commerce_indicator of this CCCreditService.


        :param commerce_indicator: The commerce_indicator of this CCCreditService.  # noqa: E501
        :type: str
        """

        self._commerce_indicator = commerce_indicator

    @property
    def partial_payment_id(self):
        """Gets the partial_payment_id of this CCCreditService.  # noqa: E501


        :return: The partial_payment_id of this CCCreditService.  # noqa: E501
        :rtype: str
        """
        return self._partial_payment_id

    @partial_payment_id.setter
    def partial_payment_id(self, partial_payment_id):
        """Sets the partial_payment_id of this CCCreditService.


        :param partial_payment_id: The partial_payment_id of this CCCreditService.  # noqa: E501
        :type: str
        """

        self._partial_payment_id = partial_payment_id

    @property
    def last_payment_flag(self):
        """Gets the last_payment_flag of this CCCreditService.  # noqa: E501


        :return: The last_payment_flag of this CCCreditService.  # noqa: E501
        :rtype: str
        """
        return self._last_payment_flag

    @last_payment_flag.setter
    def last_payment_flag(self, last_payment_flag):
        """Sets the last_payment_flag of this CCCreditService.


        :param last_payment_flag: The last_payment_flag of this CCCreditService.  # noqa: E501
        :type: str
        """

        self._last_payment_flag = last_payment_flag

    @property
    def industry_datatype(self):
        """Gets the industry_datatype of this CCCreditService.  # noqa: E501


        :return: The industry_datatype of this CCCreditService.  # noqa: E501
        :rtype: str
        """
        return self._industry_datatype

    @industry_datatype.setter
    def industry_datatype(self, industry_datatype):
        """Sets the industry_datatype of this CCCreditService.


        :param industry_datatype: The industry_datatype of this CCCreditService.  # noqa: E501
        :type: str
        """

        self._industry_datatype = industry_datatype

    @property
    def run(self):
        """Gets the run of this CCCreditService.  # noqa: E501


        :return: The run of this CCCreditService.  # noqa: E501
        :rtype: str
        """
        return self._run

    @run.setter
    def run(self, run):
        """Sets the run of this CCCreditService.


        :param run: The run of this CCCreditService.  # noqa: E501
        :type: str
        """

        self._run = run

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CCCreditService, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CCCreditService):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, CCCreditService):
            return True

        return self.to_dict() != other.to_dict()
