# coding: utf-8

"""
    Hosted Payment Controls API Documentation v1.5

    The API for Hosted Payment Controls. To access the swagger.json file open the following link: https://hpc.uat.freedompay.com/api/swagger/docs/v1.5  # noqa: E501

    OpenAPI spec version: v1.5
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from freedompay_client.configuration import Configuration


class EfvOptions(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'options': 'str',
        'force': 'str',
        'force_code': 'str',
        'force_message': 'str'
    }

    attribute_map = {
        'options': 'options',
        'force': 'force',
        'force_code': 'forceCode',
        'force_message': 'forceMessage'
    }

    def __init__(self, options=None, force=None, force_code=None, force_message=None, _configuration=None):  # noqa: E501
        """EfvOptions - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._options = None
        self._force = None
        self._force_code = None
        self._force_message = None
        self.discriminator = None

        if options is not None:
            self.options = options
        if force is not None:
            self.force = force
        if force_code is not None:
            self.force_code = force_code
        if force_message is not None:
            self.force_message = force_message

    @property
    def options(self):
        """Gets the options of this EfvOptions.  # noqa: E501


        :return: The options of this EfvOptions.  # noqa: E501
        :rtype: str
        """
        return self._options

    @options.setter
    def options(self, options):
        """Sets the options of this EfvOptions.


        :param options: The options of this EfvOptions.  # noqa: E501
        :type: str
        """

        self._options = options

    @property
    def force(self):
        """Gets the force of this EfvOptions.  # noqa: E501


        :return: The force of this EfvOptions.  # noqa: E501
        :rtype: str
        """
        return self._force

    @force.setter
    def force(self, force):
        """Sets the force of this EfvOptions.


        :param force: The force of this EfvOptions.  # noqa: E501
        :type: str
        """

        self._force = force

    @property
    def force_code(self):
        """Gets the force_code of this EfvOptions.  # noqa: E501


        :return: The force_code of this EfvOptions.  # noqa: E501
        :rtype: str
        """
        return self._force_code

    @force_code.setter
    def force_code(self, force_code):
        """Sets the force_code of this EfvOptions.


        :param force_code: The force_code of this EfvOptions.  # noqa: E501
        :type: str
        """

        self._force_code = force_code

    @property
    def force_message(self):
        """Gets the force_message of this EfvOptions.  # noqa: E501


        :return: The force_message of this EfvOptions.  # noqa: E501
        :rtype: str
        """
        return self._force_message

    @force_message.setter
    def force_message(self, force_message):
        """Sets the force_message of this EfvOptions.


        :param force_message: The force_message of this EfvOptions.  # noqa: E501
        :type: str
        """

        self._force_message = force_message

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(EfvOptions, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, EfvOptions):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, EfvOptions):
            return True

        return self.to_dict() != other.to_dict()
