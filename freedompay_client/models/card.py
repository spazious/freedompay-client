# coding: utf-8

"""
    Hosted Payment Controls API Documentation v1.5

    The API for Hosted Payment Controls. To access the swagger.json file open the following link: https://hpc.uat.freedompay.com/api/swagger/docs/v1.5  # noqa: E501

    OpenAPI spec version: v1.5
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from freedompay_client.configuration import Configuration


class Card(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'account_number': 'str',
        'account_type': 'str',
        'card_type': 'str',
        'token_subtype': 'str',
        'subtype': 'str',
        'issuer': 'str',
        'cv_indicator': 'str',
        'cv_number': 'str',
        'expiration_month': 'str',
        'expiration_year': 'str',
        'issue_number': 'str',
        'name_on_card': 'str',
        'start_month': 'str',
        'start_year': 'str',
        'service_restriction_code': 'str',
        'pin_ksn': 'str',
        'pin_block': 'str',
        'voucher_number': 'str',
        'expected_brand': 'str',
        'pl_data1': 'str',
        'pl_data2': 'str',
        '_pass': 'str'
    }

    attribute_map = {
        'account_number': 'accountNumber',
        'account_type': 'accountType',
        'card_type': 'cardType',
        'token_subtype': 'tokenSubtype',
        'subtype': 'subtype',
        'issuer': 'issuer',
        'cv_indicator': 'cvIndicator',
        'cv_number': 'cvNumber',
        'expiration_month': 'expirationMonth',
        'expiration_year': 'expirationYear',
        'issue_number': 'issueNumber',
        'name_on_card': 'nameOnCard',
        'start_month': 'startMonth',
        'start_year': 'startYear',
        'service_restriction_code': 'serviceRestrictionCode',
        'pin_ksn': 'pinKsn',
        'pin_block': 'pinBlock',
        'voucher_number': 'voucherNumber',
        'expected_brand': 'expectedBrand',
        'pl_data1': 'plData1',
        'pl_data2': 'plData2',
        '_pass': 'pass'
    }

    def __init__(self, account_number=None, account_type=None, card_type=None, token_subtype=None, subtype=None, issuer=None, cv_indicator=None, cv_number=None, expiration_month=None, expiration_year=None, issue_number=None, name_on_card=None, start_month=None, start_year=None, service_restriction_code=None, pin_ksn=None, pin_block=None, voucher_number=None, expected_brand=None, pl_data1=None, pl_data2=None, _pass=None, _configuration=None):  # noqa: E501
        """Card - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._account_number = None
        self._account_type = None
        self._card_type = None
        self._token_subtype = None
        self._subtype = None
        self._issuer = None
        self._cv_indicator = None
        self._cv_number = None
        self._expiration_month = None
        self._expiration_year = None
        self._issue_number = None
        self._name_on_card = None
        self._start_month = None
        self._start_year = None
        self._service_restriction_code = None
        self._pin_ksn = None
        self._pin_block = None
        self._voucher_number = None
        self._expected_brand = None
        self._pl_data1 = None
        self._pl_data2 = None
        self.__pass = None
        self.discriminator = None

        if account_number is not None:
            self.account_number = account_number
        if account_type is not None:
            self.account_type = account_type
        if card_type is not None:
            self.card_type = card_type
        if token_subtype is not None:
            self.token_subtype = token_subtype
        if subtype is not None:
            self.subtype = subtype
        if issuer is not None:
            self.issuer = issuer
        if cv_indicator is not None:
            self.cv_indicator = cv_indicator
        if cv_number is not None:
            self.cv_number = cv_number
        if expiration_month is not None:
            self.expiration_month = expiration_month
        if expiration_year is not None:
            self.expiration_year = expiration_year
        if issue_number is not None:
            self.issue_number = issue_number
        if name_on_card is not None:
            self.name_on_card = name_on_card
        if start_month is not None:
            self.start_month = start_month
        if start_year is not None:
            self.start_year = start_year
        if service_restriction_code is not None:
            self.service_restriction_code = service_restriction_code
        if pin_ksn is not None:
            self.pin_ksn = pin_ksn
        if pin_block is not None:
            self.pin_block = pin_block
        if voucher_number is not None:
            self.voucher_number = voucher_number
        if expected_brand is not None:
            self.expected_brand = expected_brand
        if pl_data1 is not None:
            self.pl_data1 = pl_data1
        if pl_data2 is not None:
            self.pl_data2 = pl_data2
        if _pass is not None:
            self._pass = _pass

    @property
    def account_number(self):
        """Gets the account_number of this Card.  # noqa: E501


        :return: The account_number of this Card.  # noqa: E501
        :rtype: str
        """
        return self._account_number

    @account_number.setter
    def account_number(self, account_number):
        """Sets the account_number of this Card.


        :param account_number: The account_number of this Card.  # noqa: E501
        :type: str
        """

        self._account_number = account_number

    @property
    def account_type(self):
        """Gets the account_type of this Card.  # noqa: E501


        :return: The account_type of this Card.  # noqa: E501
        :rtype: str
        """
        return self._account_type

    @account_type.setter
    def account_type(self, account_type):
        """Sets the account_type of this Card.


        :param account_type: The account_type of this Card.  # noqa: E501
        :type: str
        """

        self._account_type = account_type

    @property
    def card_type(self):
        """Gets the card_type of this Card.  # noqa: E501


        :return: The card_type of this Card.  # noqa: E501
        :rtype: str
        """
        return self._card_type

    @card_type.setter
    def card_type(self, card_type):
        """Sets the card_type of this Card.


        :param card_type: The card_type of this Card.  # noqa: E501
        :type: str
        """

        self._card_type = card_type

    @property
    def token_subtype(self):
        """Gets the token_subtype of this Card.  # noqa: E501


        :return: The token_subtype of this Card.  # noqa: E501
        :rtype: str
        """
        return self._token_subtype

    @token_subtype.setter
    def token_subtype(self, token_subtype):
        """Sets the token_subtype of this Card.


        :param token_subtype: The token_subtype of this Card.  # noqa: E501
        :type: str
        """

        self._token_subtype = token_subtype

    @property
    def subtype(self):
        """Gets the subtype of this Card.  # noqa: E501


        :return: The subtype of this Card.  # noqa: E501
        :rtype: str
        """
        return self._subtype

    @subtype.setter
    def subtype(self, subtype):
        """Sets the subtype of this Card.


        :param subtype: The subtype of this Card.  # noqa: E501
        :type: str
        """

        self._subtype = subtype

    @property
    def issuer(self):
        """Gets the issuer of this Card.  # noqa: E501


        :return: The issuer of this Card.  # noqa: E501
        :rtype: str
        """
        return self._issuer

    @issuer.setter
    def issuer(self, issuer):
        """Sets the issuer of this Card.


        :param issuer: The issuer of this Card.  # noqa: E501
        :type: str
        """

        self._issuer = issuer

    @property
    def cv_indicator(self):
        """Gets the cv_indicator of this Card.  # noqa: E501


        :return: The cv_indicator of this Card.  # noqa: E501
        :rtype: str
        """
        return self._cv_indicator

    @cv_indicator.setter
    def cv_indicator(self, cv_indicator):
        """Sets the cv_indicator of this Card.


        :param cv_indicator: The cv_indicator of this Card.  # noqa: E501
        :type: str
        """

        self._cv_indicator = cv_indicator

    @property
    def cv_number(self):
        """Gets the cv_number of this Card.  # noqa: E501


        :return: The cv_number of this Card.  # noqa: E501
        :rtype: str
        """
        return self._cv_number

    @cv_number.setter
    def cv_number(self, cv_number):
        """Sets the cv_number of this Card.


        :param cv_number: The cv_number of this Card.  # noqa: E501
        :type: str
        """

        self._cv_number = cv_number

    @property
    def expiration_month(self):
        """Gets the expiration_month of this Card.  # noqa: E501


        :return: The expiration_month of this Card.  # noqa: E501
        :rtype: str
        """
        return self._expiration_month

    @expiration_month.setter
    def expiration_month(self, expiration_month):
        """Sets the expiration_month of this Card.


        :param expiration_month: The expiration_month of this Card.  # noqa: E501
        :type: str
        """

        self._expiration_month = expiration_month

    @property
    def expiration_year(self):
        """Gets the expiration_year of this Card.  # noqa: E501


        :return: The expiration_year of this Card.  # noqa: E501
        :rtype: str
        """
        return self._expiration_year

    @expiration_year.setter
    def expiration_year(self, expiration_year):
        """Sets the expiration_year of this Card.


        :param expiration_year: The expiration_year of this Card.  # noqa: E501
        :type: str
        """

        self._expiration_year = expiration_year

    @property
    def issue_number(self):
        """Gets the issue_number of this Card.  # noqa: E501


        :return: The issue_number of this Card.  # noqa: E501
        :rtype: str
        """
        return self._issue_number

    @issue_number.setter
    def issue_number(self, issue_number):
        """Sets the issue_number of this Card.


        :param issue_number: The issue_number of this Card.  # noqa: E501
        :type: str
        """

        self._issue_number = issue_number

    @property
    def name_on_card(self):
        """Gets the name_on_card of this Card.  # noqa: E501


        :return: The name_on_card of this Card.  # noqa: E501
        :rtype: str
        """
        return self._name_on_card

    @name_on_card.setter
    def name_on_card(self, name_on_card):
        """Sets the name_on_card of this Card.


        :param name_on_card: The name_on_card of this Card.  # noqa: E501
        :type: str
        """

        self._name_on_card = name_on_card

    @property
    def start_month(self):
        """Gets the start_month of this Card.  # noqa: E501


        :return: The start_month of this Card.  # noqa: E501
        :rtype: str
        """
        return self._start_month

    @start_month.setter
    def start_month(self, start_month):
        """Sets the start_month of this Card.


        :param start_month: The start_month of this Card.  # noqa: E501
        :type: str
        """

        self._start_month = start_month

    @property
    def start_year(self):
        """Gets the start_year of this Card.  # noqa: E501


        :return: The start_year of this Card.  # noqa: E501
        :rtype: str
        """
        return self._start_year

    @start_year.setter
    def start_year(self, start_year):
        """Sets the start_year of this Card.


        :param start_year: The start_year of this Card.  # noqa: E501
        :type: str
        """

        self._start_year = start_year

    @property
    def service_restriction_code(self):
        """Gets the service_restriction_code of this Card.  # noqa: E501


        :return: The service_restriction_code of this Card.  # noqa: E501
        :rtype: str
        """
        return self._service_restriction_code

    @service_restriction_code.setter
    def service_restriction_code(self, service_restriction_code):
        """Sets the service_restriction_code of this Card.


        :param service_restriction_code: The service_restriction_code of this Card.  # noqa: E501
        :type: str
        """

        self._service_restriction_code = service_restriction_code

    @property
    def pin_ksn(self):
        """Gets the pin_ksn of this Card.  # noqa: E501


        :return: The pin_ksn of this Card.  # noqa: E501
        :rtype: str
        """
        return self._pin_ksn

    @pin_ksn.setter
    def pin_ksn(self, pin_ksn):
        """Sets the pin_ksn of this Card.


        :param pin_ksn: The pin_ksn of this Card.  # noqa: E501
        :type: str
        """

        self._pin_ksn = pin_ksn

    @property
    def pin_block(self):
        """Gets the pin_block of this Card.  # noqa: E501


        :return: The pin_block of this Card.  # noqa: E501
        :rtype: str
        """
        return self._pin_block

    @pin_block.setter
    def pin_block(self, pin_block):
        """Sets the pin_block of this Card.


        :param pin_block: The pin_block of this Card.  # noqa: E501
        :type: str
        """

        self._pin_block = pin_block

    @property
    def voucher_number(self):
        """Gets the voucher_number of this Card.  # noqa: E501


        :return: The voucher_number of this Card.  # noqa: E501
        :rtype: str
        """
        return self._voucher_number

    @voucher_number.setter
    def voucher_number(self, voucher_number):
        """Sets the voucher_number of this Card.


        :param voucher_number: The voucher_number of this Card.  # noqa: E501
        :type: str
        """

        self._voucher_number = voucher_number

    @property
    def expected_brand(self):
        """Gets the expected_brand of this Card.  # noqa: E501


        :return: The expected_brand of this Card.  # noqa: E501
        :rtype: str
        """
        return self._expected_brand

    @expected_brand.setter
    def expected_brand(self, expected_brand):
        """Sets the expected_brand of this Card.


        :param expected_brand: The expected_brand of this Card.  # noqa: E501
        :type: str
        """

        self._expected_brand = expected_brand

    @property
    def pl_data1(self):
        """Gets the pl_data1 of this Card.  # noqa: E501


        :return: The pl_data1 of this Card.  # noqa: E501
        :rtype: str
        """
        return self._pl_data1

    @pl_data1.setter
    def pl_data1(self, pl_data1):
        """Sets the pl_data1 of this Card.


        :param pl_data1: The pl_data1 of this Card.  # noqa: E501
        :type: str
        """

        self._pl_data1 = pl_data1

    @property
    def pl_data2(self):
        """Gets the pl_data2 of this Card.  # noqa: E501


        :return: The pl_data2 of this Card.  # noqa: E501
        :rtype: str
        """
        return self._pl_data2

    @pl_data2.setter
    def pl_data2(self, pl_data2):
        """Sets the pl_data2 of this Card.


        :param pl_data2: The pl_data2 of this Card.  # noqa: E501
        :type: str
        """

        self._pl_data2 = pl_data2

    @property
    def _pass(self):
        """Gets the _pass of this Card.  # noqa: E501


        :return: The _pass of this Card.  # noqa: E501
        :rtype: str
        """
        return self.__pass

    @_pass.setter
    def _pass(self, _pass):
        """Sets the _pass of this Card.


        :param _pass: The _pass of this Card.  # noqa: E501
        :type: str
        """

        self.__pass = _pass

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Card, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Card):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, Card):
            return True

        return self.to_dict() != other.to_dict()
