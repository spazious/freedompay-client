# coding: utf-8

"""
    Hosted Payment Controls API Documentation v1.5

    The API for Hosted Payment Controls. To access the swagger.json file open the following link: https://hpc.uat.freedompay.com/api/swagger/docs/v1.5

    The version of the OpenAPI document: v1.5
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel, Field, StrictStr

class Card(BaseModel):
    """
    Card
    """
    account_number: Optional[StrictStr] = Field(None, alias="accountNumber")
    account_type: Optional[StrictStr] = Field(None, alias="accountType")
    card_type: Optional[StrictStr] = Field(None, alias="cardType")
    token_subtype: Optional[StrictStr] = Field(None, alias="tokenSubtype")
    subtype: Optional[StrictStr] = None
    issuer: Optional[StrictStr] = None
    cv_indicator: Optional[StrictStr] = Field(None, alias="cvIndicator")
    cv_number: Optional[StrictStr] = Field(None, alias="cvNumber")
    expiration_month: Optional[StrictStr] = Field(None, alias="expirationMonth")
    expiration_year: Optional[StrictStr] = Field(None, alias="expirationYear")
    issue_number: Optional[StrictStr] = Field(None, alias="issueNumber")
    name_on_card: Optional[StrictStr] = Field(None, alias="nameOnCard")
    start_month: Optional[StrictStr] = Field(None, alias="startMonth")
    start_year: Optional[StrictStr] = Field(None, alias="startYear")
    service_restriction_code: Optional[StrictStr] = Field(None, alias="serviceRestrictionCode")
    pin_ksn: Optional[StrictStr] = Field(None, alias="pinKsn")
    pin_block: Optional[StrictStr] = Field(None, alias="pinBlock")
    voucher_number: Optional[StrictStr] = Field(None, alias="voucherNumber")
    expected_brand: Optional[StrictStr] = Field(None, alias="expectedBrand")
    pl_data1: Optional[StrictStr] = Field(None, alias="plData1")
    pl_data2: Optional[StrictStr] = Field(None, alias="plData2")
    var_pass: Optional[StrictStr] = Field(None, alias="pass")
    __properties = ["accountNumber", "accountType", "cardType", "tokenSubtype", "subtype", "issuer", "cvIndicator", "cvNumber", "expirationMonth", "expirationYear", "issueNumber", "nameOnCard", "startMonth", "startYear", "serviceRestrictionCode", "pinKsn", "pinBlock", "voucherNumber", "expectedBrand", "plData1", "plData2", "pass"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Card:
        """Create an instance of Card from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> Card:
        """Create an instance of Card from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return Card.parse_obj(obj)

        _obj = Card.parse_obj({
            "account_number": obj.get("accountNumber"),
            "account_type": obj.get("accountType"),
            "card_type": obj.get("cardType"),
            "token_subtype": obj.get("tokenSubtype"),
            "subtype": obj.get("subtype"),
            "issuer": obj.get("issuer"),
            "cv_indicator": obj.get("cvIndicator"),
            "cv_number": obj.get("cvNumber"),
            "expiration_month": obj.get("expirationMonth"),
            "expiration_year": obj.get("expirationYear"),
            "issue_number": obj.get("issueNumber"),
            "name_on_card": obj.get("nameOnCard"),
            "start_month": obj.get("startMonth"),
            "start_year": obj.get("startYear"),
            "service_restriction_code": obj.get("serviceRestrictionCode"),
            "pin_ksn": obj.get("pinKsn"),
            "pin_block": obj.get("pinBlock"),
            "voucher_number": obj.get("voucherNumber"),
            "expected_brand": obj.get("expectedBrand"),
            "pl_data1": obj.get("plData1"),
            "pl_data2": obj.get("plData2"),
            "var_pass": obj.get("pass")
        })
        return _obj


