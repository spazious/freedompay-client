# coding: utf-8

"""
    Hosted Payment Controls API Documentation v1.5

    The API for Hosted Payment Controls. To access the swagger.json file open the following link: https://hpc.uat.freedompay.com/api/swagger/docs/v1.5  # noqa: E501

    OpenAPI spec version: v1.5
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from freedompay_client.configuration import Configuration


class Payment(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'trans_type': 'str',
        'pos_tender_type': 'TenderType',
        'brand': 'str',
        'card_type': 'str',
        'entry_mode': 'str',
        'amount': 'str',
        'currency_code': 'str',
        'offline': 'str',
        'request_id': 'str'
    }

    attribute_map = {
        'trans_type': 'transType',
        'pos_tender_type': 'posTenderType',
        'brand': 'brand',
        'card_type': 'cardType',
        'entry_mode': 'entryMode',
        'amount': 'amount',
        'currency_code': 'currencyCode',
        'offline': 'offline',
        'request_id': 'requestId'
    }

    def __init__(self, trans_type=None, pos_tender_type=None, brand=None, card_type=None, entry_mode=None, amount=None, currency_code=None, offline=None, request_id=None, _configuration=None):  # noqa: E501
        """Payment - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._trans_type = None
        self._pos_tender_type = None
        self._brand = None
        self._card_type = None
        self._entry_mode = None
        self._amount = None
        self._currency_code = None
        self._offline = None
        self._request_id = None
        self.discriminator = None

        if trans_type is not None:
            self.trans_type = trans_type
        if pos_tender_type is not None:
            self.pos_tender_type = pos_tender_type
        if brand is not None:
            self.brand = brand
        if card_type is not None:
            self.card_type = card_type
        if entry_mode is not None:
            self.entry_mode = entry_mode
        if amount is not None:
            self.amount = amount
        if currency_code is not None:
            self.currency_code = currency_code
        if offline is not None:
            self.offline = offline
        if request_id is not None:
            self.request_id = request_id

    @property
    def trans_type(self):
        """Gets the trans_type of this Payment.  # noqa: E501


        :return: The trans_type of this Payment.  # noqa: E501
        :rtype: str
        """
        return self._trans_type

    @trans_type.setter
    def trans_type(self, trans_type):
        """Sets the trans_type of this Payment.


        :param trans_type: The trans_type of this Payment.  # noqa: E501
        :type: str
        """

        self._trans_type = trans_type

    @property
    def pos_tender_type(self):
        """Gets the pos_tender_type of this Payment.  # noqa: E501


        :return: The pos_tender_type of this Payment.  # noqa: E501
        :rtype: TenderType
        """
        return self._pos_tender_type

    @pos_tender_type.setter
    def pos_tender_type(self, pos_tender_type):
        """Sets the pos_tender_type of this Payment.


        :param pos_tender_type: The pos_tender_type of this Payment.  # noqa: E501
        :type: TenderType
        """

        self._pos_tender_type = pos_tender_type

    @property
    def brand(self):
        """Gets the brand of this Payment.  # noqa: E501


        :return: The brand of this Payment.  # noqa: E501
        :rtype: str
        """
        return self._brand

    @brand.setter
    def brand(self, brand):
        """Sets the brand of this Payment.


        :param brand: The brand of this Payment.  # noqa: E501
        :type: str
        """

        self._brand = brand

    @property
    def card_type(self):
        """Gets the card_type of this Payment.  # noqa: E501


        :return: The card_type of this Payment.  # noqa: E501
        :rtype: str
        """
        return self._card_type

    @card_type.setter
    def card_type(self, card_type):
        """Sets the card_type of this Payment.


        :param card_type: The card_type of this Payment.  # noqa: E501
        :type: str
        """

        self._card_type = card_type

    @property
    def entry_mode(self):
        """Gets the entry_mode of this Payment.  # noqa: E501


        :return: The entry_mode of this Payment.  # noqa: E501
        :rtype: str
        """
        return self._entry_mode

    @entry_mode.setter
    def entry_mode(self, entry_mode):
        """Sets the entry_mode of this Payment.


        :param entry_mode: The entry_mode of this Payment.  # noqa: E501
        :type: str
        """

        self._entry_mode = entry_mode

    @property
    def amount(self):
        """Gets the amount of this Payment.  # noqa: E501


        :return: The amount of this Payment.  # noqa: E501
        :rtype: str
        """
        return self._amount

    @amount.setter
    def amount(self, amount):
        """Sets the amount of this Payment.


        :param amount: The amount of this Payment.  # noqa: E501
        :type: str
        """

        self._amount = amount

    @property
    def currency_code(self):
        """Gets the currency_code of this Payment.  # noqa: E501


        :return: The currency_code of this Payment.  # noqa: E501
        :rtype: str
        """
        return self._currency_code

    @currency_code.setter
    def currency_code(self, currency_code):
        """Sets the currency_code of this Payment.


        :param currency_code: The currency_code of this Payment.  # noqa: E501
        :type: str
        """

        self._currency_code = currency_code

    @property
    def offline(self):
        """Gets the offline of this Payment.  # noqa: E501


        :return: The offline of this Payment.  # noqa: E501
        :rtype: str
        """
        return self._offline

    @offline.setter
    def offline(self, offline):
        """Sets the offline of this Payment.


        :param offline: The offline of this Payment.  # noqa: E501
        :type: str
        """

        self._offline = offline

    @property
    def request_id(self):
        """Gets the request_id of this Payment.  # noqa: E501


        :return: The request_id of this Payment.  # noqa: E501
        :rtype: str
        """
        return self._request_id

    @request_id.setter
    def request_id(self, request_id):
        """Sets the request_id of this Payment.


        :param request_id: The request_id of this Payment.  # noqa: E501
        :type: str
        """

        self._request_id = request_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Payment, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Payment):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, Payment):
            return True

        return self.to_dict() != other.to_dict()
