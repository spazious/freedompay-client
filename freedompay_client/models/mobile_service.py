# coding: utf-8

"""
    Hosted Payment Controls API Documentation v1.5

    The API for Hosted Payment Controls. To access the swagger.json file open the following link: https://hpc.uat.freedompay.com/api/swagger/docs/v1.5

    The version of the OpenAPI document: v1.5
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel, Field, StrictStr

class MobileService(BaseModel):
    """
    MobileService
    """
    feature_flags1: Optional[StrictStr] = Field(None, alias="featureFlags1")
    feature_flags2: Optional[StrictStr] = Field(None, alias="featureFlags2")
    function_code: Optional[StrictStr] = Field(None, alias="functionCode")
    check_id: Optional[StrictStr] = Field(None, alias="checkId")
    accept_tip: Optional[StrictStr] = Field(None, alias="acceptTip")
    open_tab: Optional[StrictStr] = Field(None, alias="openTab")
    payment_session_id: Optional[StrictStr] = Field(None, alias="paymentSessionId")
    mha_callback_key: Optional[StrictStr] = Field(None, alias="mhaCallbackKey")
    qrseq: Optional[StrictStr] = None
    bar_data: Optional[StrictStr] = Field(None, alias="barData")
    bar_type: Optional[StrictStr] = Field(None, alias="barType")
    confirm_pay_seq: Optional[StrictStr] = Field(None, alias="confirmPaySeq")
    pay_seq: Optional[StrictStr] = Field(None, alias="paySeq")
    applied_discount_amount: Optional[StrictStr] = Field(None, alias="appliedDiscountAmount")
    run: Optional[StrictStr] = None
    __properties = ["featureFlags1", "featureFlags2", "functionCode", "checkId", "acceptTip", "openTab", "paymentSessionId", "mhaCallbackKey", "qrseq", "barData", "barType", "confirmPaySeq", "paySeq", "appliedDiscountAmount", "run"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> MobileService:
        """Create an instance of MobileService from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> MobileService:
        """Create an instance of MobileService from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return MobileService.parse_obj(obj)

        _obj = MobileService.parse_obj({
            "feature_flags1": obj.get("featureFlags1"),
            "feature_flags2": obj.get("featureFlags2"),
            "function_code": obj.get("functionCode"),
            "check_id": obj.get("checkId"),
            "accept_tip": obj.get("acceptTip"),
            "open_tab": obj.get("openTab"),
            "payment_session_id": obj.get("paymentSessionId"),
            "mha_callback_key": obj.get("mhaCallbackKey"),
            "qrseq": obj.get("qrseq"),
            "bar_data": obj.get("barData"),
            "bar_type": obj.get("barType"),
            "confirm_pay_seq": obj.get("confirmPaySeq"),
            "pay_seq": obj.get("paySeq"),
            "applied_discount_amount": obj.get("appliedDiscountAmount"),
            "run": obj.get("run")
        })
        return _obj


