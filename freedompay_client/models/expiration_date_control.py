# coding: utf-8

"""
    Hosted Payment Controls API Documentation v1.5

    The API for Hosted Payment Controls. To access the swagger.json file open the following link: https://hpc.uat.freedompay.com/api/swagger/docs/v1.5

    The version of the OpenAPI document: v1.5
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel, Field, StrictStr, validator

class ExpirationDateControl(BaseModel):
    """
    ExpirationDateControl
    """
    label_type: Optional[StrictStr] = Field(None, alias="LabelType")
    placeholder_type: Optional[StrictStr] = Field(None, alias="PlaceholderType")
    validation_type: Optional[StrictStr] = Field(None, alias="ValidationType")
    __properties = ["LabelType", "PlaceholderType", "ValidationType"]

    @validator('label_type')
    def label_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in ('Unknown', 'Default', 'Required', 'IfPresent', 'Optional'):
            raise ValueError("must be one of enum values ('Unknown', 'Default', 'Required', 'IfPresent', 'Optional')")
        return value

    @validator('placeholder_type')
    def placeholder_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in ('Unknown', 'Blank', 'Default'):
            raise ValueError("must be one of enum values ('Unknown', 'Blank', 'Default')")
        return value

    @validator('validation_type')
    def validation_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in ('Unknown', 'NotApplicable', 'Optional', 'Required', 'OptionalExplicit'):
            raise ValueError("must be one of enum values ('Unknown', 'NotApplicable', 'Optional', 'Required', 'OptionalExplicit')")
        return value

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> ExpirationDateControl:
        """Create an instance of ExpirationDateControl from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> ExpirationDateControl:
        """Create an instance of ExpirationDateControl from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return ExpirationDateControl.parse_obj(obj)

        _obj = ExpirationDateControl.parse_obj({
            "label_type": obj.get("LabelType"),
            "placeholder_type": obj.get("PlaceholderType"),
            "validation_type": obj.get("ValidationType")
        })
        return _obj


