# coding: utf-8

"""
    Hosted Payment Controls API Documentation v1.5

    The API for Hosted Payment Controls. To access the swagger.json file open the following link: https://hpc.uat.freedompay.com/api/swagger/docs/v1.5  # noqa: E501

    OpenAPI spec version: v1.5
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from freedompay_client.configuration import Configuration


class GoogleBillingAddressRequest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'format': 'str',
        'is_required': 'bool',
        'is_phone_number_required': 'bool'
    }

    attribute_map = {
        'format': 'Format',
        'is_required': 'IsRequired',
        'is_phone_number_required': 'IsPhoneNumberRequired'
    }

    def __init__(self, format=None, is_required=None, is_phone_number_required=None, _configuration=None):  # noqa: E501
        """GoogleBillingAddressRequest - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._format = None
        self._is_required = None
        self._is_phone_number_required = None
        self.discriminator = None

        if format is not None:
            self.format = format
        if is_required is not None:
            self.is_required = is_required
        if is_phone_number_required is not None:
            self.is_phone_number_required = is_phone_number_required

    @property
    def format(self):
        """Gets the format of this GoogleBillingAddressRequest.  # noqa: E501


        :return: The format of this GoogleBillingAddressRequest.  # noqa: E501
        :rtype: str
        """
        return self._format

    @format.setter
    def format(self, format):
        """Sets the format of this GoogleBillingAddressRequest.


        :param format: The format of this GoogleBillingAddressRequest.  # noqa: E501
        :type: str
        """
        allowed_values = ["Unknown", "Min", "Full"]  # noqa: E501
        if (self._configuration.client_side_validation and
                format not in allowed_values):
            raise ValueError(
                "Invalid value for `format` ({0}), must be one of {1}"  # noqa: E501
                .format(format, allowed_values)
            )

        self._format = format

    @property
    def is_required(self):
        """Gets the is_required of this GoogleBillingAddressRequest.  # noqa: E501


        :return: The is_required of this GoogleBillingAddressRequest.  # noqa: E501
        :rtype: bool
        """
        return self._is_required

    @is_required.setter
    def is_required(self, is_required):
        """Sets the is_required of this GoogleBillingAddressRequest.


        :param is_required: The is_required of this GoogleBillingAddressRequest.  # noqa: E501
        :type: bool
        """

        self._is_required = is_required

    @property
    def is_phone_number_required(self):
        """Gets the is_phone_number_required of this GoogleBillingAddressRequest.  # noqa: E501


        :return: The is_phone_number_required of this GoogleBillingAddressRequest.  # noqa: E501
        :rtype: bool
        """
        return self._is_phone_number_required

    @is_phone_number_required.setter
    def is_phone_number_required(self, is_phone_number_required):
        """Sets the is_phone_number_required of this GoogleBillingAddressRequest.


        :param is_phone_number_required: The is_phone_number_required of this GoogleBillingAddressRequest.  # noqa: E501
        :type: bool
        """

        self._is_phone_number_required = is_phone_number_required

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(GoogleBillingAddressRequest, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, GoogleBillingAddressRequest):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, GoogleBillingAddressRequest):
            return True

        return self.to_dict() != other.to_dict()
