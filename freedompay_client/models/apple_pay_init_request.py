# coding: utf-8

"""
    Hosted Payment Controls API Documentation v1.5

    The API for Hosted Payment Controls. To access the swagger.json file open the following link: https://hpc.uat.freedompay.com/api/swagger/docs/v1.5  # noqa: E501

    OpenAPI spec version: v1.5
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from freedompay_client.configuration import Configuration


class ApplePayInitRequest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'button_type': 'str',
        'button_color': 'str',
        'total_price': 'str',
        'auto_finalize_payment': 'bool',
        'exclude_shipping_address': 'bool',
        'culture_code': 'str',
        'es_key': 'str',
        'legal': 'LegalControl',
        'store_id': 'str',
        'styles': 'str',
        'terminal_id': 'str',
        'validation_message_type': 'str',
        'reference_id': 'str'
    }

    attribute_map = {
        'button_type': 'ButtonType',
        'button_color': 'ButtonColor',
        'total_price': 'TotalPrice',
        'auto_finalize_payment': 'AutoFinalizePayment',
        'exclude_shipping_address': 'ExcludeShippingAddress',
        'culture_code': 'CultureCode',
        'es_key': 'EsKey',
        'legal': 'Legal',
        'store_id': 'StoreId',
        'styles': 'Styles',
        'terminal_id': 'TerminalId',
        'validation_message_type': 'ValidationMessageType',
        'reference_id': 'ReferenceId'
    }

    def __init__(self, button_type=None, button_color=None, total_price=None, auto_finalize_payment=None, exclude_shipping_address=None, culture_code=None, es_key=None, legal=None, store_id=None, styles=None, terminal_id=None, validation_message_type=None, reference_id=None, _configuration=None):  # noqa: E501
        """ApplePayInitRequest - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._button_type = None
        self._button_color = None
        self._total_price = None
        self._auto_finalize_payment = None
        self._exclude_shipping_address = None
        self._culture_code = None
        self._es_key = None
        self._legal = None
        self._store_id = None
        self._styles = None
        self._terminal_id = None
        self._validation_message_type = None
        self._reference_id = None
        self.discriminator = None

        if button_type is not None:
            self.button_type = button_type
        if button_color is not None:
            self.button_color = button_color
        if total_price is not None:
            self.total_price = total_price
        if auto_finalize_payment is not None:
            self.auto_finalize_payment = auto_finalize_payment
        if exclude_shipping_address is not None:
            self.exclude_shipping_address = exclude_shipping_address
        if culture_code is not None:
            self.culture_code = culture_code
        if es_key is not None:
            self.es_key = es_key
        if legal is not None:
            self.legal = legal
        if store_id is not None:
            self.store_id = store_id
        if styles is not None:
            self.styles = styles
        if terminal_id is not None:
            self.terminal_id = terminal_id
        if validation_message_type is not None:
            self.validation_message_type = validation_message_type
        if reference_id is not None:
            self.reference_id = reference_id

    @property
    def button_type(self):
        """Gets the button_type of this ApplePayInitRequest.  # noqa: E501


        :return: The button_type of this ApplePayInitRequest.  # noqa: E501
        :rtype: str
        """
        return self._button_type

    @button_type.setter
    def button_type(self, button_type):
        """Sets the button_type of this ApplePayInitRequest.


        :param button_type: The button_type of this ApplePayInitRequest.  # noqa: E501
        :type: str
        """
        allowed_values = ["Unknown", "Plain", "Book", "Buy", "CheckOut", "Donate", "Subscribe"]  # noqa: E501
        if (self._configuration.client_side_validation and
                button_type not in allowed_values):
            raise ValueError(
                "Invalid value for `button_type` ({0}), must be one of {1}"  # noqa: E501
                .format(button_type, allowed_values)
            )

        self._button_type = button_type

    @property
    def button_color(self):
        """Gets the button_color of this ApplePayInitRequest.  # noqa: E501


        :return: The button_color of this ApplePayInitRequest.  # noqa: E501
        :rtype: str
        """
        return self._button_color

    @button_color.setter
    def button_color(self, button_color):
        """Sets the button_color of this ApplePayInitRequest.


        :param button_color: The button_color of this ApplePayInitRequest.  # noqa: E501
        :type: str
        """
        allowed_values = ["Unknown", "Black", "White", "WhiteWithOutline"]  # noqa: E501
        if (self._configuration.client_side_validation and
                button_color not in allowed_values):
            raise ValueError(
                "Invalid value for `button_color` ({0}), must be one of {1}"  # noqa: E501
                .format(button_color, allowed_values)
            )

        self._button_color = button_color

    @property
    def total_price(self):
        """Gets the total_price of this ApplePayInitRequest.  # noqa: E501


        :return: The total_price of this ApplePayInitRequest.  # noqa: E501
        :rtype: str
        """
        return self._total_price

    @total_price.setter
    def total_price(self, total_price):
        """Sets the total_price of this ApplePayInitRequest.


        :param total_price: The total_price of this ApplePayInitRequest.  # noqa: E501
        :type: str
        """

        self._total_price = total_price

    @property
    def auto_finalize_payment(self):
        """Gets the auto_finalize_payment of this ApplePayInitRequest.  # noqa: E501


        :return: The auto_finalize_payment of this ApplePayInitRequest.  # noqa: E501
        :rtype: bool
        """
        return self._auto_finalize_payment

    @auto_finalize_payment.setter
    def auto_finalize_payment(self, auto_finalize_payment):
        """Sets the auto_finalize_payment of this ApplePayInitRequest.


        :param auto_finalize_payment: The auto_finalize_payment of this ApplePayInitRequest.  # noqa: E501
        :type: bool
        """

        self._auto_finalize_payment = auto_finalize_payment

    @property
    def exclude_shipping_address(self):
        """Gets the exclude_shipping_address of this ApplePayInitRequest.  # noqa: E501


        :return: The exclude_shipping_address of this ApplePayInitRequest.  # noqa: E501
        :rtype: bool
        """
        return self._exclude_shipping_address

    @exclude_shipping_address.setter
    def exclude_shipping_address(self, exclude_shipping_address):
        """Sets the exclude_shipping_address of this ApplePayInitRequest.


        :param exclude_shipping_address: The exclude_shipping_address of this ApplePayInitRequest.  # noqa: E501
        :type: bool
        """

        self._exclude_shipping_address = exclude_shipping_address

    @property
    def culture_code(self):
        """Gets the culture_code of this ApplePayInitRequest.  # noqa: E501


        :return: The culture_code of this ApplePayInitRequest.  # noqa: E501
        :rtype: str
        """
        return self._culture_code

    @culture_code.setter
    def culture_code(self, culture_code):
        """Sets the culture_code of this ApplePayInitRequest.


        :param culture_code: The culture_code of this ApplePayInitRequest.  # noqa: E501
        :type: str
        """

        self._culture_code = culture_code

    @property
    def es_key(self):
        """Gets the es_key of this ApplePayInitRequest.  # noqa: E501


        :return: The es_key of this ApplePayInitRequest.  # noqa: E501
        :rtype: str
        """
        return self._es_key

    @es_key.setter
    def es_key(self, es_key):
        """Sets the es_key of this ApplePayInitRequest.


        :param es_key: The es_key of this ApplePayInitRequest.  # noqa: E501
        :type: str
        """

        self._es_key = es_key

    @property
    def legal(self):
        """Gets the legal of this ApplePayInitRequest.  # noqa: E501


        :return: The legal of this ApplePayInitRequest.  # noqa: E501
        :rtype: LegalControl
        """
        return self._legal

    @legal.setter
    def legal(self, legal):
        """Sets the legal of this ApplePayInitRequest.


        :param legal: The legal of this ApplePayInitRequest.  # noqa: E501
        :type: LegalControl
        """

        self._legal = legal

    @property
    def store_id(self):
        """Gets the store_id of this ApplePayInitRequest.  # noqa: E501


        :return: The store_id of this ApplePayInitRequest.  # noqa: E501
        :rtype: str
        """
        return self._store_id

    @store_id.setter
    def store_id(self, store_id):
        """Sets the store_id of this ApplePayInitRequest.


        :param store_id: The store_id of this ApplePayInitRequest.  # noqa: E501
        :type: str
        """

        self._store_id = store_id

    @property
    def styles(self):
        """Gets the styles of this ApplePayInitRequest.  # noqa: E501


        :return: The styles of this ApplePayInitRequest.  # noqa: E501
        :rtype: str
        """
        return self._styles

    @styles.setter
    def styles(self, styles):
        """Sets the styles of this ApplePayInitRequest.


        :param styles: The styles of this ApplePayInitRequest.  # noqa: E501
        :type: str
        """

        self._styles = styles

    @property
    def terminal_id(self):
        """Gets the terminal_id of this ApplePayInitRequest.  # noqa: E501


        :return: The terminal_id of this ApplePayInitRequest.  # noqa: E501
        :rtype: str
        """
        return self._terminal_id

    @terminal_id.setter
    def terminal_id(self, terminal_id):
        """Sets the terminal_id of this ApplePayInitRequest.


        :param terminal_id: The terminal_id of this ApplePayInitRequest.  # noqa: E501
        :type: str
        """

        self._terminal_id = terminal_id

    @property
    def validation_message_type(self):
        """Gets the validation_message_type of this ApplePayInitRequest.  # noqa: E501


        :return: The validation_message_type of this ApplePayInitRequest.  # noqa: E501
        :rtype: str
        """
        return self._validation_message_type

    @validation_message_type.setter
    def validation_message_type(self, validation_message_type):
        """Sets the validation_message_type of this ApplePayInitRequest.


        :param validation_message_type: The validation_message_type of this ApplePayInitRequest.  # noqa: E501
        :type: str
        """
        allowed_values = ["Unknown", "None", "Feedback", "Tooltip"]  # noqa: E501
        if (self._configuration.client_side_validation and
                validation_message_type not in allowed_values):
            raise ValueError(
                "Invalid value for `validation_message_type` ({0}), must be one of {1}"  # noqa: E501
                .format(validation_message_type, allowed_values)
            )

        self._validation_message_type = validation_message_type

    @property
    def reference_id(self):
        """Gets the reference_id of this ApplePayInitRequest.  # noqa: E501


        :return: The reference_id of this ApplePayInitRequest.  # noqa: E501
        :rtype: str
        """
        return self._reference_id

    @reference_id.setter
    def reference_id(self, reference_id):
        """Sets the reference_id of this ApplePayInitRequest.


        :param reference_id: The reference_id of this ApplePayInitRequest.  # noqa: E501
        :type: str
        """

        self._reference_id = reference_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ApplePayInitRequest, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ApplePayInitRequest):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ApplePayInitRequest):
            return True

        return self.to_dict() != other.to_dict()
