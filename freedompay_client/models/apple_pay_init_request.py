# coding: utf-8

"""
    Hosted Payment Controls API Documentation v1.5

    The API for Hosted Payment Controls. To access the swagger.json file open the following link: https://hpc.uat.freedompay.com/api/swagger/docs/v1.5

    The version of the OpenAPI document: v1.5
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel, Field, StrictBool, StrictStr, validator
from freedompay_client.models.legal_control import LegalControl

class ApplePayInitRequest(BaseModel):
    """
    ApplePayInitRequest
    """
    currency_code: Optional[StrictStr] = Field(None, alias="CurrencyCode")
    button_type: Optional[StrictStr] = Field(None, alias="ButtonType")
    button_color: Optional[StrictStr] = Field(None, alias="ButtonColor")
    total_price: Optional[StrictStr] = Field(None, alias="TotalPrice")
    auto_finalize_payment: Optional[StrictBool] = Field(None, alias="AutoFinalizePayment")
    exclude_shipping_address: Optional[StrictBool] = Field(None, alias="ExcludeShippingAddress")
    culture_code: Optional[StrictStr] = Field(None, alias="CultureCode")
    es_key: Optional[StrictStr] = Field(None, alias="EsKey")
    legal: Optional[LegalControl] = Field(None, alias="Legal")
    store_id: Optional[StrictStr] = Field(None, alias="StoreId")
    styles: Optional[StrictStr] = Field(None, alias="Styles")
    terminal_id: Optional[StrictStr] = Field(None, alias="TerminalId")
    validation_message_type: Optional[StrictStr] = Field(None, alias="ValidationMessageType")
    reference_id: Optional[StrictStr] = Field(None, alias="ReferenceId")
    __properties = ["CurrencyCode", "ButtonType", "ButtonColor", "TotalPrice", "AutoFinalizePayment", "ExcludeShippingAddress", "CultureCode", "EsKey", "Legal", "StoreId", "Styles", "TerminalId", "ValidationMessageType", "ReferenceId"]

    @validator('button_type')
    def button_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in ('Unknown', 'Plain', 'Book', 'Buy', 'CheckOut', 'Donate', 'Subscribe'):
            raise ValueError("must be one of enum values ('Unknown', 'Plain', 'Book', 'Buy', 'CheckOut', 'Donate', 'Subscribe')")
        return value

    @validator('button_color')
    def button_color_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in ('Unknown', 'Black', 'White', 'WhiteWithOutline'):
            raise ValueError("must be one of enum values ('Unknown', 'Black', 'White', 'WhiteWithOutline')")
        return value

    @validator('validation_message_type')
    def validation_message_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in ('Unknown', 'None', 'Feedback', 'Tooltip'):
            raise ValueError("must be one of enum values ('Unknown', 'None', 'Feedback', 'Tooltip')")
        return value

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> ApplePayInitRequest:
        """Create an instance of ApplePayInitRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of legal
        if self.legal:
            _dict['Legal'] = self.legal.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> ApplePayInitRequest:
        """Create an instance of ApplePayInitRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return ApplePayInitRequest.parse_obj(obj)

        _obj = ApplePayInitRequest.parse_obj({
            "currency_code": obj.get("CurrencyCode"),
            "button_type": obj.get("ButtonType"),
            "button_color": obj.get("ButtonColor"),
            "total_price": obj.get("TotalPrice"),
            "auto_finalize_payment": obj.get("AutoFinalizePayment"),
            "exclude_shipping_address": obj.get("ExcludeShippingAddress"),
            "culture_code": obj.get("CultureCode"),
            "es_key": obj.get("EsKey"),
            "legal": LegalControl.from_dict(obj.get("Legal")) if obj.get("Legal") is not None else None,
            "store_id": obj.get("StoreId"),
            "styles": obj.get("Styles"),
            "terminal_id": obj.get("TerminalId"),
            "validation_message_type": obj.get("ValidationMessageType"),
            "reference_id": obj.get("ReferenceId")
        })
        return _obj


