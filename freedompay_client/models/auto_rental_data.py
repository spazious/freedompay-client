# coding: utf-8

"""
    Hosted Payment Controls API Documentation v1.5

    The API for Hosted Payment Controls. To access the swagger.json file open the following link: https://hpc.uat.freedompay.com/api/swagger/docs/v1.5  # noqa: E501

    OpenAPI spec version: v1.5
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from freedompay_client.configuration import Configuration


class AutoRentalData(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'expected_duration': 'str',
        'agreement_number': 'str',
        'checkout_date': 'str',
        'checkin_date': 'str',
        'rental_rate': 'str',
        'rental_rate_unit': 'str',
        'rental_class_id': 'str',
        'no_show': 'str',
        'renter_name': 'str',
        'return_location_id': 'str',
        'return_city': 'str',
        'return_state': 'str',
        'return_country': 'str',
        'extra_charge_types': 'str',
        'extra_charge_total': 'str',
        'extra_charge_notified': 'str'
    }

    attribute_map = {
        'expected_duration': 'expectedDuration',
        'agreement_number': 'agreementNumber',
        'checkout_date': 'checkoutDate',
        'checkin_date': 'checkinDate',
        'rental_rate': 'rentalRate',
        'rental_rate_unit': 'rentalRateUnit',
        'rental_class_id': 'rentalClassId',
        'no_show': 'noShow',
        'renter_name': 'renterName',
        'return_location_id': 'returnLocationId',
        'return_city': 'returnCity',
        'return_state': 'returnState',
        'return_country': 'returnCountry',
        'extra_charge_types': 'extraChargeTypes',
        'extra_charge_total': 'extraChargeTotal',
        'extra_charge_notified': 'extraChargeNotified'
    }

    def __init__(self, expected_duration=None, agreement_number=None, checkout_date=None, checkin_date=None, rental_rate=None, rental_rate_unit=None, rental_class_id=None, no_show=None, renter_name=None, return_location_id=None, return_city=None, return_state=None, return_country=None, extra_charge_types=None, extra_charge_total=None, extra_charge_notified=None, _configuration=None):  # noqa: E501
        """AutoRentalData - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._expected_duration = None
        self._agreement_number = None
        self._checkout_date = None
        self._checkin_date = None
        self._rental_rate = None
        self._rental_rate_unit = None
        self._rental_class_id = None
        self._no_show = None
        self._renter_name = None
        self._return_location_id = None
        self._return_city = None
        self._return_state = None
        self._return_country = None
        self._extra_charge_types = None
        self._extra_charge_total = None
        self._extra_charge_notified = None
        self.discriminator = None

        if expected_duration is not None:
            self.expected_duration = expected_duration
        if agreement_number is not None:
            self.agreement_number = agreement_number
        if checkout_date is not None:
            self.checkout_date = checkout_date
        if checkin_date is not None:
            self.checkin_date = checkin_date
        if rental_rate is not None:
            self.rental_rate = rental_rate
        if rental_rate_unit is not None:
            self.rental_rate_unit = rental_rate_unit
        if rental_class_id is not None:
            self.rental_class_id = rental_class_id
        if no_show is not None:
            self.no_show = no_show
        if renter_name is not None:
            self.renter_name = renter_name
        if return_location_id is not None:
            self.return_location_id = return_location_id
        if return_city is not None:
            self.return_city = return_city
        if return_state is not None:
            self.return_state = return_state
        if return_country is not None:
            self.return_country = return_country
        if extra_charge_types is not None:
            self.extra_charge_types = extra_charge_types
        if extra_charge_total is not None:
            self.extra_charge_total = extra_charge_total
        if extra_charge_notified is not None:
            self.extra_charge_notified = extra_charge_notified

    @property
    def expected_duration(self):
        """Gets the expected_duration of this AutoRentalData.  # noqa: E501


        :return: The expected_duration of this AutoRentalData.  # noqa: E501
        :rtype: str
        """
        return self._expected_duration

    @expected_duration.setter
    def expected_duration(self, expected_duration):
        """Sets the expected_duration of this AutoRentalData.


        :param expected_duration: The expected_duration of this AutoRentalData.  # noqa: E501
        :type: str
        """

        self._expected_duration = expected_duration

    @property
    def agreement_number(self):
        """Gets the agreement_number of this AutoRentalData.  # noqa: E501


        :return: The agreement_number of this AutoRentalData.  # noqa: E501
        :rtype: str
        """
        return self._agreement_number

    @agreement_number.setter
    def agreement_number(self, agreement_number):
        """Sets the agreement_number of this AutoRentalData.


        :param agreement_number: The agreement_number of this AutoRentalData.  # noqa: E501
        :type: str
        """

        self._agreement_number = agreement_number

    @property
    def checkout_date(self):
        """Gets the checkout_date of this AutoRentalData.  # noqa: E501


        :return: The checkout_date of this AutoRentalData.  # noqa: E501
        :rtype: str
        """
        return self._checkout_date

    @checkout_date.setter
    def checkout_date(self, checkout_date):
        """Sets the checkout_date of this AutoRentalData.


        :param checkout_date: The checkout_date of this AutoRentalData.  # noqa: E501
        :type: str
        """

        self._checkout_date = checkout_date

    @property
    def checkin_date(self):
        """Gets the checkin_date of this AutoRentalData.  # noqa: E501


        :return: The checkin_date of this AutoRentalData.  # noqa: E501
        :rtype: str
        """
        return self._checkin_date

    @checkin_date.setter
    def checkin_date(self, checkin_date):
        """Sets the checkin_date of this AutoRentalData.


        :param checkin_date: The checkin_date of this AutoRentalData.  # noqa: E501
        :type: str
        """

        self._checkin_date = checkin_date

    @property
    def rental_rate(self):
        """Gets the rental_rate of this AutoRentalData.  # noqa: E501


        :return: The rental_rate of this AutoRentalData.  # noqa: E501
        :rtype: str
        """
        return self._rental_rate

    @rental_rate.setter
    def rental_rate(self, rental_rate):
        """Sets the rental_rate of this AutoRentalData.


        :param rental_rate: The rental_rate of this AutoRentalData.  # noqa: E501
        :type: str
        """

        self._rental_rate = rental_rate

    @property
    def rental_rate_unit(self):
        """Gets the rental_rate_unit of this AutoRentalData.  # noqa: E501


        :return: The rental_rate_unit of this AutoRentalData.  # noqa: E501
        :rtype: str
        """
        return self._rental_rate_unit

    @rental_rate_unit.setter
    def rental_rate_unit(self, rental_rate_unit):
        """Sets the rental_rate_unit of this AutoRentalData.


        :param rental_rate_unit: The rental_rate_unit of this AutoRentalData.  # noqa: E501
        :type: str
        """

        self._rental_rate_unit = rental_rate_unit

    @property
    def rental_class_id(self):
        """Gets the rental_class_id of this AutoRentalData.  # noqa: E501


        :return: The rental_class_id of this AutoRentalData.  # noqa: E501
        :rtype: str
        """
        return self._rental_class_id

    @rental_class_id.setter
    def rental_class_id(self, rental_class_id):
        """Sets the rental_class_id of this AutoRentalData.


        :param rental_class_id: The rental_class_id of this AutoRentalData.  # noqa: E501
        :type: str
        """

        self._rental_class_id = rental_class_id

    @property
    def no_show(self):
        """Gets the no_show of this AutoRentalData.  # noqa: E501


        :return: The no_show of this AutoRentalData.  # noqa: E501
        :rtype: str
        """
        return self._no_show

    @no_show.setter
    def no_show(self, no_show):
        """Sets the no_show of this AutoRentalData.


        :param no_show: The no_show of this AutoRentalData.  # noqa: E501
        :type: str
        """

        self._no_show = no_show

    @property
    def renter_name(self):
        """Gets the renter_name of this AutoRentalData.  # noqa: E501


        :return: The renter_name of this AutoRentalData.  # noqa: E501
        :rtype: str
        """
        return self._renter_name

    @renter_name.setter
    def renter_name(self, renter_name):
        """Sets the renter_name of this AutoRentalData.


        :param renter_name: The renter_name of this AutoRentalData.  # noqa: E501
        :type: str
        """

        self._renter_name = renter_name

    @property
    def return_location_id(self):
        """Gets the return_location_id of this AutoRentalData.  # noqa: E501


        :return: The return_location_id of this AutoRentalData.  # noqa: E501
        :rtype: str
        """
        return self._return_location_id

    @return_location_id.setter
    def return_location_id(self, return_location_id):
        """Sets the return_location_id of this AutoRentalData.


        :param return_location_id: The return_location_id of this AutoRentalData.  # noqa: E501
        :type: str
        """

        self._return_location_id = return_location_id

    @property
    def return_city(self):
        """Gets the return_city of this AutoRentalData.  # noqa: E501


        :return: The return_city of this AutoRentalData.  # noqa: E501
        :rtype: str
        """
        return self._return_city

    @return_city.setter
    def return_city(self, return_city):
        """Sets the return_city of this AutoRentalData.


        :param return_city: The return_city of this AutoRentalData.  # noqa: E501
        :type: str
        """

        self._return_city = return_city

    @property
    def return_state(self):
        """Gets the return_state of this AutoRentalData.  # noqa: E501


        :return: The return_state of this AutoRentalData.  # noqa: E501
        :rtype: str
        """
        return self._return_state

    @return_state.setter
    def return_state(self, return_state):
        """Sets the return_state of this AutoRentalData.


        :param return_state: The return_state of this AutoRentalData.  # noqa: E501
        :type: str
        """

        self._return_state = return_state

    @property
    def return_country(self):
        """Gets the return_country of this AutoRentalData.  # noqa: E501


        :return: The return_country of this AutoRentalData.  # noqa: E501
        :rtype: str
        """
        return self._return_country

    @return_country.setter
    def return_country(self, return_country):
        """Sets the return_country of this AutoRentalData.


        :param return_country: The return_country of this AutoRentalData.  # noqa: E501
        :type: str
        """

        self._return_country = return_country

    @property
    def extra_charge_types(self):
        """Gets the extra_charge_types of this AutoRentalData.  # noqa: E501


        :return: The extra_charge_types of this AutoRentalData.  # noqa: E501
        :rtype: str
        """
        return self._extra_charge_types

    @extra_charge_types.setter
    def extra_charge_types(self, extra_charge_types):
        """Sets the extra_charge_types of this AutoRentalData.


        :param extra_charge_types: The extra_charge_types of this AutoRentalData.  # noqa: E501
        :type: str
        """

        self._extra_charge_types = extra_charge_types

    @property
    def extra_charge_total(self):
        """Gets the extra_charge_total of this AutoRentalData.  # noqa: E501


        :return: The extra_charge_total of this AutoRentalData.  # noqa: E501
        :rtype: str
        """
        return self._extra_charge_total

    @extra_charge_total.setter
    def extra_charge_total(self, extra_charge_total):
        """Sets the extra_charge_total of this AutoRentalData.


        :param extra_charge_total: The extra_charge_total of this AutoRentalData.  # noqa: E501
        :type: str
        """

        self._extra_charge_total = extra_charge_total

    @property
    def extra_charge_notified(self):
        """Gets the extra_charge_notified of this AutoRentalData.  # noqa: E501


        :return: The extra_charge_notified of this AutoRentalData.  # noqa: E501
        :rtype: str
        """
        return self._extra_charge_notified

    @extra_charge_notified.setter
    def extra_charge_notified(self, extra_charge_notified):
        """Sets the extra_charge_notified of this AutoRentalData.


        :param extra_charge_notified: The extra_charge_notified of this AutoRentalData.  # noqa: E501
        :type: str
        """

        self._extra_charge_notified = extra_charge_notified

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AutoRentalData, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AutoRentalData):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, AutoRentalData):
            return True

        return self.to_dict() != other.to_dict()
