# coding: utf-8

"""
    Hosted Payment Controls API Documentation v1.5

    The API for Hosted Payment Controls. To access the swagger.json file open the following link: https://hpc.uat.freedompay.com/api/swagger/docs/v1.5  # noqa: E501

    OpenAPI spec version: v1.5
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from freedompay_client.configuration import Configuration


class InitRequest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'button': 'ButtonControl',
        'button_type': 'str',
        'pay_pal': 'PayPalInitRequest',
        'postal_code': 'PostalCodeControl',
        'pay_by_bank': 'PayByBankInitRequest',
        'fraud_check': 'FraudCheckOptions',
        'card_number': 'CardNumberControl',
        'consumer_authentication': 'ConsumerAuthentication',
        'dcc': 'DccOptions',
        'expiration_date': 'ExpirationDateControl',
        'order_details': 'OrderDetails',
        'security_code': 'SecurityCodeControl',
        'token_information': 'TokenInformation',
        'card_icon_display_type': 'str',
        'payment_type': 'str',
        'workflow_type': 'str',
        'culture_code': 'str',
        'es_key': 'str',
        'legal': 'LegalControl',
        'store_id': 'str',
        'styles': 'str',
        'terminal_id': 'str',
        'validation_message_type': 'str',
        'reference_id': 'str'
    }

    attribute_map = {
        'button': 'Button',
        'button_type': 'ButtonType',
        'pay_pal': 'PayPal',
        'postal_code': 'PostalCode',
        'pay_by_bank': 'PayByBank',
        'fraud_check': 'FraudCheck',
        'card_number': 'CardNumber',
        'consumer_authentication': 'ConsumerAuthentication',
        'dcc': 'Dcc',
        'expiration_date': 'ExpirationDate',
        'order_details': 'OrderDetails',
        'security_code': 'SecurityCode',
        'token_information': 'TokenInformation',
        'card_icon_display_type': 'CardIconDisplayType',
        'payment_type': 'PaymentType',
        'workflow_type': 'WorkflowType',
        'culture_code': 'CultureCode',
        'es_key': 'EsKey',
        'legal': 'Legal',
        'store_id': 'StoreId',
        'styles': 'Styles',
        'terminal_id': 'TerminalId',
        'validation_message_type': 'ValidationMessageType',
        'reference_id': 'ReferenceId'
    }

    def __init__(self, button=None, button_type=None, pay_pal=None, postal_code=None, pay_by_bank=None, fraud_check=None, card_number=None, consumer_authentication=None, dcc=None, expiration_date=None, order_details=None, security_code=None, token_information=None, card_icon_display_type=None, payment_type=None, workflow_type=None, culture_code=None, es_key=None, legal=None, store_id=None, styles=None, terminal_id=None, validation_message_type=None, reference_id=None, _configuration=None):  # noqa: E501
        """InitRequest - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._button = None
        self._button_type = None
        self._pay_pal = None
        self._postal_code = None
        self._pay_by_bank = None
        self._fraud_check = None
        self._card_number = None
        self._consumer_authentication = None
        self._dcc = None
        self._expiration_date = None
        self._order_details = None
        self._security_code = None
        self._token_information = None
        self._card_icon_display_type = None
        self._payment_type = None
        self._workflow_type = None
        self._culture_code = None
        self._es_key = None
        self._legal = None
        self._store_id = None
        self._styles = None
        self._terminal_id = None
        self._validation_message_type = None
        self._reference_id = None
        self.discriminator = None

        if button is not None:
            self.button = button
        if button_type is not None:
            self.button_type = button_type
        if pay_pal is not None:
            self.pay_pal = pay_pal
        if postal_code is not None:
            self.postal_code = postal_code
        if pay_by_bank is not None:
            self.pay_by_bank = pay_by_bank
        if fraud_check is not None:
            self.fraud_check = fraud_check
        if card_number is not None:
            self.card_number = card_number
        if consumer_authentication is not None:
            self.consumer_authentication = consumer_authentication
        if dcc is not None:
            self.dcc = dcc
        if expiration_date is not None:
            self.expiration_date = expiration_date
        if order_details is not None:
            self.order_details = order_details
        if security_code is not None:
            self.security_code = security_code
        if token_information is not None:
            self.token_information = token_information
        if card_icon_display_type is not None:
            self.card_icon_display_type = card_icon_display_type
        if payment_type is not None:
            self.payment_type = payment_type
        if workflow_type is not None:
            self.workflow_type = workflow_type
        if culture_code is not None:
            self.culture_code = culture_code
        if es_key is not None:
            self.es_key = es_key
        if legal is not None:
            self.legal = legal
        if store_id is not None:
            self.store_id = store_id
        if styles is not None:
            self.styles = styles
        if terminal_id is not None:
            self.terminal_id = terminal_id
        if validation_message_type is not None:
            self.validation_message_type = validation_message_type
        if reference_id is not None:
            self.reference_id = reference_id

    @property
    def button(self):
        """Gets the button of this InitRequest.  # noqa: E501


        :return: The button of this InitRequest.  # noqa: E501
        :rtype: ButtonControl
        """
        return self._button

    @button.setter
    def button(self, button):
        """Sets the button of this InitRequest.


        :param button: The button of this InitRequest.  # noqa: E501
        :type: ButtonControl
        """

        self._button = button

    @property
    def button_type(self):
        """Gets the button_type of this InitRequest.  # noqa: E501


        :return: The button_type of this InitRequest.  # noqa: E501
        :rtype: str
        """
        return self._button_type

    @button_type.setter
    def button_type(self, button_type):
        """Sets the button_type of this InitRequest.


        :param button_type: The button_type of this InitRequest.  # noqa: E501
        :type: str
        """
        allowed_values = ["Unknown", "Buy", "BuyNow", "Donate", "Next", "Pay", "PayNow", "PayWithCard", "Save", "CompleteYourReservation", "PayByBank", "SubmitToHotel", "UpdateReservation", "CompleteReservation"]  # noqa: E501
        if (self._configuration.client_side_validation and
                button_type not in allowed_values):
            raise ValueError(
                "Invalid value for `button_type` ({0}), must be one of {1}"  # noqa: E501
                .format(button_type, allowed_values)
            )

        self._button_type = button_type

    @property
    def pay_pal(self):
        """Gets the pay_pal of this InitRequest.  # noqa: E501


        :return: The pay_pal of this InitRequest.  # noqa: E501
        :rtype: PayPalInitRequest
        """
        return self._pay_pal

    @pay_pal.setter
    def pay_pal(self, pay_pal):
        """Sets the pay_pal of this InitRequest.


        :param pay_pal: The pay_pal of this InitRequest.  # noqa: E501
        :type: PayPalInitRequest
        """

        self._pay_pal = pay_pal

    @property
    def postal_code(self):
        """Gets the postal_code of this InitRequest.  # noqa: E501


        :return: The postal_code of this InitRequest.  # noqa: E501
        :rtype: PostalCodeControl
        """
        return self._postal_code

    @postal_code.setter
    def postal_code(self, postal_code):
        """Sets the postal_code of this InitRequest.


        :param postal_code: The postal_code of this InitRequest.  # noqa: E501
        :type: PostalCodeControl
        """

        self._postal_code = postal_code

    @property
    def pay_by_bank(self):
        """Gets the pay_by_bank of this InitRequest.  # noqa: E501


        :return: The pay_by_bank of this InitRequest.  # noqa: E501
        :rtype: PayByBankInitRequest
        """
        return self._pay_by_bank

    @pay_by_bank.setter
    def pay_by_bank(self, pay_by_bank):
        """Sets the pay_by_bank of this InitRequest.


        :param pay_by_bank: The pay_by_bank of this InitRequest.  # noqa: E501
        :type: PayByBankInitRequest
        """

        self._pay_by_bank = pay_by_bank

    @property
    def fraud_check(self):
        """Gets the fraud_check of this InitRequest.  # noqa: E501


        :return: The fraud_check of this InitRequest.  # noqa: E501
        :rtype: FraudCheckOptions
        """
        return self._fraud_check

    @fraud_check.setter
    def fraud_check(self, fraud_check):
        """Sets the fraud_check of this InitRequest.


        :param fraud_check: The fraud_check of this InitRequest.  # noqa: E501
        :type: FraudCheckOptions
        """

        self._fraud_check = fraud_check

    @property
    def card_number(self):
        """Gets the card_number of this InitRequest.  # noqa: E501


        :return: The card_number of this InitRequest.  # noqa: E501
        :rtype: CardNumberControl
        """
        return self._card_number

    @card_number.setter
    def card_number(self, card_number):
        """Sets the card_number of this InitRequest.


        :param card_number: The card_number of this InitRequest.  # noqa: E501
        :type: CardNumberControl
        """

        self._card_number = card_number

    @property
    def consumer_authentication(self):
        """Gets the consumer_authentication of this InitRequest.  # noqa: E501


        :return: The consumer_authentication of this InitRequest.  # noqa: E501
        :rtype: ConsumerAuthentication
        """
        return self._consumer_authentication

    @consumer_authentication.setter
    def consumer_authentication(self, consumer_authentication):
        """Sets the consumer_authentication of this InitRequest.


        :param consumer_authentication: The consumer_authentication of this InitRequest.  # noqa: E501
        :type: ConsumerAuthentication
        """

        self._consumer_authentication = consumer_authentication

    @property
    def dcc(self):
        """Gets the dcc of this InitRequest.  # noqa: E501


        :return: The dcc of this InitRequest.  # noqa: E501
        :rtype: DccOptions
        """
        return self._dcc

    @dcc.setter
    def dcc(self, dcc):
        """Sets the dcc of this InitRequest.


        :param dcc: The dcc of this InitRequest.  # noqa: E501
        :type: DccOptions
        """

        self._dcc = dcc

    @property
    def expiration_date(self):
        """Gets the expiration_date of this InitRequest.  # noqa: E501


        :return: The expiration_date of this InitRequest.  # noqa: E501
        :rtype: ExpirationDateControl
        """
        return self._expiration_date

    @expiration_date.setter
    def expiration_date(self, expiration_date):
        """Sets the expiration_date of this InitRequest.


        :param expiration_date: The expiration_date of this InitRequest.  # noqa: E501
        :type: ExpirationDateControl
        """

        self._expiration_date = expiration_date

    @property
    def order_details(self):
        """Gets the order_details of this InitRequest.  # noqa: E501


        :return: The order_details of this InitRequest.  # noqa: E501
        :rtype: OrderDetails
        """
        return self._order_details

    @order_details.setter
    def order_details(self, order_details):
        """Sets the order_details of this InitRequest.


        :param order_details: The order_details of this InitRequest.  # noqa: E501
        :type: OrderDetails
        """

        self._order_details = order_details

    @property
    def security_code(self):
        """Gets the security_code of this InitRequest.  # noqa: E501


        :return: The security_code of this InitRequest.  # noqa: E501
        :rtype: SecurityCodeControl
        """
        return self._security_code

    @security_code.setter
    def security_code(self, security_code):
        """Sets the security_code of this InitRequest.


        :param security_code: The security_code of this InitRequest.  # noqa: E501
        :type: SecurityCodeControl
        """

        self._security_code = security_code

    @property
    def token_information(self):
        """Gets the token_information of this InitRequest.  # noqa: E501


        :return: The token_information of this InitRequest.  # noqa: E501
        :rtype: TokenInformation
        """
        return self._token_information

    @token_information.setter
    def token_information(self, token_information):
        """Sets the token_information of this InitRequest.


        :param token_information: The token_information of this InitRequest.  # noqa: E501
        :type: TokenInformation
        """

        self._token_information = token_information

    @property
    def card_icon_display_type(self):
        """Gets the card_icon_display_type of this InitRequest.  # noqa: E501


        :return: The card_icon_display_type of this InitRequest.  # noqa: E501
        :rtype: str
        """
        return self._card_icon_display_type

    @card_icon_display_type.setter
    def card_icon_display_type(self, card_icon_display_type):
        """Sets the card_icon_display_type of this InitRequest.


        :param card_icon_display_type: The card_icon_display_type of this InitRequest.  # noqa: E501
        :type: str
        """
        allowed_values = ["Unknown", "Dynamic", "Fixed", "Hidden"]  # noqa: E501
        if (self._configuration.client_side_validation and
                card_icon_display_type not in allowed_values):
            raise ValueError(
                "Invalid value for `card_icon_display_type` ({0}), must be one of {1}"  # noqa: E501
                .format(card_icon_display_type, allowed_values)
            )

        self._card_icon_display_type = card_icon_display_type

    @property
    def payment_type(self):
        """Gets the payment_type of this InitRequest.  # noqa: E501


        :return: The payment_type of this InitRequest.  # noqa: E501
        :rtype: str
        """
        return self._payment_type

    @payment_type.setter
    def payment_type(self, payment_type):
        """Sets the payment_type of this InitRequest.


        :param payment_type: The payment_type of this InitRequest.  # noqa: E501
        :type: str
        """
        allowed_values = ["Unknown", "Card", "CardOnFile", "GiftCard", "RewardCard", "GooglePay", "ApplePay", "PrivateLabelCard", "PayPal", "PayByBank"]  # noqa: E501
        if (self._configuration.client_side_validation and
                payment_type not in allowed_values):
            raise ValueError(
                "Invalid value for `payment_type` ({0}), must be one of {1}"  # noqa: E501
                .format(payment_type, allowed_values)
            )

        self._payment_type = payment_type

    @property
    def workflow_type(self):
        """Gets the workflow_type of this InitRequest.  # noqa: E501


        :return: The workflow_type of this InitRequest.  # noqa: E501
        :rtype: str
        """
        return self._workflow_type

    @workflow_type.setter
    def workflow_type(self, workflow_type):
        """Sets the workflow_type of this InitRequest.


        :param workflow_type: The workflow_type of this InitRequest.  # noqa: E501
        :type: str
        """
        allowed_values = ["Unknown", "Standard", "VerifyAuth", "MultiUse"]  # noqa: E501
        if (self._configuration.client_side_validation and
                workflow_type not in allowed_values):
            raise ValueError(
                "Invalid value for `workflow_type` ({0}), must be one of {1}"  # noqa: E501
                .format(workflow_type, allowed_values)
            )

        self._workflow_type = workflow_type

    @property
    def culture_code(self):
        """Gets the culture_code of this InitRequest.  # noqa: E501


        :return: The culture_code of this InitRequest.  # noqa: E501
        :rtype: str
        """
        return self._culture_code

    @culture_code.setter
    def culture_code(self, culture_code):
        """Sets the culture_code of this InitRequest.


        :param culture_code: The culture_code of this InitRequest.  # noqa: E501
        :type: str
        """

        self._culture_code = culture_code

    @property
    def es_key(self):
        """Gets the es_key of this InitRequest.  # noqa: E501


        :return: The es_key of this InitRequest.  # noqa: E501
        :rtype: str
        """
        return self._es_key

    @es_key.setter
    def es_key(self, es_key):
        """Sets the es_key of this InitRequest.


        :param es_key: The es_key of this InitRequest.  # noqa: E501
        :type: str
        """

        self._es_key = es_key

    @property
    def legal(self):
        """Gets the legal of this InitRequest.  # noqa: E501


        :return: The legal of this InitRequest.  # noqa: E501
        :rtype: LegalControl
        """
        return self._legal

    @legal.setter
    def legal(self, legal):
        """Sets the legal of this InitRequest.


        :param legal: The legal of this InitRequest.  # noqa: E501
        :type: LegalControl
        """

        self._legal = legal

    @property
    def store_id(self):
        """Gets the store_id of this InitRequest.  # noqa: E501


        :return: The store_id of this InitRequest.  # noqa: E501
        :rtype: str
        """
        return self._store_id

    @store_id.setter
    def store_id(self, store_id):
        """Sets the store_id of this InitRequest.


        :param store_id: The store_id of this InitRequest.  # noqa: E501
        :type: str
        """

        self._store_id = store_id

    @property
    def styles(self):
        """Gets the styles of this InitRequest.  # noqa: E501


        :return: The styles of this InitRequest.  # noqa: E501
        :rtype: str
        """
        return self._styles

    @styles.setter
    def styles(self, styles):
        """Sets the styles of this InitRequest.


        :param styles: The styles of this InitRequest.  # noqa: E501
        :type: str
        """

        self._styles = styles

    @property
    def terminal_id(self):
        """Gets the terminal_id of this InitRequest.  # noqa: E501


        :return: The terminal_id of this InitRequest.  # noqa: E501
        :rtype: str
        """
        return self._terminal_id

    @terminal_id.setter
    def terminal_id(self, terminal_id):
        """Sets the terminal_id of this InitRequest.


        :param terminal_id: The terminal_id of this InitRequest.  # noqa: E501
        :type: str
        """

        self._terminal_id = terminal_id

    @property
    def validation_message_type(self):
        """Gets the validation_message_type of this InitRequest.  # noqa: E501


        :return: The validation_message_type of this InitRequest.  # noqa: E501
        :rtype: str
        """
        return self._validation_message_type

    @validation_message_type.setter
    def validation_message_type(self, validation_message_type):
        """Sets the validation_message_type of this InitRequest.


        :param validation_message_type: The validation_message_type of this InitRequest.  # noqa: E501
        :type: str
        """
        allowed_values = ["Unknown", "None", "Feedback", "Tooltip"]  # noqa: E501
        if (self._configuration.client_side_validation and
                validation_message_type not in allowed_values):
            raise ValueError(
                "Invalid value for `validation_message_type` ({0}), must be one of {1}"  # noqa: E501
                .format(validation_message_type, allowed_values)
            )

        self._validation_message_type = validation_message_type

    @property
    def reference_id(self):
        """Gets the reference_id of this InitRequest.  # noqa: E501


        :return: The reference_id of this InitRequest.  # noqa: E501
        :rtype: str
        """
        return self._reference_id

    @reference_id.setter
    def reference_id(self, reference_id):
        """Sets the reference_id of this InitRequest.


        :param reference_id: The reference_id of this InitRequest.  # noqa: E501
        :type: str
        """

        self._reference_id = reference_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(InitRequest, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InitRequest):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, InitRequest):
            return True

        return self.to_dict() != other.to_dict()
