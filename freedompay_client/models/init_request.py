# coding: utf-8

"""
    Hosted Payment Controls API Documentation v1.5

    The API for Hosted Payment Controls. To access the swagger.json file open the following link: https://hpc.uat.freedompay.com/api/swagger/docs/v1.5

    The version of the OpenAPI document: v1.5
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel, Field, StrictStr, validator
from freedompay_client.models.button_control import ButtonControl
from freedompay_client.models.card_number_control import CardNumberControl
from freedompay_client.models.consumer_authentication import ConsumerAuthentication
from freedompay_client.models.dcc_options import DccOptions
from freedompay_client.models.expiration_date_control import ExpirationDateControl
from freedompay_client.models.fraud_check_options import FraudCheckOptions
from freedompay_client.models.legal_control import LegalControl
from freedompay_client.models.order_details import OrderDetails
from freedompay_client.models.pay_by_bank_init_request import PayByBankInitRequest
from freedompay_client.models.pay_pal_init_request import PayPalInitRequest
from freedompay_client.models.postal_code_control import PostalCodeControl
from freedompay_client.models.security_code_control import SecurityCodeControl
from freedompay_client.models.token_information import TokenInformation

class InitRequest(BaseModel):
    """
    InitRequest
    """
    button: Optional[ButtonControl] = Field(None, alias="Button")
    button_type: Optional[StrictStr] = Field(None, alias="ButtonType")
    pay_pal: Optional[PayPalInitRequest] = Field(None, alias="PayPal")
    postal_code: Optional[PostalCodeControl] = Field(None, alias="PostalCode")
    pay_by_bank: Optional[PayByBankInitRequest] = Field(None, alias="PayByBank")
    fraud_check: Optional[FraudCheckOptions] = Field(None, alias="FraudCheck")
    card_number: Optional[CardNumberControl] = Field(None, alias="CardNumber")
    consumer_authentication: Optional[ConsumerAuthentication] = Field(None, alias="ConsumerAuthentication")
    dcc: Optional[DccOptions] = Field(None, alias="Dcc")
    expiration_date: Optional[ExpirationDateControl] = Field(None, alias="ExpirationDate")
    order_details: Optional[OrderDetails] = Field(None, alias="OrderDetails")
    security_code: Optional[SecurityCodeControl] = Field(None, alias="SecurityCode")
    token_information: Optional[TokenInformation] = Field(None, alias="TokenInformation")
    card_icon_display_type: Optional[StrictStr] = Field(None, alias="CardIconDisplayType")
    payment_type: Optional[StrictStr] = Field(None, alias="PaymentType")
    workflow_type: Optional[StrictStr] = Field(None, alias="WorkflowType")
    culture_code: Optional[StrictStr] = Field(None, alias="CultureCode")
    es_key: Optional[StrictStr] = Field(None, alias="EsKey")
    legal: Optional[LegalControl] = Field(None, alias="Legal")
    store_id: Optional[StrictStr] = Field(None, alias="StoreId")
    styles: Optional[StrictStr] = Field(None, alias="Styles")
    terminal_id: Optional[StrictStr] = Field(None, alias="TerminalId")
    validation_message_type: Optional[StrictStr] = Field(None, alias="ValidationMessageType")
    reference_id: Optional[StrictStr] = Field(None, alias="ReferenceId")
    __properties = ["Button", "ButtonType", "PayPal", "PostalCode", "PayByBank", "FraudCheck", "CardNumber", "ConsumerAuthentication", "Dcc", "ExpirationDate", "OrderDetails", "SecurityCode", "TokenInformation", "CardIconDisplayType", "PaymentType", "WorkflowType", "CultureCode", "EsKey", "Legal", "StoreId", "Styles", "TerminalId", "ValidationMessageType", "ReferenceId"]

    @validator('button_type')
    def button_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in ('Unknown', 'Buy', 'BuyNow', 'Donate', 'Next', 'Pay', 'PayNow', 'PayWithCard', 'Save', 'CompleteYourReservation', 'PayByBank', 'SubmitToHotel', 'UpdateReservation', 'CompleteReservation'):
            raise ValueError("must be one of enum values ('Unknown', 'Buy', 'BuyNow', 'Donate', 'Next', 'Pay', 'PayNow', 'PayWithCard', 'Save', 'CompleteYourReservation', 'PayByBank', 'SubmitToHotel', 'UpdateReservation', 'CompleteReservation')")
        return value

    @validator('card_icon_display_type')
    def card_icon_display_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in ('Unknown', 'Dynamic', 'Fixed', 'Hidden'):
            raise ValueError("must be one of enum values ('Unknown', 'Dynamic', 'Fixed', 'Hidden')")
        return value

    @validator('payment_type')
    def payment_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in ('Unknown', 'Card', 'CardOnFile', 'GiftCard', 'RewardCard', 'GooglePay', 'ApplePay', 'PrivateLabelCard', 'PayPal', 'PayByBank'):
            raise ValueError("must be one of enum values ('Unknown', 'Card', 'CardOnFile', 'GiftCard', 'RewardCard', 'GooglePay', 'ApplePay', 'PrivateLabelCard', 'PayPal', 'PayByBank')")
        return value

    @validator('workflow_type')
    def workflow_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in ('Unknown', 'Standard', 'VerifyAuth', 'MultiUse'):
            raise ValueError("must be one of enum values ('Unknown', 'Standard', 'VerifyAuth', 'MultiUse')")
        return value

    @validator('validation_message_type')
    def validation_message_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in ('Unknown', 'None', 'Feedback', 'Tooltip'):
            raise ValueError("must be one of enum values ('Unknown', 'None', 'Feedback', 'Tooltip')")
        return value

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> InitRequest:
        """Create an instance of InitRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of button
        if self.button:
            _dict['Button'] = self.button.to_dict()
        # override the default output from pydantic by calling `to_dict()` of pay_pal
        if self.pay_pal:
            _dict['PayPal'] = self.pay_pal.to_dict()
        # override the default output from pydantic by calling `to_dict()` of postal_code
        if self.postal_code:
            _dict['PostalCode'] = self.postal_code.to_dict()
        # override the default output from pydantic by calling `to_dict()` of pay_by_bank
        if self.pay_by_bank:
            _dict['PayByBank'] = self.pay_by_bank.to_dict()
        # override the default output from pydantic by calling `to_dict()` of fraud_check
        if self.fraud_check:
            _dict['FraudCheck'] = self.fraud_check.to_dict()
        # override the default output from pydantic by calling `to_dict()` of card_number
        if self.card_number:
            _dict['CardNumber'] = self.card_number.to_dict()
        # override the default output from pydantic by calling `to_dict()` of consumer_authentication
        if self.consumer_authentication:
            _dict['ConsumerAuthentication'] = self.consumer_authentication.to_dict()
        # override the default output from pydantic by calling `to_dict()` of dcc
        if self.dcc:
            _dict['Dcc'] = self.dcc.to_dict()
        # override the default output from pydantic by calling `to_dict()` of expiration_date
        if self.expiration_date:
            _dict['ExpirationDate'] = self.expiration_date.to_dict()
        # override the default output from pydantic by calling `to_dict()` of order_details
        if self.order_details:
            _dict['OrderDetails'] = self.order_details.to_dict()
        # override the default output from pydantic by calling `to_dict()` of security_code
        if self.security_code:
            _dict['SecurityCode'] = self.security_code.to_dict()
        # override the default output from pydantic by calling `to_dict()` of token_information
        if self.token_information:
            _dict['TokenInformation'] = self.token_information.to_dict()
        # override the default output from pydantic by calling `to_dict()` of legal
        if self.legal:
            _dict['Legal'] = self.legal.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> InitRequest:
        """Create an instance of InitRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return InitRequest.parse_obj(obj)

        _obj = InitRequest.parse_obj({
            "button": ButtonControl.from_dict(obj.get("Button")) if obj.get("Button") is not None else None,
            "button_type": obj.get("ButtonType"),
            "pay_pal": PayPalInitRequest.from_dict(obj.get("PayPal")) if obj.get("PayPal") is not None else None,
            "postal_code": PostalCodeControl.from_dict(obj.get("PostalCode")) if obj.get("PostalCode") is not None else None,
            "pay_by_bank": PayByBankInitRequest.from_dict(obj.get("PayByBank")) if obj.get("PayByBank") is not None else None,
            "fraud_check": FraudCheckOptions.from_dict(obj.get("FraudCheck")) if obj.get("FraudCheck") is not None else None,
            "card_number": CardNumberControl.from_dict(obj.get("CardNumber")) if obj.get("CardNumber") is not None else None,
            "consumer_authentication": ConsumerAuthentication.from_dict(obj.get("ConsumerAuthentication")) if obj.get("ConsumerAuthentication") is not None else None,
            "dcc": DccOptions.from_dict(obj.get("Dcc")) if obj.get("Dcc") is not None else None,
            "expiration_date": ExpirationDateControl.from_dict(obj.get("ExpirationDate")) if obj.get("ExpirationDate") is not None else None,
            "order_details": OrderDetails.from_dict(obj.get("OrderDetails")) if obj.get("OrderDetails") is not None else None,
            "security_code": SecurityCodeControl.from_dict(obj.get("SecurityCode")) if obj.get("SecurityCode") is not None else None,
            "token_information": TokenInformation.from_dict(obj.get("TokenInformation")) if obj.get("TokenInformation") is not None else None,
            "card_icon_display_type": obj.get("CardIconDisplayType"),
            "payment_type": obj.get("PaymentType"),
            "workflow_type": obj.get("WorkflowType"),
            "culture_code": obj.get("CultureCode"),
            "es_key": obj.get("EsKey"),
            "legal": LegalControl.from_dict(obj.get("Legal")) if obj.get("Legal") is not None else None,
            "store_id": obj.get("StoreId"),
            "styles": obj.get("Styles"),
            "terminal_id": obj.get("TerminalId"),
            "validation_message_type": obj.get("ValidationMessageType"),
            "reference_id": obj.get("ReferenceId")
        })
        return _obj


