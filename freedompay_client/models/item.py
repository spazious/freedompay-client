# coding: utf-8

"""
    Hosted Payment Controls API Documentation v1.5

    The API for Hosted Payment Controls. To access the swagger.json file open the following link: https://hpc.uat.freedompay.com/api/swagger/docs/v1.5

    The version of the OpenAPI document: v1.5
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import List, Optional
from pydantic import BaseModel, Field, StrictStr, conlist
from freedompay_client.models.eid_detail import EIDDetail
from freedompay_client.models.tax_detail_item import TaxDetailItem

class Item(BaseModel):
    """
    Item
    """
    discount_amount: Optional[StrictStr] = Field(None, alias="discountAmount")
    discount_flag: Optional[StrictStr] = Field(None, alias="discountFlag")
    tax_included_flag: Optional[StrictStr] = Field(None, alias="taxIncludedFlag")
    product_code: Optional[StrictStr] = Field(None, alias="productCode")
    product_upc: Optional[StrictStr] = Field(None, alias="productUPC")
    product_sku: Optional[StrictStr] = Field(None, alias="productSKU")
    product_name: Optional[StrictStr] = Field(None, alias="productName")
    product_description: Optional[StrictStr] = Field(None, alias="productDescription")
    product_make: Optional[StrictStr] = Field(None, alias="productMake")
    product_model: Optional[StrictStr] = Field(None, alias="productModel")
    product_part_number: Optional[StrictStr] = Field(None, alias="productPartNumber")
    commodity_code: Optional[StrictStr] = Field(None, alias="commodityCode")
    product_year: Optional[StrictStr] = Field(None, alias="productYear")
    product_serial1: Optional[StrictStr] = Field(None, alias="productSerial1")
    product_serial2: Optional[StrictStr] = Field(None, alias="productSerial2")
    product_serial3: Optional[StrictStr] = Field(None, alias="productSerial3")
    customer_asset_id: Optional[StrictStr] = Field(None, alias="customerAssetId")
    category: Optional[StrictStr] = None
    sub_category: Optional[StrictStr] = Field(None, alias="subCategory")
    unit_price: Optional[StrictStr] = Field(None, alias="unitPrice")
    quantity: Optional[StrictStr] = None
    total_amount: Optional[StrictStr] = Field(None, alias="totalAmount")
    tax_amount: Optional[StrictStr] = Field(None, alias="taxAmount")
    promo_code: Optional[StrictStr] = Field(None, alias="promoCode")
    freight_amount: Optional[StrictStr] = Field(None, alias="freightAmount")
    unit_of_measure: Optional[StrictStr] = Field(None, alias="unitOfMeasure")
    sale_code: Optional[StrictStr] = Field(None, alias="saleCode")
    custom_format_id: Optional[StrictStr] = Field(None, alias="customFormatId")
    custom1: Optional[StrictStr] = None
    custom2: Optional[StrictStr] = None
    custom3: Optional[StrictStr] = None
    custom4: Optional[StrictStr] = None
    custom5: Optional[StrictStr] = None
    custom6: Optional[StrictStr] = None
    custom7: Optional[StrictStr] = None
    custom8: Optional[StrictStr] = None
    custom9: Optional[StrictStr] = None
    pay_alloc: Optional[StrictStr] = Field(None, alias="payAlloc")
    alloc_code: Optional[StrictStr] = Field(None, alias="allocCode")
    eid_indicator: Optional[StrictStr] = Field(None, alias="eidIndicator")
    orig_unit_price: Optional[StrictStr] = Field(None, alias="origUnitPrice")
    orig_total_amount: Optional[StrictStr] = Field(None, alias="origTotalAmount")
    eid_detail: Optional[conlist(EIDDetail)] = Field(None, alias="eidDetail")
    tax_detail: Optional[conlist(TaxDetailItem)] = Field(None, alias="taxDetail")
    id: Optional[StrictStr] = None
    tag: Optional[StrictStr] = None
    __properties = ["discountAmount", "discountFlag", "taxIncludedFlag", "productCode", "productUPC", "productSKU", "productName", "productDescription", "productMake", "productModel", "productPartNumber", "commodityCode", "productYear", "productSerial1", "productSerial2", "productSerial3", "customerAssetId", "category", "subCategory", "unitPrice", "quantity", "totalAmount", "taxAmount", "promoCode", "freightAmount", "unitOfMeasure", "saleCode", "customFormatId", "custom1", "custom2", "custom3", "custom4", "custom5", "custom6", "custom7", "custom8", "custom9", "payAlloc", "allocCode", "eidIndicator", "origUnitPrice", "origTotalAmount", "eidDetail", "taxDetail", "id", "tag"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Item:
        """Create an instance of Item from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of each item in eid_detail (list)
        _items = []
        if self.eid_detail:
            for _item in self.eid_detail:
                if _item:
                    _items.append(_item.to_dict())
            _dict['eidDetail'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in tax_detail (list)
        _items = []
        if self.tax_detail:
            for _item in self.tax_detail:
                if _item:
                    _items.append(_item.to_dict())
            _dict['taxDetail'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> Item:
        """Create an instance of Item from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return Item.parse_obj(obj)

        _obj = Item.parse_obj({
            "discount_amount": obj.get("discountAmount"),
            "discount_flag": obj.get("discountFlag"),
            "tax_included_flag": obj.get("taxIncludedFlag"),
            "product_code": obj.get("productCode"),
            "product_upc": obj.get("productUPC"),
            "product_sku": obj.get("productSKU"),
            "product_name": obj.get("productName"),
            "product_description": obj.get("productDescription"),
            "product_make": obj.get("productMake"),
            "product_model": obj.get("productModel"),
            "product_part_number": obj.get("productPartNumber"),
            "commodity_code": obj.get("commodityCode"),
            "product_year": obj.get("productYear"),
            "product_serial1": obj.get("productSerial1"),
            "product_serial2": obj.get("productSerial2"),
            "product_serial3": obj.get("productSerial3"),
            "customer_asset_id": obj.get("customerAssetId"),
            "category": obj.get("category"),
            "sub_category": obj.get("subCategory"),
            "unit_price": obj.get("unitPrice"),
            "quantity": obj.get("quantity"),
            "total_amount": obj.get("totalAmount"),
            "tax_amount": obj.get("taxAmount"),
            "promo_code": obj.get("promoCode"),
            "freight_amount": obj.get("freightAmount"),
            "unit_of_measure": obj.get("unitOfMeasure"),
            "sale_code": obj.get("saleCode"),
            "custom_format_id": obj.get("customFormatId"),
            "custom1": obj.get("custom1"),
            "custom2": obj.get("custom2"),
            "custom3": obj.get("custom3"),
            "custom4": obj.get("custom4"),
            "custom5": obj.get("custom5"),
            "custom6": obj.get("custom6"),
            "custom7": obj.get("custom7"),
            "custom8": obj.get("custom8"),
            "custom9": obj.get("custom9"),
            "pay_alloc": obj.get("payAlloc"),
            "alloc_code": obj.get("allocCode"),
            "eid_indicator": obj.get("eidIndicator"),
            "orig_unit_price": obj.get("origUnitPrice"),
            "orig_total_amount": obj.get("origTotalAmount"),
            "eid_detail": [EIDDetail.from_dict(_item) for _item in obj.get("eidDetail")] if obj.get("eidDetail") is not None else None,
            "tax_detail": [TaxDetailItem.from_dict(_item) for _item in obj.get("taxDetail")] if obj.get("taxDetail") is not None else None,
            "id": obj.get("id"),
            "tag": obj.get("tag")
        })
        return _obj


