# coding: utf-8

"""
    Hosted Payment Controls API Documentation v1.5

    The API for Hosted Payment Controls. To access the swagger.json file open the following link: https://hpc.uat.freedompay.com/api/swagger/docs/v1.5  # noqa: E501

    OpenAPI spec version: v1.5
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from freedompay_client.configuration import Configuration


class LegalControl(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'hide_checkbox': 'bool',
        'text_type': 'str'
    }

    attribute_map = {
        'hide_checkbox': 'HideCheckbox',
        'text_type': 'TextType'
    }

    def __init__(self, hide_checkbox=None, text_type=None, _configuration=None):  # noqa: E501
        """LegalControl - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._hide_checkbox = None
        self._text_type = None
        self.discriminator = None

        if hide_checkbox is not None:
            self.hide_checkbox = hide_checkbox
        if text_type is not None:
            self.text_type = text_type

    @property
    def hide_checkbox(self):
        """Gets the hide_checkbox of this LegalControl.  # noqa: E501


        :return: The hide_checkbox of this LegalControl.  # noqa: E501
        :rtype: bool
        """
        return self._hide_checkbox

    @hide_checkbox.setter
    def hide_checkbox(self, hide_checkbox):
        """Sets the hide_checkbox of this LegalControl.


        :param hide_checkbox: The hide_checkbox of this LegalControl.  # noqa: E501
        :type: bool
        """

        self._hide_checkbox = hide_checkbox

    @property
    def text_type(self):
        """Gets the text_type of this LegalControl.  # noqa: E501


        :return: The text_type of this LegalControl.  # noqa: E501
        :rtype: str
        """
        return self._text_type

    @text_type.setter
    def text_type(self, text_type):
        """Sets the text_type of this LegalControl.


        :param text_type: The text_type of this LegalControl.  # noqa: E501
        :type: str
        """
        allowed_values = ["Unknown", "DynamicWithCheckbox", "DynamicWithoutCheckbox", "DynamicThirdPartyWithCheckbox", "DynamicThirdPartyWithoutCheckbox"]  # noqa: E501
        if (self._configuration.client_side_validation and
                text_type not in allowed_values):
            raise ValueError(
                "Invalid value for `text_type` ({0}), must be one of {1}"  # noqa: E501
                .format(text_type, allowed_values)
            )

        self._text_type = text_type

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(LegalControl, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, LegalControl):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, LegalControl):
            return True

        return self.to_dict() != other.to_dict()
