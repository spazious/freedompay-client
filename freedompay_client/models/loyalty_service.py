# coding: utf-8

"""
    Hosted Payment Controls API Documentation v1.5

    The API for Hosted Payment Controls. To access the swagger.json file open the following link: https://hpc.uat.freedompay.com/api/swagger/docs/v1.5  # noqa: E501

    OpenAPI spec version: v1.5
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from freedompay_client.configuration import Configuration


class LoyaltyService(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'card_type': 'str',
        'card_number': 'str',
        'app_id': 'str',
        'id_block': 'str',
        'id_ksn': 'str',
        'run': 'str'
    }

    attribute_map = {
        'card_type': 'cardType',
        'card_number': 'cardNumber',
        'app_id': 'appId',
        'id_block': 'idBlock',
        'id_ksn': 'idKsn',
        'run': 'run'
    }

    def __init__(self, card_type=None, card_number=None, app_id=None, id_block=None, id_ksn=None, run=None, _configuration=None):  # noqa: E501
        """LoyaltyService - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._card_type = None
        self._card_number = None
        self._app_id = None
        self._id_block = None
        self._id_ksn = None
        self._run = None
        self.discriminator = None

        if card_type is not None:
            self.card_type = card_type
        if card_number is not None:
            self.card_number = card_number
        if app_id is not None:
            self.app_id = app_id
        if id_block is not None:
            self.id_block = id_block
        if id_ksn is not None:
            self.id_ksn = id_ksn
        if run is not None:
            self.run = run

    @property
    def card_type(self):
        """Gets the card_type of this LoyaltyService.  # noqa: E501


        :return: The card_type of this LoyaltyService.  # noqa: E501
        :rtype: str
        """
        return self._card_type

    @card_type.setter
    def card_type(self, card_type):
        """Sets the card_type of this LoyaltyService.


        :param card_type: The card_type of this LoyaltyService.  # noqa: E501
        :type: str
        """

        self._card_type = card_type

    @property
    def card_number(self):
        """Gets the card_number of this LoyaltyService.  # noqa: E501


        :return: The card_number of this LoyaltyService.  # noqa: E501
        :rtype: str
        """
        return self._card_number

    @card_number.setter
    def card_number(self, card_number):
        """Sets the card_number of this LoyaltyService.


        :param card_number: The card_number of this LoyaltyService.  # noqa: E501
        :type: str
        """

        self._card_number = card_number

    @property
    def app_id(self):
        """Gets the app_id of this LoyaltyService.  # noqa: E501


        :return: The app_id of this LoyaltyService.  # noqa: E501
        :rtype: str
        """
        return self._app_id

    @app_id.setter
    def app_id(self, app_id):
        """Sets the app_id of this LoyaltyService.


        :param app_id: The app_id of this LoyaltyService.  # noqa: E501
        :type: str
        """

        self._app_id = app_id

    @property
    def id_block(self):
        """Gets the id_block of this LoyaltyService.  # noqa: E501


        :return: The id_block of this LoyaltyService.  # noqa: E501
        :rtype: str
        """
        return self._id_block

    @id_block.setter
    def id_block(self, id_block):
        """Sets the id_block of this LoyaltyService.


        :param id_block: The id_block of this LoyaltyService.  # noqa: E501
        :type: str
        """

        self._id_block = id_block

    @property
    def id_ksn(self):
        """Gets the id_ksn of this LoyaltyService.  # noqa: E501


        :return: The id_ksn of this LoyaltyService.  # noqa: E501
        :rtype: str
        """
        return self._id_ksn

    @id_ksn.setter
    def id_ksn(self, id_ksn):
        """Sets the id_ksn of this LoyaltyService.


        :param id_ksn: The id_ksn of this LoyaltyService.  # noqa: E501
        :type: str
        """

        self._id_ksn = id_ksn

    @property
    def run(self):
        """Gets the run of this LoyaltyService.  # noqa: E501


        :return: The run of this LoyaltyService.  # noqa: E501
        :rtype: str
        """
        return self._run

    @run.setter
    def run(self, run):
        """Sets the run of this LoyaltyService.


        :param run: The run of this LoyaltyService.  # noqa: E501
        :type: str
        """

        self._run = run

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(LoyaltyService, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, LoyaltyService):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, LoyaltyService):
            return True

        return self.to_dict() != other.to_dict()
