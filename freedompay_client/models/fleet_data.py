# coding: utf-8

"""
    Hosted Payment Controls API Documentation v1.5

    The API for Hosted Payment Controls. To access the swagger.json file open the following link: https://hpc.uat.freedompay.com/api/swagger/docs/v1.5  # noqa: E501

    OpenAPI spec version: v1.5
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from freedompay_client.configuration import Configuration


class FleetData(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'user_id': 'str',
        'vehicle_id': 'str',
        'vehicle_tag': 'str',
        'driver_id': 'str',
        'odo': 'str',
        'dl_num': 'str',
        'dl_state': 'str',
        'dl_name': 'str',
        'po_number': 'str',
        'invoice_num': 'str',
        'trip_num': 'str',
        'unit_num': 'str',
        'trailer_hours': 'str',
        'dob': 'str',
        'zip': 'str',
        'misc1': 'str',
        'misc2': 'str',
        'cash_back': 'str',
        'job_num': 'str',
        'maint_id': 'str',
        'dept': 'str',
        'vin': 'str',
        'tractor_num': 'str',
        'hubo': 'str',
        'trailer_num': 'str',
        'custom1': 'str',
        'custom2': 'str'
    }

    attribute_map = {
        'user_id': 'userId',
        'vehicle_id': 'vehicleId',
        'vehicle_tag': 'vehicleTag',
        'driver_id': 'driverId',
        'odo': 'odo',
        'dl_num': 'dlNum',
        'dl_state': 'dlState',
        'dl_name': 'dlName',
        'po_number': 'poNumber',
        'invoice_num': 'invoiceNum',
        'trip_num': 'tripNum',
        'unit_num': 'unitNum',
        'trailer_hours': 'trailerHours',
        'dob': 'dob',
        'zip': 'zip',
        'misc1': 'misc1',
        'misc2': 'misc2',
        'cash_back': 'cashBack',
        'job_num': 'jobNum',
        'maint_id': 'maintId',
        'dept': 'dept',
        'vin': 'vin',
        'tractor_num': 'tractorNum',
        'hubo': 'hubo',
        'trailer_num': 'trailerNum',
        'custom1': 'custom1',
        'custom2': 'custom2'
    }

    def __init__(self, user_id=None, vehicle_id=None, vehicle_tag=None, driver_id=None, odo=None, dl_num=None, dl_state=None, dl_name=None, po_number=None, invoice_num=None, trip_num=None, unit_num=None, trailer_hours=None, dob=None, zip=None, misc1=None, misc2=None, cash_back=None, job_num=None, maint_id=None, dept=None, vin=None, tractor_num=None, hubo=None, trailer_num=None, custom1=None, custom2=None, _configuration=None):  # noqa: E501
        """FleetData - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._user_id = None
        self._vehicle_id = None
        self._vehicle_tag = None
        self._driver_id = None
        self._odo = None
        self._dl_num = None
        self._dl_state = None
        self._dl_name = None
        self._po_number = None
        self._invoice_num = None
        self._trip_num = None
        self._unit_num = None
        self._trailer_hours = None
        self._dob = None
        self._zip = None
        self._misc1 = None
        self._misc2 = None
        self._cash_back = None
        self._job_num = None
        self._maint_id = None
        self._dept = None
        self._vin = None
        self._tractor_num = None
        self._hubo = None
        self._trailer_num = None
        self._custom1 = None
        self._custom2 = None
        self.discriminator = None

        if user_id is not None:
            self.user_id = user_id
        if vehicle_id is not None:
            self.vehicle_id = vehicle_id
        if vehicle_tag is not None:
            self.vehicle_tag = vehicle_tag
        if driver_id is not None:
            self.driver_id = driver_id
        if odo is not None:
            self.odo = odo
        if dl_num is not None:
            self.dl_num = dl_num
        if dl_state is not None:
            self.dl_state = dl_state
        if dl_name is not None:
            self.dl_name = dl_name
        if po_number is not None:
            self.po_number = po_number
        if invoice_num is not None:
            self.invoice_num = invoice_num
        if trip_num is not None:
            self.trip_num = trip_num
        if unit_num is not None:
            self.unit_num = unit_num
        if trailer_hours is not None:
            self.trailer_hours = trailer_hours
        if dob is not None:
            self.dob = dob
        if zip is not None:
            self.zip = zip
        if misc1 is not None:
            self.misc1 = misc1
        if misc2 is not None:
            self.misc2 = misc2
        if cash_back is not None:
            self.cash_back = cash_back
        if job_num is not None:
            self.job_num = job_num
        if maint_id is not None:
            self.maint_id = maint_id
        if dept is not None:
            self.dept = dept
        if vin is not None:
            self.vin = vin
        if tractor_num is not None:
            self.tractor_num = tractor_num
        if hubo is not None:
            self.hubo = hubo
        if trailer_num is not None:
            self.trailer_num = trailer_num
        if custom1 is not None:
            self.custom1 = custom1
        if custom2 is not None:
            self.custom2 = custom2

    @property
    def user_id(self):
        """Gets the user_id of this FleetData.  # noqa: E501


        :return: The user_id of this FleetData.  # noqa: E501
        :rtype: str
        """
        return self._user_id

    @user_id.setter
    def user_id(self, user_id):
        """Sets the user_id of this FleetData.


        :param user_id: The user_id of this FleetData.  # noqa: E501
        :type: str
        """

        self._user_id = user_id

    @property
    def vehicle_id(self):
        """Gets the vehicle_id of this FleetData.  # noqa: E501


        :return: The vehicle_id of this FleetData.  # noqa: E501
        :rtype: str
        """
        return self._vehicle_id

    @vehicle_id.setter
    def vehicle_id(self, vehicle_id):
        """Sets the vehicle_id of this FleetData.


        :param vehicle_id: The vehicle_id of this FleetData.  # noqa: E501
        :type: str
        """

        self._vehicle_id = vehicle_id

    @property
    def vehicle_tag(self):
        """Gets the vehicle_tag of this FleetData.  # noqa: E501


        :return: The vehicle_tag of this FleetData.  # noqa: E501
        :rtype: str
        """
        return self._vehicle_tag

    @vehicle_tag.setter
    def vehicle_tag(self, vehicle_tag):
        """Sets the vehicle_tag of this FleetData.


        :param vehicle_tag: The vehicle_tag of this FleetData.  # noqa: E501
        :type: str
        """

        self._vehicle_tag = vehicle_tag

    @property
    def driver_id(self):
        """Gets the driver_id of this FleetData.  # noqa: E501


        :return: The driver_id of this FleetData.  # noqa: E501
        :rtype: str
        """
        return self._driver_id

    @driver_id.setter
    def driver_id(self, driver_id):
        """Sets the driver_id of this FleetData.


        :param driver_id: The driver_id of this FleetData.  # noqa: E501
        :type: str
        """

        self._driver_id = driver_id

    @property
    def odo(self):
        """Gets the odo of this FleetData.  # noqa: E501


        :return: The odo of this FleetData.  # noqa: E501
        :rtype: str
        """
        return self._odo

    @odo.setter
    def odo(self, odo):
        """Sets the odo of this FleetData.


        :param odo: The odo of this FleetData.  # noqa: E501
        :type: str
        """

        self._odo = odo

    @property
    def dl_num(self):
        """Gets the dl_num of this FleetData.  # noqa: E501


        :return: The dl_num of this FleetData.  # noqa: E501
        :rtype: str
        """
        return self._dl_num

    @dl_num.setter
    def dl_num(self, dl_num):
        """Sets the dl_num of this FleetData.


        :param dl_num: The dl_num of this FleetData.  # noqa: E501
        :type: str
        """

        self._dl_num = dl_num

    @property
    def dl_state(self):
        """Gets the dl_state of this FleetData.  # noqa: E501


        :return: The dl_state of this FleetData.  # noqa: E501
        :rtype: str
        """
        return self._dl_state

    @dl_state.setter
    def dl_state(self, dl_state):
        """Sets the dl_state of this FleetData.


        :param dl_state: The dl_state of this FleetData.  # noqa: E501
        :type: str
        """

        self._dl_state = dl_state

    @property
    def dl_name(self):
        """Gets the dl_name of this FleetData.  # noqa: E501


        :return: The dl_name of this FleetData.  # noqa: E501
        :rtype: str
        """
        return self._dl_name

    @dl_name.setter
    def dl_name(self, dl_name):
        """Sets the dl_name of this FleetData.


        :param dl_name: The dl_name of this FleetData.  # noqa: E501
        :type: str
        """

        self._dl_name = dl_name

    @property
    def po_number(self):
        """Gets the po_number of this FleetData.  # noqa: E501


        :return: The po_number of this FleetData.  # noqa: E501
        :rtype: str
        """
        return self._po_number

    @po_number.setter
    def po_number(self, po_number):
        """Sets the po_number of this FleetData.


        :param po_number: The po_number of this FleetData.  # noqa: E501
        :type: str
        """

        self._po_number = po_number

    @property
    def invoice_num(self):
        """Gets the invoice_num of this FleetData.  # noqa: E501


        :return: The invoice_num of this FleetData.  # noqa: E501
        :rtype: str
        """
        return self._invoice_num

    @invoice_num.setter
    def invoice_num(self, invoice_num):
        """Sets the invoice_num of this FleetData.


        :param invoice_num: The invoice_num of this FleetData.  # noqa: E501
        :type: str
        """

        self._invoice_num = invoice_num

    @property
    def trip_num(self):
        """Gets the trip_num of this FleetData.  # noqa: E501


        :return: The trip_num of this FleetData.  # noqa: E501
        :rtype: str
        """
        return self._trip_num

    @trip_num.setter
    def trip_num(self, trip_num):
        """Sets the trip_num of this FleetData.


        :param trip_num: The trip_num of this FleetData.  # noqa: E501
        :type: str
        """

        self._trip_num = trip_num

    @property
    def unit_num(self):
        """Gets the unit_num of this FleetData.  # noqa: E501


        :return: The unit_num of this FleetData.  # noqa: E501
        :rtype: str
        """
        return self._unit_num

    @unit_num.setter
    def unit_num(self, unit_num):
        """Sets the unit_num of this FleetData.


        :param unit_num: The unit_num of this FleetData.  # noqa: E501
        :type: str
        """

        self._unit_num = unit_num

    @property
    def trailer_hours(self):
        """Gets the trailer_hours of this FleetData.  # noqa: E501


        :return: The trailer_hours of this FleetData.  # noqa: E501
        :rtype: str
        """
        return self._trailer_hours

    @trailer_hours.setter
    def trailer_hours(self, trailer_hours):
        """Sets the trailer_hours of this FleetData.


        :param trailer_hours: The trailer_hours of this FleetData.  # noqa: E501
        :type: str
        """

        self._trailer_hours = trailer_hours

    @property
    def dob(self):
        """Gets the dob of this FleetData.  # noqa: E501


        :return: The dob of this FleetData.  # noqa: E501
        :rtype: str
        """
        return self._dob

    @dob.setter
    def dob(self, dob):
        """Sets the dob of this FleetData.


        :param dob: The dob of this FleetData.  # noqa: E501
        :type: str
        """

        self._dob = dob

    @property
    def zip(self):
        """Gets the zip of this FleetData.  # noqa: E501


        :return: The zip of this FleetData.  # noqa: E501
        :rtype: str
        """
        return self._zip

    @zip.setter
    def zip(self, zip):
        """Sets the zip of this FleetData.


        :param zip: The zip of this FleetData.  # noqa: E501
        :type: str
        """

        self._zip = zip

    @property
    def misc1(self):
        """Gets the misc1 of this FleetData.  # noqa: E501


        :return: The misc1 of this FleetData.  # noqa: E501
        :rtype: str
        """
        return self._misc1

    @misc1.setter
    def misc1(self, misc1):
        """Sets the misc1 of this FleetData.


        :param misc1: The misc1 of this FleetData.  # noqa: E501
        :type: str
        """

        self._misc1 = misc1

    @property
    def misc2(self):
        """Gets the misc2 of this FleetData.  # noqa: E501


        :return: The misc2 of this FleetData.  # noqa: E501
        :rtype: str
        """
        return self._misc2

    @misc2.setter
    def misc2(self, misc2):
        """Sets the misc2 of this FleetData.


        :param misc2: The misc2 of this FleetData.  # noqa: E501
        :type: str
        """

        self._misc2 = misc2

    @property
    def cash_back(self):
        """Gets the cash_back of this FleetData.  # noqa: E501


        :return: The cash_back of this FleetData.  # noqa: E501
        :rtype: str
        """
        return self._cash_back

    @cash_back.setter
    def cash_back(self, cash_back):
        """Sets the cash_back of this FleetData.


        :param cash_back: The cash_back of this FleetData.  # noqa: E501
        :type: str
        """

        self._cash_back = cash_back

    @property
    def job_num(self):
        """Gets the job_num of this FleetData.  # noqa: E501


        :return: The job_num of this FleetData.  # noqa: E501
        :rtype: str
        """
        return self._job_num

    @job_num.setter
    def job_num(self, job_num):
        """Sets the job_num of this FleetData.


        :param job_num: The job_num of this FleetData.  # noqa: E501
        :type: str
        """

        self._job_num = job_num

    @property
    def maint_id(self):
        """Gets the maint_id of this FleetData.  # noqa: E501


        :return: The maint_id of this FleetData.  # noqa: E501
        :rtype: str
        """
        return self._maint_id

    @maint_id.setter
    def maint_id(self, maint_id):
        """Sets the maint_id of this FleetData.


        :param maint_id: The maint_id of this FleetData.  # noqa: E501
        :type: str
        """

        self._maint_id = maint_id

    @property
    def dept(self):
        """Gets the dept of this FleetData.  # noqa: E501


        :return: The dept of this FleetData.  # noqa: E501
        :rtype: str
        """
        return self._dept

    @dept.setter
    def dept(self, dept):
        """Sets the dept of this FleetData.


        :param dept: The dept of this FleetData.  # noqa: E501
        :type: str
        """

        self._dept = dept

    @property
    def vin(self):
        """Gets the vin of this FleetData.  # noqa: E501


        :return: The vin of this FleetData.  # noqa: E501
        :rtype: str
        """
        return self._vin

    @vin.setter
    def vin(self, vin):
        """Sets the vin of this FleetData.


        :param vin: The vin of this FleetData.  # noqa: E501
        :type: str
        """

        self._vin = vin

    @property
    def tractor_num(self):
        """Gets the tractor_num of this FleetData.  # noqa: E501


        :return: The tractor_num of this FleetData.  # noqa: E501
        :rtype: str
        """
        return self._tractor_num

    @tractor_num.setter
    def tractor_num(self, tractor_num):
        """Sets the tractor_num of this FleetData.


        :param tractor_num: The tractor_num of this FleetData.  # noqa: E501
        :type: str
        """

        self._tractor_num = tractor_num

    @property
    def hubo(self):
        """Gets the hubo of this FleetData.  # noqa: E501


        :return: The hubo of this FleetData.  # noqa: E501
        :rtype: str
        """
        return self._hubo

    @hubo.setter
    def hubo(self, hubo):
        """Sets the hubo of this FleetData.


        :param hubo: The hubo of this FleetData.  # noqa: E501
        :type: str
        """

        self._hubo = hubo

    @property
    def trailer_num(self):
        """Gets the trailer_num of this FleetData.  # noqa: E501


        :return: The trailer_num of this FleetData.  # noqa: E501
        :rtype: str
        """
        return self._trailer_num

    @trailer_num.setter
    def trailer_num(self, trailer_num):
        """Sets the trailer_num of this FleetData.


        :param trailer_num: The trailer_num of this FleetData.  # noqa: E501
        :type: str
        """

        self._trailer_num = trailer_num

    @property
    def custom1(self):
        """Gets the custom1 of this FleetData.  # noqa: E501


        :return: The custom1 of this FleetData.  # noqa: E501
        :rtype: str
        """
        return self._custom1

    @custom1.setter
    def custom1(self, custom1):
        """Sets the custom1 of this FleetData.


        :param custom1: The custom1 of this FleetData.  # noqa: E501
        :type: str
        """

        self._custom1 = custom1

    @property
    def custom2(self):
        """Gets the custom2 of this FleetData.  # noqa: E501


        :return: The custom2 of this FleetData.  # noqa: E501
        :rtype: str
        """
        return self._custom2

    @custom2.setter
    def custom2(self, custom2):
        """Sets the custom2 of this FleetData.


        :param custom2: The custom2 of this FleetData.  # noqa: E501
        :type: str
        """

        self._custom2 = custom2

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(FleetData, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, FleetData):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, FleetData):
            return True

        return self.to_dict() != other.to_dict()
