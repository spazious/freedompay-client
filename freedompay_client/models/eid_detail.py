# coding: utf-8

"""
    Hosted Payment Controls API Documentation v1.5

    The API for Hosted Payment Controls. To access the swagger.json file open the following link: https://hpc.uat.freedompay.com/api/swagger/docs/v1.5  # noqa: E501

    OpenAPI spec version: v1.5
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from freedompay_client.configuration import Configuration


class EIDDetail(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'discount_key': 'str',
        'code': 'str',
        'qty': 'str',
        'offset': 'str',
        'total_amount': 'str'
    }

    attribute_map = {
        'discount_key': 'discountKey',
        'code': 'code',
        'qty': 'qty',
        'offset': 'offset',
        'total_amount': 'totalAmount'
    }

    def __init__(self, discount_key=None, code=None, qty=None, offset=None, total_amount=None, _configuration=None):  # noqa: E501
        """EIDDetail - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._discount_key = None
        self._code = None
        self._qty = None
        self._offset = None
        self._total_amount = None
        self.discriminator = None

        if discount_key is not None:
            self.discount_key = discount_key
        if code is not None:
            self.code = code
        if qty is not None:
            self.qty = qty
        if offset is not None:
            self.offset = offset
        if total_amount is not None:
            self.total_amount = total_amount

    @property
    def discount_key(self):
        """Gets the discount_key of this EIDDetail.  # noqa: E501


        :return: The discount_key of this EIDDetail.  # noqa: E501
        :rtype: str
        """
        return self._discount_key

    @discount_key.setter
    def discount_key(self, discount_key):
        """Sets the discount_key of this EIDDetail.


        :param discount_key: The discount_key of this EIDDetail.  # noqa: E501
        :type: str
        """

        self._discount_key = discount_key

    @property
    def code(self):
        """Gets the code of this EIDDetail.  # noqa: E501


        :return: The code of this EIDDetail.  # noqa: E501
        :rtype: str
        """
        return self._code

    @code.setter
    def code(self, code):
        """Sets the code of this EIDDetail.


        :param code: The code of this EIDDetail.  # noqa: E501
        :type: str
        """

        self._code = code

    @property
    def qty(self):
        """Gets the qty of this EIDDetail.  # noqa: E501


        :return: The qty of this EIDDetail.  # noqa: E501
        :rtype: str
        """
        return self._qty

    @qty.setter
    def qty(self, qty):
        """Sets the qty of this EIDDetail.


        :param qty: The qty of this EIDDetail.  # noqa: E501
        :type: str
        """

        self._qty = qty

    @property
    def offset(self):
        """Gets the offset of this EIDDetail.  # noqa: E501


        :return: The offset of this EIDDetail.  # noqa: E501
        :rtype: str
        """
        return self._offset

    @offset.setter
    def offset(self, offset):
        """Sets the offset of this EIDDetail.


        :param offset: The offset of this EIDDetail.  # noqa: E501
        :type: str
        """

        self._offset = offset

    @property
    def total_amount(self):
        """Gets the total_amount of this EIDDetail.  # noqa: E501


        :return: The total_amount of this EIDDetail.  # noqa: E501
        :rtype: str
        """
        return self._total_amount

    @total_amount.setter
    def total_amount(self, total_amount):
        """Sets the total_amount of this EIDDetail.


        :param total_amount: The total_amount of this EIDDetail.  # noqa: E501
        :type: str
        """

        self._total_amount = total_amount

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(EIDDetail, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, EIDDetail):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, EIDDetail):
            return True

        return self.to_dict() != other.to_dict()
