# coding: utf-8

"""
    Hosted Payment Controls API Documentation v1.5

    The API for Hosted Payment Controls. To access the swagger.json file open the following link: https://hpc.uat.freedompay.com/api/swagger/docs/v1.5  # noqa: E501

    OpenAPI spec version: v1.5
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from freedompay_client.configuration import Configuration


class CCAuthService(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'trans_type': 'str',
        'cof_indicator': 'str',
        'cof_compliance_data': 'str',
        'allow_partial': 'str',
        'return_balance': 'str',
        'auth_type': 'str',
        'verbal_auth_code': 'str',
        'ecom3ds': 'str',
        'cavv': 'str',
        'xid': 'str',
        'orig_auth_amount': 'str',
        'enable_avs': 'str',
        'offline': 'str',
        'offline_code': 'str',
        'estimated': 'str',
        'installment_number': 'str',
        'installment_count': 'str',
        'auth3dsformat': 'str',
        'auth3dsjson': 'str',
        'sca_exemptions': 'str',
        'sca_upgrade': 'str',
        'request_par': 'str',
        'bill_payment': 'str',
        'recurring': 'str',
        'commerce_indicator': 'str',
        'partial_payment_id': 'str',
        'last_payment_flag': 'str',
        'industry_datatype': 'str',
        'run': 'str'
    }

    attribute_map = {
        'trans_type': 'transType',
        'cof_indicator': 'cofIndicator',
        'cof_compliance_data': 'cofComplianceData',
        'allow_partial': 'allowPartial',
        'return_balance': 'returnBalance',
        'auth_type': 'authType',
        'verbal_auth_code': 'verbalAuthCode',
        'ecom3ds': 'ecom3ds',
        'cavv': 'cavv',
        'xid': 'xid',
        'orig_auth_amount': 'origAuthAmount',
        'enable_avs': 'enableAVS',
        'offline': 'offline',
        'offline_code': 'offlineCode',
        'estimated': 'estimated',
        'installment_number': 'installmentNumber',
        'installment_count': 'installmentCount',
        'auth3dsformat': 'auth3dsformat',
        'auth3dsjson': 'auth3dsjson',
        'sca_exemptions': 'scaExemptions',
        'sca_upgrade': 'scaUpgrade',
        'request_par': 'requestPar',
        'bill_payment': 'billPayment',
        'recurring': 'recurring',
        'commerce_indicator': 'commerceIndicator',
        'partial_payment_id': 'partialPaymentId',
        'last_payment_flag': 'lastPaymentFlag',
        'industry_datatype': 'industryDatatype',
        'run': 'run'
    }

    def __init__(self, trans_type=None, cof_indicator=None, cof_compliance_data=None, allow_partial=None, return_balance=None, auth_type=None, verbal_auth_code=None, ecom3ds=None, cavv=None, xid=None, orig_auth_amount=None, enable_avs=None, offline=None, offline_code=None, estimated=None, installment_number=None, installment_count=None, auth3dsformat=None, auth3dsjson=None, sca_exemptions=None, sca_upgrade=None, request_par=None, bill_payment=None, recurring=None, commerce_indicator=None, partial_payment_id=None, last_payment_flag=None, industry_datatype=None, run=None, _configuration=None):  # noqa: E501
        """CCAuthService - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._trans_type = None
        self._cof_indicator = None
        self._cof_compliance_data = None
        self._allow_partial = None
        self._return_balance = None
        self._auth_type = None
        self._verbal_auth_code = None
        self._ecom3ds = None
        self._cavv = None
        self._xid = None
        self._orig_auth_amount = None
        self._enable_avs = None
        self._offline = None
        self._offline_code = None
        self._estimated = None
        self._installment_number = None
        self._installment_count = None
        self._auth3dsformat = None
        self._auth3dsjson = None
        self._sca_exemptions = None
        self._sca_upgrade = None
        self._request_par = None
        self._bill_payment = None
        self._recurring = None
        self._commerce_indicator = None
        self._partial_payment_id = None
        self._last_payment_flag = None
        self._industry_datatype = None
        self._run = None
        self.discriminator = None

        if trans_type is not None:
            self.trans_type = trans_type
        if cof_indicator is not None:
            self.cof_indicator = cof_indicator
        if cof_compliance_data is not None:
            self.cof_compliance_data = cof_compliance_data
        if allow_partial is not None:
            self.allow_partial = allow_partial
        if return_balance is not None:
            self.return_balance = return_balance
        if auth_type is not None:
            self.auth_type = auth_type
        if verbal_auth_code is not None:
            self.verbal_auth_code = verbal_auth_code
        if ecom3ds is not None:
            self.ecom3ds = ecom3ds
        if cavv is not None:
            self.cavv = cavv
        if xid is not None:
            self.xid = xid
        if orig_auth_amount is not None:
            self.orig_auth_amount = orig_auth_amount
        if enable_avs is not None:
            self.enable_avs = enable_avs
        if offline is not None:
            self.offline = offline
        if offline_code is not None:
            self.offline_code = offline_code
        if estimated is not None:
            self.estimated = estimated
        if installment_number is not None:
            self.installment_number = installment_number
        if installment_count is not None:
            self.installment_count = installment_count
        if auth3dsformat is not None:
            self.auth3dsformat = auth3dsformat
        if auth3dsjson is not None:
            self.auth3dsjson = auth3dsjson
        if sca_exemptions is not None:
            self.sca_exemptions = sca_exemptions
        if sca_upgrade is not None:
            self.sca_upgrade = sca_upgrade
        if request_par is not None:
            self.request_par = request_par
        if bill_payment is not None:
            self.bill_payment = bill_payment
        if recurring is not None:
            self.recurring = recurring
        if commerce_indicator is not None:
            self.commerce_indicator = commerce_indicator
        if partial_payment_id is not None:
            self.partial_payment_id = partial_payment_id
        if last_payment_flag is not None:
            self.last_payment_flag = last_payment_flag
        if industry_datatype is not None:
            self.industry_datatype = industry_datatype
        if run is not None:
            self.run = run

    @property
    def trans_type(self):
        """Gets the trans_type of this CCAuthService.  # noqa: E501


        :return: The trans_type of this CCAuthService.  # noqa: E501
        :rtype: str
        """
        return self._trans_type

    @trans_type.setter
    def trans_type(self, trans_type):
        """Sets the trans_type of this CCAuthService.


        :param trans_type: The trans_type of this CCAuthService.  # noqa: E501
        :type: str
        """

        self._trans_type = trans_type

    @property
    def cof_indicator(self):
        """Gets the cof_indicator of this CCAuthService.  # noqa: E501


        :return: The cof_indicator of this CCAuthService.  # noqa: E501
        :rtype: str
        """
        return self._cof_indicator

    @cof_indicator.setter
    def cof_indicator(self, cof_indicator):
        """Sets the cof_indicator of this CCAuthService.


        :param cof_indicator: The cof_indicator of this CCAuthService.  # noqa: E501
        :type: str
        """

        self._cof_indicator = cof_indicator

    @property
    def cof_compliance_data(self):
        """Gets the cof_compliance_data of this CCAuthService.  # noqa: E501


        :return: The cof_compliance_data of this CCAuthService.  # noqa: E501
        :rtype: str
        """
        return self._cof_compliance_data

    @cof_compliance_data.setter
    def cof_compliance_data(self, cof_compliance_data):
        """Sets the cof_compliance_data of this CCAuthService.


        :param cof_compliance_data: The cof_compliance_data of this CCAuthService.  # noqa: E501
        :type: str
        """

        self._cof_compliance_data = cof_compliance_data

    @property
    def allow_partial(self):
        """Gets the allow_partial of this CCAuthService.  # noqa: E501


        :return: The allow_partial of this CCAuthService.  # noqa: E501
        :rtype: str
        """
        return self._allow_partial

    @allow_partial.setter
    def allow_partial(self, allow_partial):
        """Sets the allow_partial of this CCAuthService.


        :param allow_partial: The allow_partial of this CCAuthService.  # noqa: E501
        :type: str
        """

        self._allow_partial = allow_partial

    @property
    def return_balance(self):
        """Gets the return_balance of this CCAuthService.  # noqa: E501


        :return: The return_balance of this CCAuthService.  # noqa: E501
        :rtype: str
        """
        return self._return_balance

    @return_balance.setter
    def return_balance(self, return_balance):
        """Sets the return_balance of this CCAuthService.


        :param return_balance: The return_balance of this CCAuthService.  # noqa: E501
        :type: str
        """

        self._return_balance = return_balance

    @property
    def auth_type(self):
        """Gets the auth_type of this CCAuthService.  # noqa: E501


        :return: The auth_type of this CCAuthService.  # noqa: E501
        :rtype: str
        """
        return self._auth_type

    @auth_type.setter
    def auth_type(self, auth_type):
        """Sets the auth_type of this CCAuthService.


        :param auth_type: The auth_type of this CCAuthService.  # noqa: E501
        :type: str
        """

        self._auth_type = auth_type

    @property
    def verbal_auth_code(self):
        """Gets the verbal_auth_code of this CCAuthService.  # noqa: E501


        :return: The verbal_auth_code of this CCAuthService.  # noqa: E501
        :rtype: str
        """
        return self._verbal_auth_code

    @verbal_auth_code.setter
    def verbal_auth_code(self, verbal_auth_code):
        """Sets the verbal_auth_code of this CCAuthService.


        :param verbal_auth_code: The verbal_auth_code of this CCAuthService.  # noqa: E501
        :type: str
        """

        self._verbal_auth_code = verbal_auth_code

    @property
    def ecom3ds(self):
        """Gets the ecom3ds of this CCAuthService.  # noqa: E501


        :return: The ecom3ds of this CCAuthService.  # noqa: E501
        :rtype: str
        """
        return self._ecom3ds

    @ecom3ds.setter
    def ecom3ds(self, ecom3ds):
        """Sets the ecom3ds of this CCAuthService.


        :param ecom3ds: The ecom3ds of this CCAuthService.  # noqa: E501
        :type: str
        """

        self._ecom3ds = ecom3ds

    @property
    def cavv(self):
        """Gets the cavv of this CCAuthService.  # noqa: E501


        :return: The cavv of this CCAuthService.  # noqa: E501
        :rtype: str
        """
        return self._cavv

    @cavv.setter
    def cavv(self, cavv):
        """Sets the cavv of this CCAuthService.


        :param cavv: The cavv of this CCAuthService.  # noqa: E501
        :type: str
        """

        self._cavv = cavv

    @property
    def xid(self):
        """Gets the xid of this CCAuthService.  # noqa: E501


        :return: The xid of this CCAuthService.  # noqa: E501
        :rtype: str
        """
        return self._xid

    @xid.setter
    def xid(self, xid):
        """Sets the xid of this CCAuthService.


        :param xid: The xid of this CCAuthService.  # noqa: E501
        :type: str
        """

        self._xid = xid

    @property
    def orig_auth_amount(self):
        """Gets the orig_auth_amount of this CCAuthService.  # noqa: E501


        :return: The orig_auth_amount of this CCAuthService.  # noqa: E501
        :rtype: str
        """
        return self._orig_auth_amount

    @orig_auth_amount.setter
    def orig_auth_amount(self, orig_auth_amount):
        """Sets the orig_auth_amount of this CCAuthService.


        :param orig_auth_amount: The orig_auth_amount of this CCAuthService.  # noqa: E501
        :type: str
        """

        self._orig_auth_amount = orig_auth_amount

    @property
    def enable_avs(self):
        """Gets the enable_avs of this CCAuthService.  # noqa: E501


        :return: The enable_avs of this CCAuthService.  # noqa: E501
        :rtype: str
        """
        return self._enable_avs

    @enable_avs.setter
    def enable_avs(self, enable_avs):
        """Sets the enable_avs of this CCAuthService.


        :param enable_avs: The enable_avs of this CCAuthService.  # noqa: E501
        :type: str
        """

        self._enable_avs = enable_avs

    @property
    def offline(self):
        """Gets the offline of this CCAuthService.  # noqa: E501


        :return: The offline of this CCAuthService.  # noqa: E501
        :rtype: str
        """
        return self._offline

    @offline.setter
    def offline(self, offline):
        """Sets the offline of this CCAuthService.


        :param offline: The offline of this CCAuthService.  # noqa: E501
        :type: str
        """

        self._offline = offline

    @property
    def offline_code(self):
        """Gets the offline_code of this CCAuthService.  # noqa: E501


        :return: The offline_code of this CCAuthService.  # noqa: E501
        :rtype: str
        """
        return self._offline_code

    @offline_code.setter
    def offline_code(self, offline_code):
        """Sets the offline_code of this CCAuthService.


        :param offline_code: The offline_code of this CCAuthService.  # noqa: E501
        :type: str
        """

        self._offline_code = offline_code

    @property
    def estimated(self):
        """Gets the estimated of this CCAuthService.  # noqa: E501


        :return: The estimated of this CCAuthService.  # noqa: E501
        :rtype: str
        """
        return self._estimated

    @estimated.setter
    def estimated(self, estimated):
        """Sets the estimated of this CCAuthService.


        :param estimated: The estimated of this CCAuthService.  # noqa: E501
        :type: str
        """

        self._estimated = estimated

    @property
    def installment_number(self):
        """Gets the installment_number of this CCAuthService.  # noqa: E501


        :return: The installment_number of this CCAuthService.  # noqa: E501
        :rtype: str
        """
        return self._installment_number

    @installment_number.setter
    def installment_number(self, installment_number):
        """Sets the installment_number of this CCAuthService.


        :param installment_number: The installment_number of this CCAuthService.  # noqa: E501
        :type: str
        """

        self._installment_number = installment_number

    @property
    def installment_count(self):
        """Gets the installment_count of this CCAuthService.  # noqa: E501


        :return: The installment_count of this CCAuthService.  # noqa: E501
        :rtype: str
        """
        return self._installment_count

    @installment_count.setter
    def installment_count(self, installment_count):
        """Sets the installment_count of this CCAuthService.


        :param installment_count: The installment_count of this CCAuthService.  # noqa: E501
        :type: str
        """

        self._installment_count = installment_count

    @property
    def auth3dsformat(self):
        """Gets the auth3dsformat of this CCAuthService.  # noqa: E501


        :return: The auth3dsformat of this CCAuthService.  # noqa: E501
        :rtype: str
        """
        return self._auth3dsformat

    @auth3dsformat.setter
    def auth3dsformat(self, auth3dsformat):
        """Sets the auth3dsformat of this CCAuthService.


        :param auth3dsformat: The auth3dsformat of this CCAuthService.  # noqa: E501
        :type: str
        """

        self._auth3dsformat = auth3dsformat

    @property
    def auth3dsjson(self):
        """Gets the auth3dsjson of this CCAuthService.  # noqa: E501


        :return: The auth3dsjson of this CCAuthService.  # noqa: E501
        :rtype: str
        """
        return self._auth3dsjson

    @auth3dsjson.setter
    def auth3dsjson(self, auth3dsjson):
        """Sets the auth3dsjson of this CCAuthService.


        :param auth3dsjson: The auth3dsjson of this CCAuthService.  # noqa: E501
        :type: str
        """

        self._auth3dsjson = auth3dsjson

    @property
    def sca_exemptions(self):
        """Gets the sca_exemptions of this CCAuthService.  # noqa: E501


        :return: The sca_exemptions of this CCAuthService.  # noqa: E501
        :rtype: str
        """
        return self._sca_exemptions

    @sca_exemptions.setter
    def sca_exemptions(self, sca_exemptions):
        """Sets the sca_exemptions of this CCAuthService.


        :param sca_exemptions: The sca_exemptions of this CCAuthService.  # noqa: E501
        :type: str
        """

        self._sca_exemptions = sca_exemptions

    @property
    def sca_upgrade(self):
        """Gets the sca_upgrade of this CCAuthService.  # noqa: E501


        :return: The sca_upgrade of this CCAuthService.  # noqa: E501
        :rtype: str
        """
        return self._sca_upgrade

    @sca_upgrade.setter
    def sca_upgrade(self, sca_upgrade):
        """Sets the sca_upgrade of this CCAuthService.


        :param sca_upgrade: The sca_upgrade of this CCAuthService.  # noqa: E501
        :type: str
        """

        self._sca_upgrade = sca_upgrade

    @property
    def request_par(self):
        """Gets the request_par of this CCAuthService.  # noqa: E501


        :return: The request_par of this CCAuthService.  # noqa: E501
        :rtype: str
        """
        return self._request_par

    @request_par.setter
    def request_par(self, request_par):
        """Sets the request_par of this CCAuthService.


        :param request_par: The request_par of this CCAuthService.  # noqa: E501
        :type: str
        """

        self._request_par = request_par

    @property
    def bill_payment(self):
        """Gets the bill_payment of this CCAuthService.  # noqa: E501


        :return: The bill_payment of this CCAuthService.  # noqa: E501
        :rtype: str
        """
        return self._bill_payment

    @bill_payment.setter
    def bill_payment(self, bill_payment):
        """Sets the bill_payment of this CCAuthService.


        :param bill_payment: The bill_payment of this CCAuthService.  # noqa: E501
        :type: str
        """

        self._bill_payment = bill_payment

    @property
    def recurring(self):
        """Gets the recurring of this CCAuthService.  # noqa: E501


        :return: The recurring of this CCAuthService.  # noqa: E501
        :rtype: str
        """
        return self._recurring

    @recurring.setter
    def recurring(self, recurring):
        """Sets the recurring of this CCAuthService.


        :param recurring: The recurring of this CCAuthService.  # noqa: E501
        :type: str
        """

        self._recurring = recurring

    @property
    def commerce_indicator(self):
        """Gets the commerce_indicator of this CCAuthService.  # noqa: E501


        :return: The commerce_indicator of this CCAuthService.  # noqa: E501
        :rtype: str
        """
        return self._commerce_indicator

    @commerce_indicator.setter
    def commerce_indicator(self, commerce_indicator):
        """Sets the commerce_indicator of this CCAuthService.


        :param commerce_indicator: The commerce_indicator of this CCAuthService.  # noqa: E501
        :type: str
        """

        self._commerce_indicator = commerce_indicator

    @property
    def partial_payment_id(self):
        """Gets the partial_payment_id of this CCAuthService.  # noqa: E501


        :return: The partial_payment_id of this CCAuthService.  # noqa: E501
        :rtype: str
        """
        return self._partial_payment_id

    @partial_payment_id.setter
    def partial_payment_id(self, partial_payment_id):
        """Sets the partial_payment_id of this CCAuthService.


        :param partial_payment_id: The partial_payment_id of this CCAuthService.  # noqa: E501
        :type: str
        """

        self._partial_payment_id = partial_payment_id

    @property
    def last_payment_flag(self):
        """Gets the last_payment_flag of this CCAuthService.  # noqa: E501


        :return: The last_payment_flag of this CCAuthService.  # noqa: E501
        :rtype: str
        """
        return self._last_payment_flag

    @last_payment_flag.setter
    def last_payment_flag(self, last_payment_flag):
        """Sets the last_payment_flag of this CCAuthService.


        :param last_payment_flag: The last_payment_flag of this CCAuthService.  # noqa: E501
        :type: str
        """

        self._last_payment_flag = last_payment_flag

    @property
    def industry_datatype(self):
        """Gets the industry_datatype of this CCAuthService.  # noqa: E501


        :return: The industry_datatype of this CCAuthService.  # noqa: E501
        :rtype: str
        """
        return self._industry_datatype

    @industry_datatype.setter
    def industry_datatype(self, industry_datatype):
        """Sets the industry_datatype of this CCAuthService.


        :param industry_datatype: The industry_datatype of this CCAuthService.  # noqa: E501
        :type: str
        """

        self._industry_datatype = industry_datatype

    @property
    def run(self):
        """Gets the run of this CCAuthService.  # noqa: E501


        :return: The run of this CCAuthService.  # noqa: E501
        :rtype: str
        """
        return self._run

    @run.setter
    def run(self, run):
        """Sets the run of this CCAuthService.


        :param run: The run of this CCAuthService.  # noqa: E501
        :type: str
        """

        self._run = run

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CCAuthService, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CCAuthService):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, CCAuthService):
            return True

        return self.to_dict() != other.to_dict()
