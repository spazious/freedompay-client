# coding: utf-8

"""
    Hosted Payment Controls API Documentation v1.5

    The API for Hosted Payment Controls. To access the swagger.json file open the following link: https://hpc.uat.freedompay.com/api/swagger/docs/v1.5

    The version of the OpenAPI document: v1.5
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import List, Optional
from pydantic import BaseModel, Field, StrictStr, conlist
from freedompay_client.models.tax_detail_item import TaxDetailItem

class PurchaseTotals(BaseModel):
    """
    PurchaseTotals
    """
    tax_detail: Optional[conlist(TaxDetailItem)] = Field(None, alias="taxDetail")
    currency: Optional[StrictStr] = None
    discount_total: Optional[StrictStr] = Field(None, alias="discountTotal")
    duty_total: Optional[StrictStr] = Field(None, alias="dutyTotal")
    freight_total: Optional[StrictStr] = Field(None, alias="freightTotal")
    tax_total: Optional[StrictStr] = Field(None, alias="taxTotal")
    tip_amount: Optional[StrictStr] = Field(None, alias="tipAmount")
    debit_surcharge: Optional[StrictStr] = Field(None, alias="debitSurcharge")
    cash_back_amount: Optional[StrictStr] = Field(None, alias="cashBackAmount")
    overtender: Optional[StrictStr] = None
    invoice_total: Optional[StrictStr] = Field(None, alias="invoiceTotal")
    service_charge: Optional[StrictStr] = Field(None, alias="serviceCharge")
    eid_amount: Optional[StrictStr] = Field(None, alias="eidAmount")
    charge_amount: Optional[StrictStr] = Field(None, alias="chargeAmount")
    __properties = ["taxDetail", "currency", "discountTotal", "dutyTotal", "freightTotal", "taxTotal", "tipAmount", "debitSurcharge", "cashBackAmount", "overtender", "invoiceTotal", "serviceCharge", "eidAmount", "chargeAmount"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> PurchaseTotals:
        """Create an instance of PurchaseTotals from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of each item in tax_detail (list)
        _items = []
        if self.tax_detail:
            for _item in self.tax_detail:
                if _item:
                    _items.append(_item.to_dict())
            _dict['taxDetail'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> PurchaseTotals:
        """Create an instance of PurchaseTotals from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return PurchaseTotals.parse_obj(obj)

        _obj = PurchaseTotals.parse_obj({
            "tax_detail": [TaxDetailItem.from_dict(_item) for _item in obj.get("taxDetail")] if obj.get("taxDetail") is not None else None,
            "currency": obj.get("currency"),
            "discount_total": obj.get("discountTotal"),
            "duty_total": obj.get("dutyTotal"),
            "freight_total": obj.get("freightTotal"),
            "tax_total": obj.get("taxTotal"),
            "tip_amount": obj.get("tipAmount"),
            "debit_surcharge": obj.get("debitSurcharge"),
            "cash_back_amount": obj.get("cashBackAmount"),
            "overtender": obj.get("overtender"),
            "invoice_total": obj.get("invoiceTotal"),
            "service_charge": obj.get("serviceCharge"),
            "eid_amount": obj.get("eidAmount"),
            "charge_amount": obj.get("chargeAmount")
        })
        return _obj


