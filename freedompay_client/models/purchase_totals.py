# coding: utf-8

"""
    Hosted Payment Controls API Documentation v1.5

    The API for Hosted Payment Controls. To access the swagger.json file open the following link: https://hpc.uat.freedompay.com/api/swagger/docs/v1.5  # noqa: E501

    OpenAPI spec version: v1.5
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from freedompay_client.configuration import Configuration


class PurchaseTotals(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'tax_detail': 'list[TaxDetailItem]',
        'currency': 'str',
        'discount_total': 'str',
        'duty_total': 'str',
        'freight_total': 'str',
        'tax_total': 'str',
        'tip_amount': 'str',
        'debit_surcharge': 'str',
        'cash_back_amount': 'str',
        'overtender': 'str',
        'invoice_total': 'str',
        'service_charge': 'str',
        'eid_amount': 'str',
        'charge_amount': 'str'
    }

    attribute_map = {
        'tax_detail': 'taxDetail',
        'currency': 'currency',
        'discount_total': 'discountTotal',
        'duty_total': 'dutyTotal',
        'freight_total': 'freightTotal',
        'tax_total': 'taxTotal',
        'tip_amount': 'tipAmount',
        'debit_surcharge': 'debitSurcharge',
        'cash_back_amount': 'cashBackAmount',
        'overtender': 'overtender',
        'invoice_total': 'invoiceTotal',
        'service_charge': 'serviceCharge',
        'eid_amount': 'eidAmount',
        'charge_amount': 'chargeAmount'
    }

    def __init__(self, tax_detail=None, currency=None, discount_total=None, duty_total=None, freight_total=None, tax_total=None, tip_amount=None, debit_surcharge=None, cash_back_amount=None, overtender=None, invoice_total=None, service_charge=None, eid_amount=None, charge_amount=None, _configuration=None):  # noqa: E501
        """PurchaseTotals - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._tax_detail = None
        self._currency = None
        self._discount_total = None
        self._duty_total = None
        self._freight_total = None
        self._tax_total = None
        self._tip_amount = None
        self._debit_surcharge = None
        self._cash_back_amount = None
        self._overtender = None
        self._invoice_total = None
        self._service_charge = None
        self._eid_amount = None
        self._charge_amount = None
        self.discriminator = None

        if tax_detail is not None:
            self.tax_detail = tax_detail
        if currency is not None:
            self.currency = currency
        if discount_total is not None:
            self.discount_total = discount_total
        if duty_total is not None:
            self.duty_total = duty_total
        if freight_total is not None:
            self.freight_total = freight_total
        if tax_total is not None:
            self.tax_total = tax_total
        if tip_amount is not None:
            self.tip_amount = tip_amount
        if debit_surcharge is not None:
            self.debit_surcharge = debit_surcharge
        if cash_back_amount is not None:
            self.cash_back_amount = cash_back_amount
        if overtender is not None:
            self.overtender = overtender
        if invoice_total is not None:
            self.invoice_total = invoice_total
        if service_charge is not None:
            self.service_charge = service_charge
        if eid_amount is not None:
            self.eid_amount = eid_amount
        if charge_amount is not None:
            self.charge_amount = charge_amount

    @property
    def tax_detail(self):
        """Gets the tax_detail of this PurchaseTotals.  # noqa: E501


        :return: The tax_detail of this PurchaseTotals.  # noqa: E501
        :rtype: list[TaxDetailItem]
        """
        return self._tax_detail

    @tax_detail.setter
    def tax_detail(self, tax_detail):
        """Sets the tax_detail of this PurchaseTotals.


        :param tax_detail: The tax_detail of this PurchaseTotals.  # noqa: E501
        :type: list[TaxDetailItem]
        """

        self._tax_detail = tax_detail

    @property
    def currency(self):
        """Gets the currency of this PurchaseTotals.  # noqa: E501


        :return: The currency of this PurchaseTotals.  # noqa: E501
        :rtype: str
        """
        return self._currency

    @currency.setter
    def currency(self, currency):
        """Sets the currency of this PurchaseTotals.


        :param currency: The currency of this PurchaseTotals.  # noqa: E501
        :type: str
        """

        self._currency = currency

    @property
    def discount_total(self):
        """Gets the discount_total of this PurchaseTotals.  # noqa: E501


        :return: The discount_total of this PurchaseTotals.  # noqa: E501
        :rtype: str
        """
        return self._discount_total

    @discount_total.setter
    def discount_total(self, discount_total):
        """Sets the discount_total of this PurchaseTotals.


        :param discount_total: The discount_total of this PurchaseTotals.  # noqa: E501
        :type: str
        """

        self._discount_total = discount_total

    @property
    def duty_total(self):
        """Gets the duty_total of this PurchaseTotals.  # noqa: E501


        :return: The duty_total of this PurchaseTotals.  # noqa: E501
        :rtype: str
        """
        return self._duty_total

    @duty_total.setter
    def duty_total(self, duty_total):
        """Sets the duty_total of this PurchaseTotals.


        :param duty_total: The duty_total of this PurchaseTotals.  # noqa: E501
        :type: str
        """

        self._duty_total = duty_total

    @property
    def freight_total(self):
        """Gets the freight_total of this PurchaseTotals.  # noqa: E501


        :return: The freight_total of this PurchaseTotals.  # noqa: E501
        :rtype: str
        """
        return self._freight_total

    @freight_total.setter
    def freight_total(self, freight_total):
        """Sets the freight_total of this PurchaseTotals.


        :param freight_total: The freight_total of this PurchaseTotals.  # noqa: E501
        :type: str
        """

        self._freight_total = freight_total

    @property
    def tax_total(self):
        """Gets the tax_total of this PurchaseTotals.  # noqa: E501


        :return: The tax_total of this PurchaseTotals.  # noqa: E501
        :rtype: str
        """
        return self._tax_total

    @tax_total.setter
    def tax_total(self, tax_total):
        """Sets the tax_total of this PurchaseTotals.


        :param tax_total: The tax_total of this PurchaseTotals.  # noqa: E501
        :type: str
        """

        self._tax_total = tax_total

    @property
    def tip_amount(self):
        """Gets the tip_amount of this PurchaseTotals.  # noqa: E501


        :return: The tip_amount of this PurchaseTotals.  # noqa: E501
        :rtype: str
        """
        return self._tip_amount

    @tip_amount.setter
    def tip_amount(self, tip_amount):
        """Sets the tip_amount of this PurchaseTotals.


        :param tip_amount: The tip_amount of this PurchaseTotals.  # noqa: E501
        :type: str
        """

        self._tip_amount = tip_amount

    @property
    def debit_surcharge(self):
        """Gets the debit_surcharge of this PurchaseTotals.  # noqa: E501


        :return: The debit_surcharge of this PurchaseTotals.  # noqa: E501
        :rtype: str
        """
        return self._debit_surcharge

    @debit_surcharge.setter
    def debit_surcharge(self, debit_surcharge):
        """Sets the debit_surcharge of this PurchaseTotals.


        :param debit_surcharge: The debit_surcharge of this PurchaseTotals.  # noqa: E501
        :type: str
        """

        self._debit_surcharge = debit_surcharge

    @property
    def cash_back_amount(self):
        """Gets the cash_back_amount of this PurchaseTotals.  # noqa: E501


        :return: The cash_back_amount of this PurchaseTotals.  # noqa: E501
        :rtype: str
        """
        return self._cash_back_amount

    @cash_back_amount.setter
    def cash_back_amount(self, cash_back_amount):
        """Sets the cash_back_amount of this PurchaseTotals.


        :param cash_back_amount: The cash_back_amount of this PurchaseTotals.  # noqa: E501
        :type: str
        """

        self._cash_back_amount = cash_back_amount

    @property
    def overtender(self):
        """Gets the overtender of this PurchaseTotals.  # noqa: E501


        :return: The overtender of this PurchaseTotals.  # noqa: E501
        :rtype: str
        """
        return self._overtender

    @overtender.setter
    def overtender(self, overtender):
        """Sets the overtender of this PurchaseTotals.


        :param overtender: The overtender of this PurchaseTotals.  # noqa: E501
        :type: str
        """

        self._overtender = overtender

    @property
    def invoice_total(self):
        """Gets the invoice_total of this PurchaseTotals.  # noqa: E501


        :return: The invoice_total of this PurchaseTotals.  # noqa: E501
        :rtype: str
        """
        return self._invoice_total

    @invoice_total.setter
    def invoice_total(self, invoice_total):
        """Sets the invoice_total of this PurchaseTotals.


        :param invoice_total: The invoice_total of this PurchaseTotals.  # noqa: E501
        :type: str
        """

        self._invoice_total = invoice_total

    @property
    def service_charge(self):
        """Gets the service_charge of this PurchaseTotals.  # noqa: E501


        :return: The service_charge of this PurchaseTotals.  # noqa: E501
        :rtype: str
        """
        return self._service_charge

    @service_charge.setter
    def service_charge(self, service_charge):
        """Sets the service_charge of this PurchaseTotals.


        :param service_charge: The service_charge of this PurchaseTotals.  # noqa: E501
        :type: str
        """

        self._service_charge = service_charge

    @property
    def eid_amount(self):
        """Gets the eid_amount of this PurchaseTotals.  # noqa: E501


        :return: The eid_amount of this PurchaseTotals.  # noqa: E501
        :rtype: str
        """
        return self._eid_amount

    @eid_amount.setter
    def eid_amount(self, eid_amount):
        """Sets the eid_amount of this PurchaseTotals.


        :param eid_amount: The eid_amount of this PurchaseTotals.  # noqa: E501
        :type: str
        """

        self._eid_amount = eid_amount

    @property
    def charge_amount(self):
        """Gets the charge_amount of this PurchaseTotals.  # noqa: E501


        :return: The charge_amount of this PurchaseTotals.  # noqa: E501
        :rtype: str
        """
        return self._charge_amount

    @charge_amount.setter
    def charge_amount(self, charge_amount):
        """Sets the charge_amount of this PurchaseTotals.


        :param charge_amount: The charge_amount of this PurchaseTotals.  # noqa: E501
        :type: str
        """

        self._charge_amount = charge_amount

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PurchaseTotals, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PurchaseTotals):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, PurchaseTotals):
            return True

        return self.to_dict() != other.to_dict()
