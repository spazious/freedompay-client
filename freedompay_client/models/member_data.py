# coding: utf-8

"""
    Hosted Payment Controls API Documentation v1.5

    The API for Hosted Payment Controls. To access the swagger.json file open the following link: https://hpc.uat.freedompay.com/api/swagger/docs/v1.5  # noqa: E501

    OpenAPI spec version: v1.5
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from freedompay_client.configuration import Configuration


class MemberData(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'enrollment_date': 'str',
        'is_new_member': 'str',
        'member_identification': 'str',
        'member_identification_type': 'str',
        'id': 'str',
        'street1': 'str',
        'street2': 'str',
        'city': 'str',
        'state': 'str',
        'country': 'str',
        'postal_code': 'str',
        'phone_number': 'str',
        'level': 'str',
        'status': 'str',
        'additional_data': 'str',
        'additional_data_type': 'str',
        'properties': 'list[UserDefinedField]'
    }

    attribute_map = {
        'enrollment_date': 'enrollmentDate',
        'is_new_member': 'isNewMember',
        'member_identification': 'memberIdentification',
        'member_identification_type': 'memberIdentificationType',
        'id': 'id',
        'street1': 'street1',
        'street2': 'street2',
        'city': 'city',
        'state': 'state',
        'country': 'country',
        'postal_code': 'postalCode',
        'phone_number': 'phoneNumber',
        'level': 'level',
        'status': 'status',
        'additional_data': 'additionalData',
        'additional_data_type': 'additionalDataType',
        'properties': 'properties'
    }

    def __init__(self, enrollment_date=None, is_new_member=None, member_identification=None, member_identification_type=None, id=None, street1=None, street2=None, city=None, state=None, country=None, postal_code=None, phone_number=None, level=None, status=None, additional_data=None, additional_data_type=None, properties=None, _configuration=None):  # noqa: E501
        """MemberData - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._enrollment_date = None
        self._is_new_member = None
        self._member_identification = None
        self._member_identification_type = None
        self._id = None
        self._street1 = None
        self._street2 = None
        self._city = None
        self._state = None
        self._country = None
        self._postal_code = None
        self._phone_number = None
        self._level = None
        self._status = None
        self._additional_data = None
        self._additional_data_type = None
        self._properties = None
        self.discriminator = None

        if enrollment_date is not None:
            self.enrollment_date = enrollment_date
        if is_new_member is not None:
            self.is_new_member = is_new_member
        if member_identification is not None:
            self.member_identification = member_identification
        if member_identification_type is not None:
            self.member_identification_type = member_identification_type
        if id is not None:
            self.id = id
        if street1 is not None:
            self.street1 = street1
        if street2 is not None:
            self.street2 = street2
        if city is not None:
            self.city = city
        if state is not None:
            self.state = state
        if country is not None:
            self.country = country
        if postal_code is not None:
            self.postal_code = postal_code
        if phone_number is not None:
            self.phone_number = phone_number
        if level is not None:
            self.level = level
        if status is not None:
            self.status = status
        if additional_data is not None:
            self.additional_data = additional_data
        if additional_data_type is not None:
            self.additional_data_type = additional_data_type
        if properties is not None:
            self.properties = properties

    @property
    def enrollment_date(self):
        """Gets the enrollment_date of this MemberData.  # noqa: E501


        :return: The enrollment_date of this MemberData.  # noqa: E501
        :rtype: str
        """
        return self._enrollment_date

    @enrollment_date.setter
    def enrollment_date(self, enrollment_date):
        """Sets the enrollment_date of this MemberData.


        :param enrollment_date: The enrollment_date of this MemberData.  # noqa: E501
        :type: str
        """

        self._enrollment_date = enrollment_date

    @property
    def is_new_member(self):
        """Gets the is_new_member of this MemberData.  # noqa: E501


        :return: The is_new_member of this MemberData.  # noqa: E501
        :rtype: str
        """
        return self._is_new_member

    @is_new_member.setter
    def is_new_member(self, is_new_member):
        """Sets the is_new_member of this MemberData.


        :param is_new_member: The is_new_member of this MemberData.  # noqa: E501
        :type: str
        """

        self._is_new_member = is_new_member

    @property
    def member_identification(self):
        """Gets the member_identification of this MemberData.  # noqa: E501


        :return: The member_identification of this MemberData.  # noqa: E501
        :rtype: str
        """
        return self._member_identification

    @member_identification.setter
    def member_identification(self, member_identification):
        """Sets the member_identification of this MemberData.


        :param member_identification: The member_identification of this MemberData.  # noqa: E501
        :type: str
        """

        self._member_identification = member_identification

    @property
    def member_identification_type(self):
        """Gets the member_identification_type of this MemberData.  # noqa: E501


        :return: The member_identification_type of this MemberData.  # noqa: E501
        :rtype: str
        """
        return self._member_identification_type

    @member_identification_type.setter
    def member_identification_type(self, member_identification_type):
        """Sets the member_identification_type of this MemberData.


        :param member_identification_type: The member_identification_type of this MemberData.  # noqa: E501
        :type: str
        """

        self._member_identification_type = member_identification_type

    @property
    def id(self):
        """Gets the id of this MemberData.  # noqa: E501


        :return: The id of this MemberData.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this MemberData.


        :param id: The id of this MemberData.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def street1(self):
        """Gets the street1 of this MemberData.  # noqa: E501


        :return: The street1 of this MemberData.  # noqa: E501
        :rtype: str
        """
        return self._street1

    @street1.setter
    def street1(self, street1):
        """Sets the street1 of this MemberData.


        :param street1: The street1 of this MemberData.  # noqa: E501
        :type: str
        """

        self._street1 = street1

    @property
    def street2(self):
        """Gets the street2 of this MemberData.  # noqa: E501


        :return: The street2 of this MemberData.  # noqa: E501
        :rtype: str
        """
        return self._street2

    @street2.setter
    def street2(self, street2):
        """Sets the street2 of this MemberData.


        :param street2: The street2 of this MemberData.  # noqa: E501
        :type: str
        """

        self._street2 = street2

    @property
    def city(self):
        """Gets the city of this MemberData.  # noqa: E501


        :return: The city of this MemberData.  # noqa: E501
        :rtype: str
        """
        return self._city

    @city.setter
    def city(self, city):
        """Sets the city of this MemberData.


        :param city: The city of this MemberData.  # noqa: E501
        :type: str
        """

        self._city = city

    @property
    def state(self):
        """Gets the state of this MemberData.  # noqa: E501


        :return: The state of this MemberData.  # noqa: E501
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this MemberData.


        :param state: The state of this MemberData.  # noqa: E501
        :type: str
        """

        self._state = state

    @property
    def country(self):
        """Gets the country of this MemberData.  # noqa: E501


        :return: The country of this MemberData.  # noqa: E501
        :rtype: str
        """
        return self._country

    @country.setter
    def country(self, country):
        """Sets the country of this MemberData.


        :param country: The country of this MemberData.  # noqa: E501
        :type: str
        """

        self._country = country

    @property
    def postal_code(self):
        """Gets the postal_code of this MemberData.  # noqa: E501


        :return: The postal_code of this MemberData.  # noqa: E501
        :rtype: str
        """
        return self._postal_code

    @postal_code.setter
    def postal_code(self, postal_code):
        """Sets the postal_code of this MemberData.


        :param postal_code: The postal_code of this MemberData.  # noqa: E501
        :type: str
        """

        self._postal_code = postal_code

    @property
    def phone_number(self):
        """Gets the phone_number of this MemberData.  # noqa: E501


        :return: The phone_number of this MemberData.  # noqa: E501
        :rtype: str
        """
        return self._phone_number

    @phone_number.setter
    def phone_number(self, phone_number):
        """Sets the phone_number of this MemberData.


        :param phone_number: The phone_number of this MemberData.  # noqa: E501
        :type: str
        """

        self._phone_number = phone_number

    @property
    def level(self):
        """Gets the level of this MemberData.  # noqa: E501


        :return: The level of this MemberData.  # noqa: E501
        :rtype: str
        """
        return self._level

    @level.setter
    def level(self, level):
        """Sets the level of this MemberData.


        :param level: The level of this MemberData.  # noqa: E501
        :type: str
        """

        self._level = level

    @property
    def status(self):
        """Gets the status of this MemberData.  # noqa: E501


        :return: The status of this MemberData.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this MemberData.


        :param status: The status of this MemberData.  # noqa: E501
        :type: str
        """

        self._status = status

    @property
    def additional_data(self):
        """Gets the additional_data of this MemberData.  # noqa: E501


        :return: The additional_data of this MemberData.  # noqa: E501
        :rtype: str
        """
        return self._additional_data

    @additional_data.setter
    def additional_data(self, additional_data):
        """Sets the additional_data of this MemberData.


        :param additional_data: The additional_data of this MemberData.  # noqa: E501
        :type: str
        """

        self._additional_data = additional_data

    @property
    def additional_data_type(self):
        """Gets the additional_data_type of this MemberData.  # noqa: E501


        :return: The additional_data_type of this MemberData.  # noqa: E501
        :rtype: str
        """
        return self._additional_data_type

    @additional_data_type.setter
    def additional_data_type(self, additional_data_type):
        """Sets the additional_data_type of this MemberData.


        :param additional_data_type: The additional_data_type of this MemberData.  # noqa: E501
        :type: str
        """

        self._additional_data_type = additional_data_type

    @property
    def properties(self):
        """Gets the properties of this MemberData.  # noqa: E501


        :return: The properties of this MemberData.  # noqa: E501
        :rtype: list[UserDefinedField]
        """
        return self._properties

    @properties.setter
    def properties(self, properties):
        """Sets the properties of this MemberData.


        :param properties: The properties of this MemberData.  # noqa: E501
        :type: list[UserDefinedField]
        """

        self._properties = properties

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(MemberData, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, MemberData):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, MemberData):
            return True

        return self.to_dict() != other.to_dict()
