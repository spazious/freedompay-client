# coding: utf-8

"""
    Hosted Payment Controls API Documentation v1.5

    The API for Hosted Payment Controls. To access the swagger.json file open the following link: https://hpc.uat.freedompay.com/api/swagger/docs/v1.5

    The version of the OpenAPI document: v1.5
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import List, Optional
from pydantic import BaseModel, Field, StrictStr, conlist
from freedompay_client.models.admin_service import AdminService
from freedompay_client.models.auto_rental_data import AutoRentalData
from freedompay_client.models.bill_to import BillTo
from freedompay_client.models.card import Card
from freedompay_client.models.cc_auth_service import CCAuthService
from freedompay_client.models.cc_capture_service import CCCaptureService
from freedompay_client.models.cc_credit_service import CCCreditService
from freedompay_client.models.cc_followup_service import CCFollowupService
from freedompay_client.models.check import Check
from freedompay_client.models.client_metadata import ClientMetadata
from freedompay_client.models.dcc_info import DccInfo
from freedompay_client.models.dcc_service import DccService
from freedompay_client.models.discount_service import DiscountService
from freedompay_client.models.efv_options import EfvOptions
from freedompay_client.models.eid_detail import EIDDetail
from freedompay_client.models.eod_service import EodService
from freedompay_client.models.fleet_data import FleetData
from freedompay_client.models.fraud_check_service import FraudCheckService
from freedompay_client.models.healthcare_data_web import HealthcareDataWeb
from freedompay_client.models.hotel_data import HotelData
from freedompay_client.models.incentive_service import IncentiveService
from freedompay_client.models.inquiry_service import InquiryService
from freedompay_client.models.invoice_header import InvoiceHeader
from freedompay_client.models.invoice_service import InvoiceService
from freedompay_client.models.item import Item
from freedompay_client.models.loyalty_service import LoyaltyService
from freedompay_client.models.member_data import MemberData
from freedompay_client.models.merchant_defined_data import MerchantDefinedData
from freedompay_client.models.message_service import MessageService
from freedompay_client.models.mobile_service import MobileService
from freedompay_client.models.network_data import NetworkData
from freedompay_client.models.offline_control import OfflineControl
from freedompay_client.models.payment import Payment
from freedompay_client.models.pos import Pos
from freedompay_client.models.promo_service import PromoService
from freedompay_client.models.purchase_totals import PurchaseTotals
from freedompay_client.models.request_incentives import RequestIncentives
from freedompay_client.models.restaurant_data import RestaurantData
from freedompay_client.models.session_service import SessionService
from freedompay_client.models.ship_from import ShipFrom
from freedompay_client.models.ship_to import ShipTo
from freedompay_client.models.token_create_service import TokenCreateService
from freedompay_client.models.tor_service import TORService
from freedompay_client.models.vend_control_service import VendControlService
from freedompay_client.models.void_service import VoidService

class RequestMessage(BaseModel):
    """
    RequestMessage
    """
    client_id: Optional[StrictStr] = Field(None, alias="clientId")
    store_id: Optional[StrictStr] = Field(None, alias="storeId")
    terminal_id: Optional[StrictStr] = Field(None, alias="terminalId")
    es_key: Optional[StrictStr] = Field(None, alias="esKey")
    admin_service: Optional[AdminService] = Field(None, alias="adminService")
    auto_rental_data: Optional[AutoRentalData] = Field(None, alias="autoRentalData")
    healthcare_data: Optional[HealthcareDataWeb] = Field(None, alias="healthcareData")
    bill_to: Optional[BillTo] = Field(None, alias="billTo")
    card: Optional[Card] = None
    cc_auth_service: Optional[CCAuthService] = Field(None, alias="ccAuthService")
    cc_capture_service: Optional[CCCaptureService] = Field(None, alias="ccCaptureService")
    cc_credit_service: Optional[CCCreditService] = Field(None, alias="ccCreditService")
    cc_followup_service: Optional[CCFollowupService] = Field(None, alias="ccFollowupService")
    dcc_service: Optional[DccService] = Field(None, alias="dccService")
    dcc: Optional[DccInfo] = None
    check: Optional[Check] = None
    clerk_id: Optional[StrictStr] = Field(None, alias="clerkId")
    client_metadata: Optional[ClientMetadata] = Field(None, alias="clientMetadata")
    comments: Optional[StrictStr] = None
    discount_service: Optional[DiscountService] = Field(None, alias="discountService")
    efv_options: Optional[EfvOptions] = Field(None, alias="efvOptions")
    fleet_data: Optional[FleetData] = Field(None, alias="fleetData")
    fraud_check_service: Optional[FraudCheckService] = Field(None, alias="fraudCheckService")
    inquiry_service: Optional[InquiryService] = Field(None, alias="inquiryService")
    hotel_data: Optional[HotelData] = Field(None, alias="hotelData")
    invoice_discount_detail: Optional[conlist(EIDDetail)] = Field(None, alias="invoiceDiscountDetail")
    invoice_service: Optional[InvoiceService] = Field(None, alias="invoiceService")
    invoice_header: Optional[InvoiceHeader] = Field(None, alias="invoiceHeader")
    items: Optional[conlist(Item)] = None
    payments: Optional[conlist(Payment)] = None
    language: Optional[StrictStr] = None
    loyalty_service: Optional[LoyaltyService] = Field(None, alias="loyaltyService")
    request_incentives: Optional[RequestIncentives] = Field(None, alias="requestIncentives")
    merchant_defined_data: Optional[MerchantDefinedData] = Field(None, alias="merchantDefinedData")
    magic_cookie: Optional[StrictStr] = Field(None, alias="magicCookie")
    merchant_reference_code: Optional[StrictStr] = Field(None, alias="merchantReferenceCode")
    merchant_batch_id: Optional[StrictStr] = Field(None, alias="merchantBatchId")
    message_service: Optional[MessageService] = Field(None, alias="messageService")
    mobile_service: Optional[MobileService] = Field(None, alias="mobileService")
    network_data: Optional[NetworkData] = Field(None, alias="networkData")
    offline_control: Optional[OfflineControl] = Field(None, alias="offlineControl")
    order_request_id: Optional[StrictStr] = Field(None, alias="orderRequestID")
    order_request_token: Optional[StrictStr] = Field(None, alias="orderRequestToken")
    pos: Optional[Pos] = None
    promo_service: Optional[PromoService] = Field(None, alias="promoService")
    purchase_totals: Optional[PurchaseTotals] = Field(None, alias="purchaseTotals")
    restaurant_data: Optional[RestaurantData] = Field(None, alias="restaurantData")
    response_flags: Optional[StrictStr] = Field(None, alias="responseFlags")
    session_key: Optional[StrictStr] = Field(None, alias="sessionKey")
    session_service: Optional[SessionService] = Field(None, alias="sessionService")
    ship_from: Optional[ShipFrom] = Field(None, alias="shipFrom")
    ship_to: Optional[ShipTo] = Field(None, alias="shipTo")
    token_create_service: Optional[TokenCreateService] = Field(None, alias="tokenCreateService")
    vend_control_service: Optional[VendControlService] = Field(None, alias="vendControlService")
    void_service: Optional[VoidService] = Field(None, alias="voidService")
    tor_service: Optional[TORService] = Field(None, alias="torService")
    eod_service: Optional[EodService] = Field(None, alias="eodService")
    incentive_service: Optional[IncentiveService] = Field(None, alias="incentiveService")
    member_data: Optional[MemberData] = Field(None, alias="memberData")
    __properties = ["clientId", "storeId", "terminalId", "esKey", "adminService", "autoRentalData", "healthcareData", "billTo", "card", "ccAuthService", "ccCaptureService", "ccCreditService", "ccFollowupService", "dccService", "dcc", "check", "clerkId", "clientMetadata", "comments", "discountService", "efvOptions", "fleetData", "fraudCheckService", "inquiryService", "hotelData", "invoiceDiscountDetail", "invoiceService", "invoiceHeader", "items", "payments", "language", "loyaltyService", "requestIncentives", "merchantDefinedData", "magicCookie", "merchantReferenceCode", "merchantBatchId", "messageService", "mobileService", "networkData", "offlineControl", "orderRequestID", "orderRequestToken", "pos", "promoService", "purchaseTotals", "restaurantData", "responseFlags", "sessionKey", "sessionService", "shipFrom", "shipTo", "tokenCreateService", "vendControlService", "voidService", "torService", "eodService", "incentiveService", "memberData"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> RequestMessage:
        """Create an instance of RequestMessage from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of admin_service
        if self.admin_service:
            _dict['adminService'] = self.admin_service.to_dict()
        # override the default output from pydantic by calling `to_dict()` of auto_rental_data
        if self.auto_rental_data:
            _dict['autoRentalData'] = self.auto_rental_data.to_dict()
        # override the default output from pydantic by calling `to_dict()` of healthcare_data
        if self.healthcare_data:
            _dict['healthcareData'] = self.healthcare_data.to_dict()
        # override the default output from pydantic by calling `to_dict()` of bill_to
        if self.bill_to:
            _dict['billTo'] = self.bill_to.to_dict()
        # override the default output from pydantic by calling `to_dict()` of card
        if self.card:
            _dict['card'] = self.card.to_dict()
        # override the default output from pydantic by calling `to_dict()` of cc_auth_service
        if self.cc_auth_service:
            _dict['ccAuthService'] = self.cc_auth_service.to_dict()
        # override the default output from pydantic by calling `to_dict()` of cc_capture_service
        if self.cc_capture_service:
            _dict['ccCaptureService'] = self.cc_capture_service.to_dict()
        # override the default output from pydantic by calling `to_dict()` of cc_credit_service
        if self.cc_credit_service:
            _dict['ccCreditService'] = self.cc_credit_service.to_dict()
        # override the default output from pydantic by calling `to_dict()` of cc_followup_service
        if self.cc_followup_service:
            _dict['ccFollowupService'] = self.cc_followup_service.to_dict()
        # override the default output from pydantic by calling `to_dict()` of dcc_service
        if self.dcc_service:
            _dict['dccService'] = self.dcc_service.to_dict()
        # override the default output from pydantic by calling `to_dict()` of dcc
        if self.dcc:
            _dict['dcc'] = self.dcc.to_dict()
        # override the default output from pydantic by calling `to_dict()` of check
        if self.check:
            _dict['check'] = self.check.to_dict()
        # override the default output from pydantic by calling `to_dict()` of client_metadata
        if self.client_metadata:
            _dict['clientMetadata'] = self.client_metadata.to_dict()
        # override the default output from pydantic by calling `to_dict()` of discount_service
        if self.discount_service:
            _dict['discountService'] = self.discount_service.to_dict()
        # override the default output from pydantic by calling `to_dict()` of efv_options
        if self.efv_options:
            _dict['efvOptions'] = self.efv_options.to_dict()
        # override the default output from pydantic by calling `to_dict()` of fleet_data
        if self.fleet_data:
            _dict['fleetData'] = self.fleet_data.to_dict()
        # override the default output from pydantic by calling `to_dict()` of fraud_check_service
        if self.fraud_check_service:
            _dict['fraudCheckService'] = self.fraud_check_service.to_dict()
        # override the default output from pydantic by calling `to_dict()` of inquiry_service
        if self.inquiry_service:
            _dict['inquiryService'] = self.inquiry_service.to_dict()
        # override the default output from pydantic by calling `to_dict()` of hotel_data
        if self.hotel_data:
            _dict['hotelData'] = self.hotel_data.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in invoice_discount_detail (list)
        _items = []
        if self.invoice_discount_detail:
            for _item in self.invoice_discount_detail:
                if _item:
                    _items.append(_item.to_dict())
            _dict['invoiceDiscountDetail'] = _items
        # override the default output from pydantic by calling `to_dict()` of invoice_service
        if self.invoice_service:
            _dict['invoiceService'] = self.invoice_service.to_dict()
        # override the default output from pydantic by calling `to_dict()` of invoice_header
        if self.invoice_header:
            _dict['invoiceHeader'] = self.invoice_header.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in items (list)
        _items = []
        if self.items:
            for _item in self.items:
                if _item:
                    _items.append(_item.to_dict())
            _dict['items'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in payments (list)
        _items = []
        if self.payments:
            for _item in self.payments:
                if _item:
                    _items.append(_item.to_dict())
            _dict['payments'] = _items
        # override the default output from pydantic by calling `to_dict()` of loyalty_service
        if self.loyalty_service:
            _dict['loyaltyService'] = self.loyalty_service.to_dict()
        # override the default output from pydantic by calling `to_dict()` of request_incentives
        if self.request_incentives:
            _dict['requestIncentives'] = self.request_incentives.to_dict()
        # override the default output from pydantic by calling `to_dict()` of merchant_defined_data
        if self.merchant_defined_data:
            _dict['merchantDefinedData'] = self.merchant_defined_data.to_dict()
        # override the default output from pydantic by calling `to_dict()` of message_service
        if self.message_service:
            _dict['messageService'] = self.message_service.to_dict()
        # override the default output from pydantic by calling `to_dict()` of mobile_service
        if self.mobile_service:
            _dict['mobileService'] = self.mobile_service.to_dict()
        # override the default output from pydantic by calling `to_dict()` of network_data
        if self.network_data:
            _dict['networkData'] = self.network_data.to_dict()
        # override the default output from pydantic by calling `to_dict()` of offline_control
        if self.offline_control:
            _dict['offlineControl'] = self.offline_control.to_dict()
        # override the default output from pydantic by calling `to_dict()` of pos
        if self.pos:
            _dict['pos'] = self.pos.to_dict()
        # override the default output from pydantic by calling `to_dict()` of promo_service
        if self.promo_service:
            _dict['promoService'] = self.promo_service.to_dict()
        # override the default output from pydantic by calling `to_dict()` of purchase_totals
        if self.purchase_totals:
            _dict['purchaseTotals'] = self.purchase_totals.to_dict()
        # override the default output from pydantic by calling `to_dict()` of restaurant_data
        if self.restaurant_data:
            _dict['restaurantData'] = self.restaurant_data.to_dict()
        # override the default output from pydantic by calling `to_dict()` of session_service
        if self.session_service:
            _dict['sessionService'] = self.session_service.to_dict()
        # override the default output from pydantic by calling `to_dict()` of ship_from
        if self.ship_from:
            _dict['shipFrom'] = self.ship_from.to_dict()
        # override the default output from pydantic by calling `to_dict()` of ship_to
        if self.ship_to:
            _dict['shipTo'] = self.ship_to.to_dict()
        # override the default output from pydantic by calling `to_dict()` of token_create_service
        if self.token_create_service:
            _dict['tokenCreateService'] = self.token_create_service.to_dict()
        # override the default output from pydantic by calling `to_dict()` of vend_control_service
        if self.vend_control_service:
            _dict['vendControlService'] = self.vend_control_service.to_dict()
        # override the default output from pydantic by calling `to_dict()` of void_service
        if self.void_service:
            _dict['voidService'] = self.void_service.to_dict()
        # override the default output from pydantic by calling `to_dict()` of tor_service
        if self.tor_service:
            _dict['torService'] = self.tor_service.to_dict()
        # override the default output from pydantic by calling `to_dict()` of eod_service
        if self.eod_service:
            _dict['eodService'] = self.eod_service.to_dict()
        # override the default output from pydantic by calling `to_dict()` of incentive_service
        if self.incentive_service:
            _dict['incentiveService'] = self.incentive_service.to_dict()
        # override the default output from pydantic by calling `to_dict()` of member_data
        if self.member_data:
            _dict['memberData'] = self.member_data.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> RequestMessage:
        """Create an instance of RequestMessage from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return RequestMessage.parse_obj(obj)

        _obj = RequestMessage.parse_obj({
            "client_id": obj.get("clientId"),
            "store_id": obj.get("storeId"),
            "terminal_id": obj.get("terminalId"),
            "es_key": obj.get("esKey"),
            "admin_service": AdminService.from_dict(obj.get("adminService")) if obj.get("adminService") is not None else None,
            "auto_rental_data": AutoRentalData.from_dict(obj.get("autoRentalData")) if obj.get("autoRentalData") is not None else None,
            "healthcare_data": HealthcareDataWeb.from_dict(obj.get("healthcareData")) if obj.get("healthcareData") is not None else None,
            "bill_to": BillTo.from_dict(obj.get("billTo")) if obj.get("billTo") is not None else None,
            "card": Card.from_dict(obj.get("card")) if obj.get("card") is not None else None,
            "cc_auth_service": CCAuthService.from_dict(obj.get("ccAuthService")) if obj.get("ccAuthService") is not None else None,
            "cc_capture_service": CCCaptureService.from_dict(obj.get("ccCaptureService")) if obj.get("ccCaptureService") is not None else None,
            "cc_credit_service": CCCreditService.from_dict(obj.get("ccCreditService")) if obj.get("ccCreditService") is not None else None,
            "cc_followup_service": CCFollowupService.from_dict(obj.get("ccFollowupService")) if obj.get("ccFollowupService") is not None else None,
            "dcc_service": DccService.from_dict(obj.get("dccService")) if obj.get("dccService") is not None else None,
            "dcc": DccInfo.from_dict(obj.get("dcc")) if obj.get("dcc") is not None else None,
            "check": Check.from_dict(obj.get("check")) if obj.get("check") is not None else None,
            "clerk_id": obj.get("clerkId"),
            "client_metadata": ClientMetadata.from_dict(obj.get("clientMetadata")) if obj.get("clientMetadata") is not None else None,
            "comments": obj.get("comments"),
            "discount_service": DiscountService.from_dict(obj.get("discountService")) if obj.get("discountService") is not None else None,
            "efv_options": EfvOptions.from_dict(obj.get("efvOptions")) if obj.get("efvOptions") is not None else None,
            "fleet_data": FleetData.from_dict(obj.get("fleetData")) if obj.get("fleetData") is not None else None,
            "fraud_check_service": FraudCheckService.from_dict(obj.get("fraudCheckService")) if obj.get("fraudCheckService") is not None else None,
            "inquiry_service": InquiryService.from_dict(obj.get("inquiryService")) if obj.get("inquiryService") is not None else None,
            "hotel_data": HotelData.from_dict(obj.get("hotelData")) if obj.get("hotelData") is not None else None,
            "invoice_discount_detail": [EIDDetail.from_dict(_item) for _item in obj.get("invoiceDiscountDetail")] if obj.get("invoiceDiscountDetail") is not None else None,
            "invoice_service": InvoiceService.from_dict(obj.get("invoiceService")) if obj.get("invoiceService") is not None else None,
            "invoice_header": InvoiceHeader.from_dict(obj.get("invoiceHeader")) if obj.get("invoiceHeader") is not None else None,
            "items": [Item.from_dict(_item) for _item in obj.get("items")] if obj.get("items") is not None else None,
            "payments": [Payment.from_dict(_item) for _item in obj.get("payments")] if obj.get("payments") is not None else None,
            "language": obj.get("language"),
            "loyalty_service": LoyaltyService.from_dict(obj.get("loyaltyService")) if obj.get("loyaltyService") is not None else None,
            "request_incentives": RequestIncentives.from_dict(obj.get("requestIncentives")) if obj.get("requestIncentives") is not None else None,
            "merchant_defined_data": MerchantDefinedData.from_dict(obj.get("merchantDefinedData")) if obj.get("merchantDefinedData") is not None else None,
            "magic_cookie": obj.get("magicCookie"),
            "merchant_reference_code": obj.get("merchantReferenceCode"),
            "merchant_batch_id": obj.get("merchantBatchId"),
            "message_service": MessageService.from_dict(obj.get("messageService")) if obj.get("messageService") is not None else None,
            "mobile_service": MobileService.from_dict(obj.get("mobileService")) if obj.get("mobileService") is not None else None,
            "network_data": NetworkData.from_dict(obj.get("networkData")) if obj.get("networkData") is not None else None,
            "offline_control": OfflineControl.from_dict(obj.get("offlineControl")) if obj.get("offlineControl") is not None else None,
            "order_request_id": obj.get("orderRequestID"),
            "order_request_token": obj.get("orderRequestToken"),
            "pos": Pos.from_dict(obj.get("pos")) if obj.get("pos") is not None else None,
            "promo_service": PromoService.from_dict(obj.get("promoService")) if obj.get("promoService") is not None else None,
            "purchase_totals": PurchaseTotals.from_dict(obj.get("purchaseTotals")) if obj.get("purchaseTotals") is not None else None,
            "restaurant_data": RestaurantData.from_dict(obj.get("restaurantData")) if obj.get("restaurantData") is not None else None,
            "response_flags": obj.get("responseFlags"),
            "session_key": obj.get("sessionKey"),
            "session_service": SessionService.from_dict(obj.get("sessionService")) if obj.get("sessionService") is not None else None,
            "ship_from": ShipFrom.from_dict(obj.get("shipFrom")) if obj.get("shipFrom") is not None else None,
            "ship_to": ShipTo.from_dict(obj.get("shipTo")) if obj.get("shipTo") is not None else None,
            "token_create_service": TokenCreateService.from_dict(obj.get("tokenCreateService")) if obj.get("tokenCreateService") is not None else None,
            "vend_control_service": VendControlService.from_dict(obj.get("vendControlService")) if obj.get("vendControlService") is not None else None,
            "void_service": VoidService.from_dict(obj.get("voidService")) if obj.get("voidService") is not None else None,
            "tor_service": TORService.from_dict(obj.get("torService")) if obj.get("torService") is not None else None,
            "eod_service": EodService.from_dict(obj.get("eodService")) if obj.get("eodService") is not None else None,
            "incentive_service": IncentiveService.from_dict(obj.get("incentiveService")) if obj.get("incentiveService") is not None else None,
            "member_data": MemberData.from_dict(obj.get("memberData")) if obj.get("memberData") is not None else None
        })
        return _obj


