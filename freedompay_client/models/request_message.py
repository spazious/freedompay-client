# coding: utf-8

"""
    Hosted Payment Controls API Documentation v1.5

    The API for Hosted Payment Controls. To access the swagger.json file open the following link: https://hpc.uat.freedompay.com/api/swagger/docs/v1.5  # noqa: E501

    OpenAPI spec version: v1.5
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from freedompay_client.configuration import Configuration


class RequestMessage(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'client_id': 'str',
        'store_id': 'str',
        'terminal_id': 'str',
        'es_key': 'str',
        'admin_service': 'AdminService',
        'auto_rental_data': 'AutoRentalData',
        'healthcare_data': 'HealthcareDataWeb',
        'bill_to': 'BillTo',
        'card': 'Card',
        'cc_auth_service': 'CCAuthService',
        'cc_capture_service': 'CCCaptureService',
        'cc_credit_service': 'CCCreditService',
        'cc_followup_service': 'CCFollowupService',
        'dcc_service': 'DccService',
        'dcc': 'DccInfo',
        'check': 'Check',
        'clerk_id': 'str',
        'client_metadata': 'ClientMetadata',
        'comments': 'str',
        'discount_service': 'DiscountService',
        'efv_options': 'EfvOptions',
        'fleet_data': 'FleetData',
        'fraud_check_service': 'FraudCheckService',
        'inquiry_service': 'InquiryService',
        'hotel_data': 'HotelData',
        'invoice_discount_detail': 'list[EIDDetail]',
        'invoice_service': 'InvoiceService',
        'invoice_header': 'InvoiceHeader',
        'items': 'list[Item]',
        'payments': 'list[Payment]',
        'language': 'str',
        'loyalty_service': 'LoyaltyService',
        'request_incentives': 'RequestIncentives',
        'merchant_defined_data': 'MerchantDefinedData',
        'magic_cookie': 'str',
        'merchant_reference_code': 'str',
        'merchant_batch_id': 'str',
        'message_service': 'MessageService',
        'mobile_service': 'MobileService',
        'network_data': 'NetworkData',
        'offline_control': 'OfflineControl',
        'order_request_id': 'str',
        'order_request_token': 'str',
        'pos': 'Pos',
        'promo_service': 'PromoService',
        'purchase_totals': 'PurchaseTotals',
        'restaurant_data': 'RestaurantData',
        'response_flags': 'str',
        'session_key': 'str',
        'session_service': 'SessionService',
        'ship_from': 'ShipFrom',
        'ship_to': 'ShipTo',
        'token_create_service': 'TokenCreateService',
        'vend_control_service': 'VendControlService',
        'void_service': 'VoidService',
        'tor_service': 'TORService',
        'eod_service': 'EodService',
        'incentive_service': 'IncentiveService',
        'member_data': 'MemberData'
    }

    attribute_map = {
        'client_id': 'clientId',
        'store_id': 'storeId',
        'terminal_id': 'terminalId',
        'es_key': 'esKey',
        'admin_service': 'adminService',
        'auto_rental_data': 'autoRentalData',
        'healthcare_data': 'healthcareData',
        'bill_to': 'billTo',
        'card': 'card',
        'cc_auth_service': 'ccAuthService',
        'cc_capture_service': 'ccCaptureService',
        'cc_credit_service': 'ccCreditService',
        'cc_followup_service': 'ccFollowupService',
        'dcc_service': 'dccService',
        'dcc': 'dcc',
        'check': 'check',
        'clerk_id': 'clerkId',
        'client_metadata': 'clientMetadata',
        'comments': 'comments',
        'discount_service': 'discountService',
        'efv_options': 'efvOptions',
        'fleet_data': 'fleetData',
        'fraud_check_service': 'fraudCheckService',
        'inquiry_service': 'inquiryService',
        'hotel_data': 'hotelData',
        'invoice_discount_detail': 'invoiceDiscountDetail',
        'invoice_service': 'invoiceService',
        'invoice_header': 'invoiceHeader',
        'items': 'items',
        'payments': 'payments',
        'language': 'language',
        'loyalty_service': 'loyaltyService',
        'request_incentives': 'requestIncentives',
        'merchant_defined_data': 'merchantDefinedData',
        'magic_cookie': 'magicCookie',
        'merchant_reference_code': 'merchantReferenceCode',
        'merchant_batch_id': 'merchantBatchId',
        'message_service': 'messageService',
        'mobile_service': 'mobileService',
        'network_data': 'networkData',
        'offline_control': 'offlineControl',
        'order_request_id': 'orderRequestID',
        'order_request_token': 'orderRequestToken',
        'pos': 'pos',
        'promo_service': 'promoService',
        'purchase_totals': 'purchaseTotals',
        'restaurant_data': 'restaurantData',
        'response_flags': 'responseFlags',
        'session_key': 'sessionKey',
        'session_service': 'sessionService',
        'ship_from': 'shipFrom',
        'ship_to': 'shipTo',
        'token_create_service': 'tokenCreateService',
        'vend_control_service': 'vendControlService',
        'void_service': 'voidService',
        'tor_service': 'torService',
        'eod_service': 'eodService',
        'incentive_service': 'incentiveService',
        'member_data': 'memberData'
    }

    def __init__(self, client_id=None, store_id=None, terminal_id=None, es_key=None, admin_service=None, auto_rental_data=None, healthcare_data=None, bill_to=None, card=None, cc_auth_service=None, cc_capture_service=None, cc_credit_service=None, cc_followup_service=None, dcc_service=None, dcc=None, check=None, clerk_id=None, client_metadata=None, comments=None, discount_service=None, efv_options=None, fleet_data=None, fraud_check_service=None, inquiry_service=None, hotel_data=None, invoice_discount_detail=None, invoice_service=None, invoice_header=None, items=None, payments=None, language=None, loyalty_service=None, request_incentives=None, merchant_defined_data=None, magic_cookie=None, merchant_reference_code=None, merchant_batch_id=None, message_service=None, mobile_service=None, network_data=None, offline_control=None, order_request_id=None, order_request_token=None, pos=None, promo_service=None, purchase_totals=None, restaurant_data=None, response_flags=None, session_key=None, session_service=None, ship_from=None, ship_to=None, token_create_service=None, vend_control_service=None, void_service=None, tor_service=None, eod_service=None, incentive_service=None, member_data=None, _configuration=None):  # noqa: E501
        """RequestMessage - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._client_id = None
        self._store_id = None
        self._terminal_id = None
        self._es_key = None
        self._admin_service = None
        self._auto_rental_data = None
        self._healthcare_data = None
        self._bill_to = None
        self._card = None
        self._cc_auth_service = None
        self._cc_capture_service = None
        self._cc_credit_service = None
        self._cc_followup_service = None
        self._dcc_service = None
        self._dcc = None
        self._check = None
        self._clerk_id = None
        self._client_metadata = None
        self._comments = None
        self._discount_service = None
        self._efv_options = None
        self._fleet_data = None
        self._fraud_check_service = None
        self._inquiry_service = None
        self._hotel_data = None
        self._invoice_discount_detail = None
        self._invoice_service = None
        self._invoice_header = None
        self._items = None
        self._payments = None
        self._language = None
        self._loyalty_service = None
        self._request_incentives = None
        self._merchant_defined_data = None
        self._magic_cookie = None
        self._merchant_reference_code = None
        self._merchant_batch_id = None
        self._message_service = None
        self._mobile_service = None
        self._network_data = None
        self._offline_control = None
        self._order_request_id = None
        self._order_request_token = None
        self._pos = None
        self._promo_service = None
        self._purchase_totals = None
        self._restaurant_data = None
        self._response_flags = None
        self._session_key = None
        self._session_service = None
        self._ship_from = None
        self._ship_to = None
        self._token_create_service = None
        self._vend_control_service = None
        self._void_service = None
        self._tor_service = None
        self._eod_service = None
        self._incentive_service = None
        self._member_data = None
        self.discriminator = None

        if client_id is not None:
            self.client_id = client_id
        if store_id is not None:
            self.store_id = store_id
        if terminal_id is not None:
            self.terminal_id = terminal_id
        if es_key is not None:
            self.es_key = es_key
        if admin_service is not None:
            self.admin_service = admin_service
        if auto_rental_data is not None:
            self.auto_rental_data = auto_rental_data
        if healthcare_data is not None:
            self.healthcare_data = healthcare_data
        if bill_to is not None:
            self.bill_to = bill_to
        if card is not None:
            self.card = card
        if cc_auth_service is not None:
            self.cc_auth_service = cc_auth_service
        if cc_capture_service is not None:
            self.cc_capture_service = cc_capture_service
        if cc_credit_service is not None:
            self.cc_credit_service = cc_credit_service
        if cc_followup_service is not None:
            self.cc_followup_service = cc_followup_service
        if dcc_service is not None:
            self.dcc_service = dcc_service
        if dcc is not None:
            self.dcc = dcc
        if check is not None:
            self.check = check
        if clerk_id is not None:
            self.clerk_id = clerk_id
        if client_metadata is not None:
            self.client_metadata = client_metadata
        if comments is not None:
            self.comments = comments
        if discount_service is not None:
            self.discount_service = discount_service
        if efv_options is not None:
            self.efv_options = efv_options
        if fleet_data is not None:
            self.fleet_data = fleet_data
        if fraud_check_service is not None:
            self.fraud_check_service = fraud_check_service
        if inquiry_service is not None:
            self.inquiry_service = inquiry_service
        if hotel_data is not None:
            self.hotel_data = hotel_data
        if invoice_discount_detail is not None:
            self.invoice_discount_detail = invoice_discount_detail
        if invoice_service is not None:
            self.invoice_service = invoice_service
        if invoice_header is not None:
            self.invoice_header = invoice_header
        if items is not None:
            self.items = items
        if payments is not None:
            self.payments = payments
        if language is not None:
            self.language = language
        if loyalty_service is not None:
            self.loyalty_service = loyalty_service
        if request_incentives is not None:
            self.request_incentives = request_incentives
        if merchant_defined_data is not None:
            self.merchant_defined_data = merchant_defined_data
        if magic_cookie is not None:
            self.magic_cookie = magic_cookie
        if merchant_reference_code is not None:
            self.merchant_reference_code = merchant_reference_code
        if merchant_batch_id is not None:
            self.merchant_batch_id = merchant_batch_id
        if message_service is not None:
            self.message_service = message_service
        if mobile_service is not None:
            self.mobile_service = mobile_service
        if network_data is not None:
            self.network_data = network_data
        if offline_control is not None:
            self.offline_control = offline_control
        if order_request_id is not None:
            self.order_request_id = order_request_id
        if order_request_token is not None:
            self.order_request_token = order_request_token
        if pos is not None:
            self.pos = pos
        if promo_service is not None:
            self.promo_service = promo_service
        if purchase_totals is not None:
            self.purchase_totals = purchase_totals
        if restaurant_data is not None:
            self.restaurant_data = restaurant_data
        if response_flags is not None:
            self.response_flags = response_flags
        if session_key is not None:
            self.session_key = session_key
        if session_service is not None:
            self.session_service = session_service
        if ship_from is not None:
            self.ship_from = ship_from
        if ship_to is not None:
            self.ship_to = ship_to
        if token_create_service is not None:
            self.token_create_service = token_create_service
        if vend_control_service is not None:
            self.vend_control_service = vend_control_service
        if void_service is not None:
            self.void_service = void_service
        if tor_service is not None:
            self.tor_service = tor_service
        if eod_service is not None:
            self.eod_service = eod_service
        if incentive_service is not None:
            self.incentive_service = incentive_service
        if member_data is not None:
            self.member_data = member_data

    @property
    def client_id(self):
        """Gets the client_id of this RequestMessage.  # noqa: E501


        :return: The client_id of this RequestMessage.  # noqa: E501
        :rtype: str
        """
        return self._client_id

    @client_id.setter
    def client_id(self, client_id):
        """Sets the client_id of this RequestMessage.


        :param client_id: The client_id of this RequestMessage.  # noqa: E501
        :type: str
        """

        self._client_id = client_id

    @property
    def store_id(self):
        """Gets the store_id of this RequestMessage.  # noqa: E501


        :return: The store_id of this RequestMessage.  # noqa: E501
        :rtype: str
        """
        return self._store_id

    @store_id.setter
    def store_id(self, store_id):
        """Sets the store_id of this RequestMessage.


        :param store_id: The store_id of this RequestMessage.  # noqa: E501
        :type: str
        """

        self._store_id = store_id

    @property
    def terminal_id(self):
        """Gets the terminal_id of this RequestMessage.  # noqa: E501


        :return: The terminal_id of this RequestMessage.  # noqa: E501
        :rtype: str
        """
        return self._terminal_id

    @terminal_id.setter
    def terminal_id(self, terminal_id):
        """Sets the terminal_id of this RequestMessage.


        :param terminal_id: The terminal_id of this RequestMessage.  # noqa: E501
        :type: str
        """

        self._terminal_id = terminal_id

    @property
    def es_key(self):
        """Gets the es_key of this RequestMessage.  # noqa: E501


        :return: The es_key of this RequestMessage.  # noqa: E501
        :rtype: str
        """
        return self._es_key

    @es_key.setter
    def es_key(self, es_key):
        """Sets the es_key of this RequestMessage.


        :param es_key: The es_key of this RequestMessage.  # noqa: E501
        :type: str
        """

        self._es_key = es_key

    @property
    def admin_service(self):
        """Gets the admin_service of this RequestMessage.  # noqa: E501


        :return: The admin_service of this RequestMessage.  # noqa: E501
        :rtype: AdminService
        """
        return self._admin_service

    @admin_service.setter
    def admin_service(self, admin_service):
        """Sets the admin_service of this RequestMessage.


        :param admin_service: The admin_service of this RequestMessage.  # noqa: E501
        :type: AdminService
        """

        self._admin_service = admin_service

    @property
    def auto_rental_data(self):
        """Gets the auto_rental_data of this RequestMessage.  # noqa: E501


        :return: The auto_rental_data of this RequestMessage.  # noqa: E501
        :rtype: AutoRentalData
        """
        return self._auto_rental_data

    @auto_rental_data.setter
    def auto_rental_data(self, auto_rental_data):
        """Sets the auto_rental_data of this RequestMessage.


        :param auto_rental_data: The auto_rental_data of this RequestMessage.  # noqa: E501
        :type: AutoRentalData
        """

        self._auto_rental_data = auto_rental_data

    @property
    def healthcare_data(self):
        """Gets the healthcare_data of this RequestMessage.  # noqa: E501


        :return: The healthcare_data of this RequestMessage.  # noqa: E501
        :rtype: HealthcareDataWeb
        """
        return self._healthcare_data

    @healthcare_data.setter
    def healthcare_data(self, healthcare_data):
        """Sets the healthcare_data of this RequestMessage.


        :param healthcare_data: The healthcare_data of this RequestMessage.  # noqa: E501
        :type: HealthcareDataWeb
        """

        self._healthcare_data = healthcare_data

    @property
    def bill_to(self):
        """Gets the bill_to of this RequestMessage.  # noqa: E501


        :return: The bill_to of this RequestMessage.  # noqa: E501
        :rtype: BillTo
        """
        return self._bill_to

    @bill_to.setter
    def bill_to(self, bill_to):
        """Sets the bill_to of this RequestMessage.


        :param bill_to: The bill_to of this RequestMessage.  # noqa: E501
        :type: BillTo
        """

        self._bill_to = bill_to

    @property
    def card(self):
        """Gets the card of this RequestMessage.  # noqa: E501


        :return: The card of this RequestMessage.  # noqa: E501
        :rtype: Card
        """
        return self._card

    @card.setter
    def card(self, card):
        """Sets the card of this RequestMessage.


        :param card: The card of this RequestMessage.  # noqa: E501
        :type: Card
        """

        self._card = card

    @property
    def cc_auth_service(self):
        """Gets the cc_auth_service of this RequestMessage.  # noqa: E501


        :return: The cc_auth_service of this RequestMessage.  # noqa: E501
        :rtype: CCAuthService
        """
        return self._cc_auth_service

    @cc_auth_service.setter
    def cc_auth_service(self, cc_auth_service):
        """Sets the cc_auth_service of this RequestMessage.


        :param cc_auth_service: The cc_auth_service of this RequestMessage.  # noqa: E501
        :type: CCAuthService
        """

        self._cc_auth_service = cc_auth_service

    @property
    def cc_capture_service(self):
        """Gets the cc_capture_service of this RequestMessage.  # noqa: E501


        :return: The cc_capture_service of this RequestMessage.  # noqa: E501
        :rtype: CCCaptureService
        """
        return self._cc_capture_service

    @cc_capture_service.setter
    def cc_capture_service(self, cc_capture_service):
        """Sets the cc_capture_service of this RequestMessage.


        :param cc_capture_service: The cc_capture_service of this RequestMessage.  # noqa: E501
        :type: CCCaptureService
        """

        self._cc_capture_service = cc_capture_service

    @property
    def cc_credit_service(self):
        """Gets the cc_credit_service of this RequestMessage.  # noqa: E501


        :return: The cc_credit_service of this RequestMessage.  # noqa: E501
        :rtype: CCCreditService
        """
        return self._cc_credit_service

    @cc_credit_service.setter
    def cc_credit_service(self, cc_credit_service):
        """Sets the cc_credit_service of this RequestMessage.


        :param cc_credit_service: The cc_credit_service of this RequestMessage.  # noqa: E501
        :type: CCCreditService
        """

        self._cc_credit_service = cc_credit_service

    @property
    def cc_followup_service(self):
        """Gets the cc_followup_service of this RequestMessage.  # noqa: E501


        :return: The cc_followup_service of this RequestMessage.  # noqa: E501
        :rtype: CCFollowupService
        """
        return self._cc_followup_service

    @cc_followup_service.setter
    def cc_followup_service(self, cc_followup_service):
        """Sets the cc_followup_service of this RequestMessage.


        :param cc_followup_service: The cc_followup_service of this RequestMessage.  # noqa: E501
        :type: CCFollowupService
        """

        self._cc_followup_service = cc_followup_service

    @property
    def dcc_service(self):
        """Gets the dcc_service of this RequestMessage.  # noqa: E501


        :return: The dcc_service of this RequestMessage.  # noqa: E501
        :rtype: DccService
        """
        return self._dcc_service

    @dcc_service.setter
    def dcc_service(self, dcc_service):
        """Sets the dcc_service of this RequestMessage.


        :param dcc_service: The dcc_service of this RequestMessage.  # noqa: E501
        :type: DccService
        """

        self._dcc_service = dcc_service

    @property
    def dcc(self):
        """Gets the dcc of this RequestMessage.  # noqa: E501


        :return: The dcc of this RequestMessage.  # noqa: E501
        :rtype: DccInfo
        """
        return self._dcc

    @dcc.setter
    def dcc(self, dcc):
        """Sets the dcc of this RequestMessage.


        :param dcc: The dcc of this RequestMessage.  # noqa: E501
        :type: DccInfo
        """

        self._dcc = dcc

    @property
    def check(self):
        """Gets the check of this RequestMessage.  # noqa: E501


        :return: The check of this RequestMessage.  # noqa: E501
        :rtype: Check
        """
        return self._check

    @check.setter
    def check(self, check):
        """Sets the check of this RequestMessage.


        :param check: The check of this RequestMessage.  # noqa: E501
        :type: Check
        """

        self._check = check

    @property
    def clerk_id(self):
        """Gets the clerk_id of this RequestMessage.  # noqa: E501


        :return: The clerk_id of this RequestMessage.  # noqa: E501
        :rtype: str
        """
        return self._clerk_id

    @clerk_id.setter
    def clerk_id(self, clerk_id):
        """Sets the clerk_id of this RequestMessage.


        :param clerk_id: The clerk_id of this RequestMessage.  # noqa: E501
        :type: str
        """

        self._clerk_id = clerk_id

    @property
    def client_metadata(self):
        """Gets the client_metadata of this RequestMessage.  # noqa: E501


        :return: The client_metadata of this RequestMessage.  # noqa: E501
        :rtype: ClientMetadata
        """
        return self._client_metadata

    @client_metadata.setter
    def client_metadata(self, client_metadata):
        """Sets the client_metadata of this RequestMessage.


        :param client_metadata: The client_metadata of this RequestMessage.  # noqa: E501
        :type: ClientMetadata
        """

        self._client_metadata = client_metadata

    @property
    def comments(self):
        """Gets the comments of this RequestMessage.  # noqa: E501


        :return: The comments of this RequestMessage.  # noqa: E501
        :rtype: str
        """
        return self._comments

    @comments.setter
    def comments(self, comments):
        """Sets the comments of this RequestMessage.


        :param comments: The comments of this RequestMessage.  # noqa: E501
        :type: str
        """

        self._comments = comments

    @property
    def discount_service(self):
        """Gets the discount_service of this RequestMessage.  # noqa: E501


        :return: The discount_service of this RequestMessage.  # noqa: E501
        :rtype: DiscountService
        """
        return self._discount_service

    @discount_service.setter
    def discount_service(self, discount_service):
        """Sets the discount_service of this RequestMessage.


        :param discount_service: The discount_service of this RequestMessage.  # noqa: E501
        :type: DiscountService
        """

        self._discount_service = discount_service

    @property
    def efv_options(self):
        """Gets the efv_options of this RequestMessage.  # noqa: E501


        :return: The efv_options of this RequestMessage.  # noqa: E501
        :rtype: EfvOptions
        """
        return self._efv_options

    @efv_options.setter
    def efv_options(self, efv_options):
        """Sets the efv_options of this RequestMessage.


        :param efv_options: The efv_options of this RequestMessage.  # noqa: E501
        :type: EfvOptions
        """

        self._efv_options = efv_options

    @property
    def fleet_data(self):
        """Gets the fleet_data of this RequestMessage.  # noqa: E501


        :return: The fleet_data of this RequestMessage.  # noqa: E501
        :rtype: FleetData
        """
        return self._fleet_data

    @fleet_data.setter
    def fleet_data(self, fleet_data):
        """Sets the fleet_data of this RequestMessage.


        :param fleet_data: The fleet_data of this RequestMessage.  # noqa: E501
        :type: FleetData
        """

        self._fleet_data = fleet_data

    @property
    def fraud_check_service(self):
        """Gets the fraud_check_service of this RequestMessage.  # noqa: E501


        :return: The fraud_check_service of this RequestMessage.  # noqa: E501
        :rtype: FraudCheckService
        """
        return self._fraud_check_service

    @fraud_check_service.setter
    def fraud_check_service(self, fraud_check_service):
        """Sets the fraud_check_service of this RequestMessage.


        :param fraud_check_service: The fraud_check_service of this RequestMessage.  # noqa: E501
        :type: FraudCheckService
        """

        self._fraud_check_service = fraud_check_service

    @property
    def inquiry_service(self):
        """Gets the inquiry_service of this RequestMessage.  # noqa: E501


        :return: The inquiry_service of this RequestMessage.  # noqa: E501
        :rtype: InquiryService
        """
        return self._inquiry_service

    @inquiry_service.setter
    def inquiry_service(self, inquiry_service):
        """Sets the inquiry_service of this RequestMessage.


        :param inquiry_service: The inquiry_service of this RequestMessage.  # noqa: E501
        :type: InquiryService
        """

        self._inquiry_service = inquiry_service

    @property
    def hotel_data(self):
        """Gets the hotel_data of this RequestMessage.  # noqa: E501


        :return: The hotel_data of this RequestMessage.  # noqa: E501
        :rtype: HotelData
        """
        return self._hotel_data

    @hotel_data.setter
    def hotel_data(self, hotel_data):
        """Sets the hotel_data of this RequestMessage.


        :param hotel_data: The hotel_data of this RequestMessage.  # noqa: E501
        :type: HotelData
        """

        self._hotel_data = hotel_data

    @property
    def invoice_discount_detail(self):
        """Gets the invoice_discount_detail of this RequestMessage.  # noqa: E501


        :return: The invoice_discount_detail of this RequestMessage.  # noqa: E501
        :rtype: list[EIDDetail]
        """
        return self._invoice_discount_detail

    @invoice_discount_detail.setter
    def invoice_discount_detail(self, invoice_discount_detail):
        """Sets the invoice_discount_detail of this RequestMessage.


        :param invoice_discount_detail: The invoice_discount_detail of this RequestMessage.  # noqa: E501
        :type: list[EIDDetail]
        """

        self._invoice_discount_detail = invoice_discount_detail

    @property
    def invoice_service(self):
        """Gets the invoice_service of this RequestMessage.  # noqa: E501


        :return: The invoice_service of this RequestMessage.  # noqa: E501
        :rtype: InvoiceService
        """
        return self._invoice_service

    @invoice_service.setter
    def invoice_service(self, invoice_service):
        """Sets the invoice_service of this RequestMessage.


        :param invoice_service: The invoice_service of this RequestMessage.  # noqa: E501
        :type: InvoiceService
        """

        self._invoice_service = invoice_service

    @property
    def invoice_header(self):
        """Gets the invoice_header of this RequestMessage.  # noqa: E501


        :return: The invoice_header of this RequestMessage.  # noqa: E501
        :rtype: InvoiceHeader
        """
        return self._invoice_header

    @invoice_header.setter
    def invoice_header(self, invoice_header):
        """Sets the invoice_header of this RequestMessage.


        :param invoice_header: The invoice_header of this RequestMessage.  # noqa: E501
        :type: InvoiceHeader
        """

        self._invoice_header = invoice_header

    @property
    def items(self):
        """Gets the items of this RequestMessage.  # noqa: E501


        :return: The items of this RequestMessage.  # noqa: E501
        :rtype: list[Item]
        """
        return self._items

    @items.setter
    def items(self, items):
        """Sets the items of this RequestMessage.


        :param items: The items of this RequestMessage.  # noqa: E501
        :type: list[Item]
        """

        self._items = items

    @property
    def payments(self):
        """Gets the payments of this RequestMessage.  # noqa: E501


        :return: The payments of this RequestMessage.  # noqa: E501
        :rtype: list[Payment]
        """
        return self._payments

    @payments.setter
    def payments(self, payments):
        """Sets the payments of this RequestMessage.


        :param payments: The payments of this RequestMessage.  # noqa: E501
        :type: list[Payment]
        """

        self._payments = payments

    @property
    def language(self):
        """Gets the language of this RequestMessage.  # noqa: E501


        :return: The language of this RequestMessage.  # noqa: E501
        :rtype: str
        """
        return self._language

    @language.setter
    def language(self, language):
        """Sets the language of this RequestMessage.


        :param language: The language of this RequestMessage.  # noqa: E501
        :type: str
        """

        self._language = language

    @property
    def loyalty_service(self):
        """Gets the loyalty_service of this RequestMessage.  # noqa: E501


        :return: The loyalty_service of this RequestMessage.  # noqa: E501
        :rtype: LoyaltyService
        """
        return self._loyalty_service

    @loyalty_service.setter
    def loyalty_service(self, loyalty_service):
        """Sets the loyalty_service of this RequestMessage.


        :param loyalty_service: The loyalty_service of this RequestMessage.  # noqa: E501
        :type: LoyaltyService
        """

        self._loyalty_service = loyalty_service

    @property
    def request_incentives(self):
        """Gets the request_incentives of this RequestMessage.  # noqa: E501


        :return: The request_incentives of this RequestMessage.  # noqa: E501
        :rtype: RequestIncentives
        """
        return self._request_incentives

    @request_incentives.setter
    def request_incentives(self, request_incentives):
        """Sets the request_incentives of this RequestMessage.


        :param request_incentives: The request_incentives of this RequestMessage.  # noqa: E501
        :type: RequestIncentives
        """

        self._request_incentives = request_incentives

    @property
    def merchant_defined_data(self):
        """Gets the merchant_defined_data of this RequestMessage.  # noqa: E501


        :return: The merchant_defined_data of this RequestMessage.  # noqa: E501
        :rtype: MerchantDefinedData
        """
        return self._merchant_defined_data

    @merchant_defined_data.setter
    def merchant_defined_data(self, merchant_defined_data):
        """Sets the merchant_defined_data of this RequestMessage.


        :param merchant_defined_data: The merchant_defined_data of this RequestMessage.  # noqa: E501
        :type: MerchantDefinedData
        """

        self._merchant_defined_data = merchant_defined_data

    @property
    def magic_cookie(self):
        """Gets the magic_cookie of this RequestMessage.  # noqa: E501


        :return: The magic_cookie of this RequestMessage.  # noqa: E501
        :rtype: str
        """
        return self._magic_cookie

    @magic_cookie.setter
    def magic_cookie(self, magic_cookie):
        """Sets the magic_cookie of this RequestMessage.


        :param magic_cookie: The magic_cookie of this RequestMessage.  # noqa: E501
        :type: str
        """

        self._magic_cookie = magic_cookie

    @property
    def merchant_reference_code(self):
        """Gets the merchant_reference_code of this RequestMessage.  # noqa: E501


        :return: The merchant_reference_code of this RequestMessage.  # noqa: E501
        :rtype: str
        """
        return self._merchant_reference_code

    @merchant_reference_code.setter
    def merchant_reference_code(self, merchant_reference_code):
        """Sets the merchant_reference_code of this RequestMessage.


        :param merchant_reference_code: The merchant_reference_code of this RequestMessage.  # noqa: E501
        :type: str
        """

        self._merchant_reference_code = merchant_reference_code

    @property
    def merchant_batch_id(self):
        """Gets the merchant_batch_id of this RequestMessage.  # noqa: E501


        :return: The merchant_batch_id of this RequestMessage.  # noqa: E501
        :rtype: str
        """
        return self._merchant_batch_id

    @merchant_batch_id.setter
    def merchant_batch_id(self, merchant_batch_id):
        """Sets the merchant_batch_id of this RequestMessage.


        :param merchant_batch_id: The merchant_batch_id of this RequestMessage.  # noqa: E501
        :type: str
        """

        self._merchant_batch_id = merchant_batch_id

    @property
    def message_service(self):
        """Gets the message_service of this RequestMessage.  # noqa: E501


        :return: The message_service of this RequestMessage.  # noqa: E501
        :rtype: MessageService
        """
        return self._message_service

    @message_service.setter
    def message_service(self, message_service):
        """Sets the message_service of this RequestMessage.


        :param message_service: The message_service of this RequestMessage.  # noqa: E501
        :type: MessageService
        """

        self._message_service = message_service

    @property
    def mobile_service(self):
        """Gets the mobile_service of this RequestMessage.  # noqa: E501


        :return: The mobile_service of this RequestMessage.  # noqa: E501
        :rtype: MobileService
        """
        return self._mobile_service

    @mobile_service.setter
    def mobile_service(self, mobile_service):
        """Sets the mobile_service of this RequestMessage.


        :param mobile_service: The mobile_service of this RequestMessage.  # noqa: E501
        :type: MobileService
        """

        self._mobile_service = mobile_service

    @property
    def network_data(self):
        """Gets the network_data of this RequestMessage.  # noqa: E501


        :return: The network_data of this RequestMessage.  # noqa: E501
        :rtype: NetworkData
        """
        return self._network_data

    @network_data.setter
    def network_data(self, network_data):
        """Sets the network_data of this RequestMessage.


        :param network_data: The network_data of this RequestMessage.  # noqa: E501
        :type: NetworkData
        """

        self._network_data = network_data

    @property
    def offline_control(self):
        """Gets the offline_control of this RequestMessage.  # noqa: E501


        :return: The offline_control of this RequestMessage.  # noqa: E501
        :rtype: OfflineControl
        """
        return self._offline_control

    @offline_control.setter
    def offline_control(self, offline_control):
        """Sets the offline_control of this RequestMessage.


        :param offline_control: The offline_control of this RequestMessage.  # noqa: E501
        :type: OfflineControl
        """

        self._offline_control = offline_control

    @property
    def order_request_id(self):
        """Gets the order_request_id of this RequestMessage.  # noqa: E501


        :return: The order_request_id of this RequestMessage.  # noqa: E501
        :rtype: str
        """
        return self._order_request_id

    @order_request_id.setter
    def order_request_id(self, order_request_id):
        """Sets the order_request_id of this RequestMessage.


        :param order_request_id: The order_request_id of this RequestMessage.  # noqa: E501
        :type: str
        """

        self._order_request_id = order_request_id

    @property
    def order_request_token(self):
        """Gets the order_request_token of this RequestMessage.  # noqa: E501


        :return: The order_request_token of this RequestMessage.  # noqa: E501
        :rtype: str
        """
        return self._order_request_token

    @order_request_token.setter
    def order_request_token(self, order_request_token):
        """Sets the order_request_token of this RequestMessage.


        :param order_request_token: The order_request_token of this RequestMessage.  # noqa: E501
        :type: str
        """

        self._order_request_token = order_request_token

    @property
    def pos(self):
        """Gets the pos of this RequestMessage.  # noqa: E501


        :return: The pos of this RequestMessage.  # noqa: E501
        :rtype: Pos
        """
        return self._pos

    @pos.setter
    def pos(self, pos):
        """Sets the pos of this RequestMessage.


        :param pos: The pos of this RequestMessage.  # noqa: E501
        :type: Pos
        """

        self._pos = pos

    @property
    def promo_service(self):
        """Gets the promo_service of this RequestMessage.  # noqa: E501


        :return: The promo_service of this RequestMessage.  # noqa: E501
        :rtype: PromoService
        """
        return self._promo_service

    @promo_service.setter
    def promo_service(self, promo_service):
        """Sets the promo_service of this RequestMessage.


        :param promo_service: The promo_service of this RequestMessage.  # noqa: E501
        :type: PromoService
        """

        self._promo_service = promo_service

    @property
    def purchase_totals(self):
        """Gets the purchase_totals of this RequestMessage.  # noqa: E501


        :return: The purchase_totals of this RequestMessage.  # noqa: E501
        :rtype: PurchaseTotals
        """
        return self._purchase_totals

    @purchase_totals.setter
    def purchase_totals(self, purchase_totals):
        """Sets the purchase_totals of this RequestMessage.


        :param purchase_totals: The purchase_totals of this RequestMessage.  # noqa: E501
        :type: PurchaseTotals
        """

        self._purchase_totals = purchase_totals

    @property
    def restaurant_data(self):
        """Gets the restaurant_data of this RequestMessage.  # noqa: E501


        :return: The restaurant_data of this RequestMessage.  # noqa: E501
        :rtype: RestaurantData
        """
        return self._restaurant_data

    @restaurant_data.setter
    def restaurant_data(self, restaurant_data):
        """Sets the restaurant_data of this RequestMessage.


        :param restaurant_data: The restaurant_data of this RequestMessage.  # noqa: E501
        :type: RestaurantData
        """

        self._restaurant_data = restaurant_data

    @property
    def response_flags(self):
        """Gets the response_flags of this RequestMessage.  # noqa: E501


        :return: The response_flags of this RequestMessage.  # noqa: E501
        :rtype: str
        """
        return self._response_flags

    @response_flags.setter
    def response_flags(self, response_flags):
        """Sets the response_flags of this RequestMessage.


        :param response_flags: The response_flags of this RequestMessage.  # noqa: E501
        :type: str
        """

        self._response_flags = response_flags

    @property
    def session_key(self):
        """Gets the session_key of this RequestMessage.  # noqa: E501


        :return: The session_key of this RequestMessage.  # noqa: E501
        :rtype: str
        """
        return self._session_key

    @session_key.setter
    def session_key(self, session_key):
        """Sets the session_key of this RequestMessage.


        :param session_key: The session_key of this RequestMessage.  # noqa: E501
        :type: str
        """

        self._session_key = session_key

    @property
    def session_service(self):
        """Gets the session_service of this RequestMessage.  # noqa: E501


        :return: The session_service of this RequestMessage.  # noqa: E501
        :rtype: SessionService
        """
        return self._session_service

    @session_service.setter
    def session_service(self, session_service):
        """Sets the session_service of this RequestMessage.


        :param session_service: The session_service of this RequestMessage.  # noqa: E501
        :type: SessionService
        """

        self._session_service = session_service

    @property
    def ship_from(self):
        """Gets the ship_from of this RequestMessage.  # noqa: E501


        :return: The ship_from of this RequestMessage.  # noqa: E501
        :rtype: ShipFrom
        """
        return self._ship_from

    @ship_from.setter
    def ship_from(self, ship_from):
        """Sets the ship_from of this RequestMessage.


        :param ship_from: The ship_from of this RequestMessage.  # noqa: E501
        :type: ShipFrom
        """

        self._ship_from = ship_from

    @property
    def ship_to(self):
        """Gets the ship_to of this RequestMessage.  # noqa: E501


        :return: The ship_to of this RequestMessage.  # noqa: E501
        :rtype: ShipTo
        """
        return self._ship_to

    @ship_to.setter
    def ship_to(self, ship_to):
        """Sets the ship_to of this RequestMessage.


        :param ship_to: The ship_to of this RequestMessage.  # noqa: E501
        :type: ShipTo
        """

        self._ship_to = ship_to

    @property
    def token_create_service(self):
        """Gets the token_create_service of this RequestMessage.  # noqa: E501


        :return: The token_create_service of this RequestMessage.  # noqa: E501
        :rtype: TokenCreateService
        """
        return self._token_create_service

    @token_create_service.setter
    def token_create_service(self, token_create_service):
        """Sets the token_create_service of this RequestMessage.


        :param token_create_service: The token_create_service of this RequestMessage.  # noqa: E501
        :type: TokenCreateService
        """

        self._token_create_service = token_create_service

    @property
    def vend_control_service(self):
        """Gets the vend_control_service of this RequestMessage.  # noqa: E501


        :return: The vend_control_service of this RequestMessage.  # noqa: E501
        :rtype: VendControlService
        """
        return self._vend_control_service

    @vend_control_service.setter
    def vend_control_service(self, vend_control_service):
        """Sets the vend_control_service of this RequestMessage.


        :param vend_control_service: The vend_control_service of this RequestMessage.  # noqa: E501
        :type: VendControlService
        """

        self._vend_control_service = vend_control_service

    @property
    def void_service(self):
        """Gets the void_service of this RequestMessage.  # noqa: E501


        :return: The void_service of this RequestMessage.  # noqa: E501
        :rtype: VoidService
        """
        return self._void_service

    @void_service.setter
    def void_service(self, void_service):
        """Sets the void_service of this RequestMessage.


        :param void_service: The void_service of this RequestMessage.  # noqa: E501
        :type: VoidService
        """

        self._void_service = void_service

    @property
    def tor_service(self):
        """Gets the tor_service of this RequestMessage.  # noqa: E501


        :return: The tor_service of this RequestMessage.  # noqa: E501
        :rtype: TORService
        """
        return self._tor_service

    @tor_service.setter
    def tor_service(self, tor_service):
        """Sets the tor_service of this RequestMessage.


        :param tor_service: The tor_service of this RequestMessage.  # noqa: E501
        :type: TORService
        """

        self._tor_service = tor_service

    @property
    def eod_service(self):
        """Gets the eod_service of this RequestMessage.  # noqa: E501


        :return: The eod_service of this RequestMessage.  # noqa: E501
        :rtype: EodService
        """
        return self._eod_service

    @eod_service.setter
    def eod_service(self, eod_service):
        """Sets the eod_service of this RequestMessage.


        :param eod_service: The eod_service of this RequestMessage.  # noqa: E501
        :type: EodService
        """

        self._eod_service = eod_service

    @property
    def incentive_service(self):
        """Gets the incentive_service of this RequestMessage.  # noqa: E501


        :return: The incentive_service of this RequestMessage.  # noqa: E501
        :rtype: IncentiveService
        """
        return self._incentive_service

    @incentive_service.setter
    def incentive_service(self, incentive_service):
        """Sets the incentive_service of this RequestMessage.


        :param incentive_service: The incentive_service of this RequestMessage.  # noqa: E501
        :type: IncentiveService
        """

        self._incentive_service = incentive_service

    @property
    def member_data(self):
        """Gets the member_data of this RequestMessage.  # noqa: E501


        :return: The member_data of this RequestMessage.  # noqa: E501
        :rtype: MemberData
        """
        return self._member_data

    @member_data.setter
    def member_data(self, member_data):
        """Sets the member_data of this RequestMessage.


        :param member_data: The member_data of this RequestMessage.  # noqa: E501
        :type: MemberData
        """

        self._member_data = member_data

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(RequestMessage, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, RequestMessage):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, RequestMessage):
            return True

        return self.to_dict() != other.to_dict()
