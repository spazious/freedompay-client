# coding: utf-8

"""
    Hosted Payment Controls API Documentation v1.5

    The API for Hosted Payment Controls. To access the swagger.json file open the following link: https://hpc.uat.freedompay.com/api/swagger/docs/v1.5  # noqa: E501

    OpenAPI spec version: v1.5
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from freedompay_client.configuration import Configuration


class NetworkData(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'network': 'str',
        'stan': 'str',
        'aci': 'str',
        'tdcc': 'str',
        'pcode': 'str',
        'vcode': 'str',
        'downgrade_code': 'str',
        'cvc_error': 'str',
        'data_error': 'str',
        'auth_source': 'str',
        'response_code': 'str',
        'product_id': 'str',
        'program_id': 'str',
        'merchant_advice': 'str',
        'service_option': 'str',
        'fleet_prompts': 'str',
        'custom_data': 'list[NetworkCustomData]',
        'mac': 'str',
        'pos_seq_num': 'str',
        'mac_key': 'str',
        'pin_key': 'str',
        'field_key': 'str',
        'trans_date': 'str',
        'trans_time': 'str',
        'host_control_data': 'str'
    }

    attribute_map = {
        'network': 'network',
        'stan': 'stan',
        'aci': 'aci',
        'tdcc': 'tdcc',
        'pcode': 'pcode',
        'vcode': 'vcode',
        'downgrade_code': 'downgradeCode',
        'cvc_error': 'cvcError',
        'data_error': 'dataError',
        'auth_source': 'authSource',
        'response_code': 'responseCode',
        'product_id': 'productId',
        'program_id': 'programId',
        'merchant_advice': 'merchantAdvice',
        'service_option': 'serviceOption',
        'fleet_prompts': 'fleetPrompts',
        'custom_data': 'customData',
        'mac': 'mac',
        'pos_seq_num': 'posSeqNum',
        'mac_key': 'macKey',
        'pin_key': 'pinKey',
        'field_key': 'fieldKey',
        'trans_date': 'transDate',
        'trans_time': 'transTime',
        'host_control_data': 'hostControlData'
    }

    def __init__(self, network=None, stan=None, aci=None, tdcc=None, pcode=None, vcode=None, downgrade_code=None, cvc_error=None, data_error=None, auth_source=None, response_code=None, product_id=None, program_id=None, merchant_advice=None, service_option=None, fleet_prompts=None, custom_data=None, mac=None, pos_seq_num=None, mac_key=None, pin_key=None, field_key=None, trans_date=None, trans_time=None, host_control_data=None, _configuration=None):  # noqa: E501
        """NetworkData - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._network = None
        self._stan = None
        self._aci = None
        self._tdcc = None
        self._pcode = None
        self._vcode = None
        self._downgrade_code = None
        self._cvc_error = None
        self._data_error = None
        self._auth_source = None
        self._response_code = None
        self._product_id = None
        self._program_id = None
        self._merchant_advice = None
        self._service_option = None
        self._fleet_prompts = None
        self._custom_data = None
        self._mac = None
        self._pos_seq_num = None
        self._mac_key = None
        self._pin_key = None
        self._field_key = None
        self._trans_date = None
        self._trans_time = None
        self._host_control_data = None
        self.discriminator = None

        if network is not None:
            self.network = network
        if stan is not None:
            self.stan = stan
        if aci is not None:
            self.aci = aci
        if tdcc is not None:
            self.tdcc = tdcc
        if pcode is not None:
            self.pcode = pcode
        if vcode is not None:
            self.vcode = vcode
        if downgrade_code is not None:
            self.downgrade_code = downgrade_code
        if cvc_error is not None:
            self.cvc_error = cvc_error
        if data_error is not None:
            self.data_error = data_error
        if auth_source is not None:
            self.auth_source = auth_source
        if response_code is not None:
            self.response_code = response_code
        if product_id is not None:
            self.product_id = product_id
        if program_id is not None:
            self.program_id = program_id
        if merchant_advice is not None:
            self.merchant_advice = merchant_advice
        if service_option is not None:
            self.service_option = service_option
        if fleet_prompts is not None:
            self.fleet_prompts = fleet_prompts
        if custom_data is not None:
            self.custom_data = custom_data
        if mac is not None:
            self.mac = mac
        if pos_seq_num is not None:
            self.pos_seq_num = pos_seq_num
        if mac_key is not None:
            self.mac_key = mac_key
        if pin_key is not None:
            self.pin_key = pin_key
        if field_key is not None:
            self.field_key = field_key
        if trans_date is not None:
            self.trans_date = trans_date
        if trans_time is not None:
            self.trans_time = trans_time
        if host_control_data is not None:
            self.host_control_data = host_control_data

    @property
    def network(self):
        """Gets the network of this NetworkData.  # noqa: E501


        :return: The network of this NetworkData.  # noqa: E501
        :rtype: str
        """
        return self._network

    @network.setter
    def network(self, network):
        """Sets the network of this NetworkData.


        :param network: The network of this NetworkData.  # noqa: E501
        :type: str
        """

        self._network = network

    @property
    def stan(self):
        """Gets the stan of this NetworkData.  # noqa: E501


        :return: The stan of this NetworkData.  # noqa: E501
        :rtype: str
        """
        return self._stan

    @stan.setter
    def stan(self, stan):
        """Sets the stan of this NetworkData.


        :param stan: The stan of this NetworkData.  # noqa: E501
        :type: str
        """

        self._stan = stan

    @property
    def aci(self):
        """Gets the aci of this NetworkData.  # noqa: E501


        :return: The aci of this NetworkData.  # noqa: E501
        :rtype: str
        """
        return self._aci

    @aci.setter
    def aci(self, aci):
        """Sets the aci of this NetworkData.


        :param aci: The aci of this NetworkData.  # noqa: E501
        :type: str
        """

        self._aci = aci

    @property
    def tdcc(self):
        """Gets the tdcc of this NetworkData.  # noqa: E501


        :return: The tdcc of this NetworkData.  # noqa: E501
        :rtype: str
        """
        return self._tdcc

    @tdcc.setter
    def tdcc(self, tdcc):
        """Sets the tdcc of this NetworkData.


        :param tdcc: The tdcc of this NetworkData.  # noqa: E501
        :type: str
        """

        self._tdcc = tdcc

    @property
    def pcode(self):
        """Gets the pcode of this NetworkData.  # noqa: E501


        :return: The pcode of this NetworkData.  # noqa: E501
        :rtype: str
        """
        return self._pcode

    @pcode.setter
    def pcode(self, pcode):
        """Sets the pcode of this NetworkData.


        :param pcode: The pcode of this NetworkData.  # noqa: E501
        :type: str
        """

        self._pcode = pcode

    @property
    def vcode(self):
        """Gets the vcode of this NetworkData.  # noqa: E501


        :return: The vcode of this NetworkData.  # noqa: E501
        :rtype: str
        """
        return self._vcode

    @vcode.setter
    def vcode(self, vcode):
        """Sets the vcode of this NetworkData.


        :param vcode: The vcode of this NetworkData.  # noqa: E501
        :type: str
        """

        self._vcode = vcode

    @property
    def downgrade_code(self):
        """Gets the downgrade_code of this NetworkData.  # noqa: E501


        :return: The downgrade_code of this NetworkData.  # noqa: E501
        :rtype: str
        """
        return self._downgrade_code

    @downgrade_code.setter
    def downgrade_code(self, downgrade_code):
        """Sets the downgrade_code of this NetworkData.


        :param downgrade_code: The downgrade_code of this NetworkData.  # noqa: E501
        :type: str
        """

        self._downgrade_code = downgrade_code

    @property
    def cvc_error(self):
        """Gets the cvc_error of this NetworkData.  # noqa: E501


        :return: The cvc_error of this NetworkData.  # noqa: E501
        :rtype: str
        """
        return self._cvc_error

    @cvc_error.setter
    def cvc_error(self, cvc_error):
        """Sets the cvc_error of this NetworkData.


        :param cvc_error: The cvc_error of this NetworkData.  # noqa: E501
        :type: str
        """

        self._cvc_error = cvc_error

    @property
    def data_error(self):
        """Gets the data_error of this NetworkData.  # noqa: E501


        :return: The data_error of this NetworkData.  # noqa: E501
        :rtype: str
        """
        return self._data_error

    @data_error.setter
    def data_error(self, data_error):
        """Sets the data_error of this NetworkData.


        :param data_error: The data_error of this NetworkData.  # noqa: E501
        :type: str
        """

        self._data_error = data_error

    @property
    def auth_source(self):
        """Gets the auth_source of this NetworkData.  # noqa: E501


        :return: The auth_source of this NetworkData.  # noqa: E501
        :rtype: str
        """
        return self._auth_source

    @auth_source.setter
    def auth_source(self, auth_source):
        """Sets the auth_source of this NetworkData.


        :param auth_source: The auth_source of this NetworkData.  # noqa: E501
        :type: str
        """

        self._auth_source = auth_source

    @property
    def response_code(self):
        """Gets the response_code of this NetworkData.  # noqa: E501


        :return: The response_code of this NetworkData.  # noqa: E501
        :rtype: str
        """
        return self._response_code

    @response_code.setter
    def response_code(self, response_code):
        """Sets the response_code of this NetworkData.


        :param response_code: The response_code of this NetworkData.  # noqa: E501
        :type: str
        """

        self._response_code = response_code

    @property
    def product_id(self):
        """Gets the product_id of this NetworkData.  # noqa: E501


        :return: The product_id of this NetworkData.  # noqa: E501
        :rtype: str
        """
        return self._product_id

    @product_id.setter
    def product_id(self, product_id):
        """Sets the product_id of this NetworkData.


        :param product_id: The product_id of this NetworkData.  # noqa: E501
        :type: str
        """

        self._product_id = product_id

    @property
    def program_id(self):
        """Gets the program_id of this NetworkData.  # noqa: E501


        :return: The program_id of this NetworkData.  # noqa: E501
        :rtype: str
        """
        return self._program_id

    @program_id.setter
    def program_id(self, program_id):
        """Sets the program_id of this NetworkData.


        :param program_id: The program_id of this NetworkData.  # noqa: E501
        :type: str
        """

        self._program_id = program_id

    @property
    def merchant_advice(self):
        """Gets the merchant_advice of this NetworkData.  # noqa: E501


        :return: The merchant_advice of this NetworkData.  # noqa: E501
        :rtype: str
        """
        return self._merchant_advice

    @merchant_advice.setter
    def merchant_advice(self, merchant_advice):
        """Sets the merchant_advice of this NetworkData.


        :param merchant_advice: The merchant_advice of this NetworkData.  # noqa: E501
        :type: str
        """

        self._merchant_advice = merchant_advice

    @property
    def service_option(self):
        """Gets the service_option of this NetworkData.  # noqa: E501


        :return: The service_option of this NetworkData.  # noqa: E501
        :rtype: str
        """
        return self._service_option

    @service_option.setter
    def service_option(self, service_option):
        """Sets the service_option of this NetworkData.


        :param service_option: The service_option of this NetworkData.  # noqa: E501
        :type: str
        """

        self._service_option = service_option

    @property
    def fleet_prompts(self):
        """Gets the fleet_prompts of this NetworkData.  # noqa: E501


        :return: The fleet_prompts of this NetworkData.  # noqa: E501
        :rtype: str
        """
        return self._fleet_prompts

    @fleet_prompts.setter
    def fleet_prompts(self, fleet_prompts):
        """Sets the fleet_prompts of this NetworkData.


        :param fleet_prompts: The fleet_prompts of this NetworkData.  # noqa: E501
        :type: str
        """

        self._fleet_prompts = fleet_prompts

    @property
    def custom_data(self):
        """Gets the custom_data of this NetworkData.  # noqa: E501


        :return: The custom_data of this NetworkData.  # noqa: E501
        :rtype: list[NetworkCustomData]
        """
        return self._custom_data

    @custom_data.setter
    def custom_data(self, custom_data):
        """Sets the custom_data of this NetworkData.


        :param custom_data: The custom_data of this NetworkData.  # noqa: E501
        :type: list[NetworkCustomData]
        """

        self._custom_data = custom_data

    @property
    def mac(self):
        """Gets the mac of this NetworkData.  # noqa: E501


        :return: The mac of this NetworkData.  # noqa: E501
        :rtype: str
        """
        return self._mac

    @mac.setter
    def mac(self, mac):
        """Sets the mac of this NetworkData.


        :param mac: The mac of this NetworkData.  # noqa: E501
        :type: str
        """

        self._mac = mac

    @property
    def pos_seq_num(self):
        """Gets the pos_seq_num of this NetworkData.  # noqa: E501


        :return: The pos_seq_num of this NetworkData.  # noqa: E501
        :rtype: str
        """
        return self._pos_seq_num

    @pos_seq_num.setter
    def pos_seq_num(self, pos_seq_num):
        """Sets the pos_seq_num of this NetworkData.


        :param pos_seq_num: The pos_seq_num of this NetworkData.  # noqa: E501
        :type: str
        """

        self._pos_seq_num = pos_seq_num

    @property
    def mac_key(self):
        """Gets the mac_key of this NetworkData.  # noqa: E501


        :return: The mac_key of this NetworkData.  # noqa: E501
        :rtype: str
        """
        return self._mac_key

    @mac_key.setter
    def mac_key(self, mac_key):
        """Sets the mac_key of this NetworkData.


        :param mac_key: The mac_key of this NetworkData.  # noqa: E501
        :type: str
        """

        self._mac_key = mac_key

    @property
    def pin_key(self):
        """Gets the pin_key of this NetworkData.  # noqa: E501


        :return: The pin_key of this NetworkData.  # noqa: E501
        :rtype: str
        """
        return self._pin_key

    @pin_key.setter
    def pin_key(self, pin_key):
        """Sets the pin_key of this NetworkData.


        :param pin_key: The pin_key of this NetworkData.  # noqa: E501
        :type: str
        """

        self._pin_key = pin_key

    @property
    def field_key(self):
        """Gets the field_key of this NetworkData.  # noqa: E501


        :return: The field_key of this NetworkData.  # noqa: E501
        :rtype: str
        """
        return self._field_key

    @field_key.setter
    def field_key(self, field_key):
        """Sets the field_key of this NetworkData.


        :param field_key: The field_key of this NetworkData.  # noqa: E501
        :type: str
        """

        self._field_key = field_key

    @property
    def trans_date(self):
        """Gets the trans_date of this NetworkData.  # noqa: E501


        :return: The trans_date of this NetworkData.  # noqa: E501
        :rtype: str
        """
        return self._trans_date

    @trans_date.setter
    def trans_date(self, trans_date):
        """Sets the trans_date of this NetworkData.


        :param trans_date: The trans_date of this NetworkData.  # noqa: E501
        :type: str
        """

        self._trans_date = trans_date

    @property
    def trans_time(self):
        """Gets the trans_time of this NetworkData.  # noqa: E501


        :return: The trans_time of this NetworkData.  # noqa: E501
        :rtype: str
        """
        return self._trans_time

    @trans_time.setter
    def trans_time(self, trans_time):
        """Sets the trans_time of this NetworkData.


        :param trans_time: The trans_time of this NetworkData.  # noqa: E501
        :type: str
        """

        self._trans_time = trans_time

    @property
    def host_control_data(self):
        """Gets the host_control_data of this NetworkData.  # noqa: E501


        :return: The host_control_data of this NetworkData.  # noqa: E501
        :rtype: str
        """
        return self._host_control_data

    @host_control_data.setter
    def host_control_data(self, host_control_data):
        """Sets the host_control_data of this NetworkData.


        :param host_control_data: The host_control_data of this NetworkData.  # noqa: E501
        :type: str
        """

        self._host_control_data = host_control_data

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(NetworkData, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, NetworkData):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, NetworkData):
            return True

        return self.to_dict() != other.to_dict()
