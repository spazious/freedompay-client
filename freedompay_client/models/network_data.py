# coding: utf-8

"""
    Hosted Payment Controls API Documentation v1.5

    The API for Hosted Payment Controls. To access the swagger.json file open the following link: https://hpc.uat.freedompay.com/api/swagger/docs/v1.5

    The version of the OpenAPI document: v1.5
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import List, Optional
from pydantic import BaseModel, Field, StrictStr, conlist
from freedompay_client.models.network_custom_data import NetworkCustomData

class NetworkData(BaseModel):
    """
    NetworkData
    """
    network: Optional[StrictStr] = None
    stan: Optional[StrictStr] = None
    aci: Optional[StrictStr] = None
    tdcc: Optional[StrictStr] = None
    pcode: Optional[StrictStr] = None
    vcode: Optional[StrictStr] = None
    downgrade_code: Optional[StrictStr] = Field(None, alias="downgradeCode")
    cvc_error: Optional[StrictStr] = Field(None, alias="cvcError")
    data_error: Optional[StrictStr] = Field(None, alias="dataError")
    auth_source: Optional[StrictStr] = Field(None, alias="authSource")
    response_code: Optional[StrictStr] = Field(None, alias="responseCode")
    product_id: Optional[StrictStr] = Field(None, alias="productId")
    program_id: Optional[StrictStr] = Field(None, alias="programId")
    merchant_advice: Optional[StrictStr] = Field(None, alias="merchantAdvice")
    service_option: Optional[StrictStr] = Field(None, alias="serviceOption")
    fleet_prompts: Optional[StrictStr] = Field(None, alias="fleetPrompts")
    custom_data: Optional[conlist(NetworkCustomData)] = Field(None, alias="customData")
    mac: Optional[StrictStr] = None
    pos_seq_num: Optional[StrictStr] = Field(None, alias="posSeqNum")
    mac_key: Optional[StrictStr] = Field(None, alias="macKey")
    pin_key: Optional[StrictStr] = Field(None, alias="pinKey")
    field_key: Optional[StrictStr] = Field(None, alias="fieldKey")
    trans_date: Optional[StrictStr] = Field(None, alias="transDate")
    trans_time: Optional[StrictStr] = Field(None, alias="transTime")
    host_control_data: Optional[StrictStr] = Field(None, alias="hostControlData")
    __properties = ["network", "stan", "aci", "tdcc", "pcode", "vcode", "downgradeCode", "cvcError", "dataError", "authSource", "responseCode", "productId", "programId", "merchantAdvice", "serviceOption", "fleetPrompts", "customData", "mac", "posSeqNum", "macKey", "pinKey", "fieldKey", "transDate", "transTime", "hostControlData"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> NetworkData:
        """Create an instance of NetworkData from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of each item in custom_data (list)
        _items = []
        if self.custom_data:
            for _item in self.custom_data:
                if _item:
                    _items.append(_item.to_dict())
            _dict['customData'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> NetworkData:
        """Create an instance of NetworkData from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return NetworkData.parse_obj(obj)

        _obj = NetworkData.parse_obj({
            "network": obj.get("network"),
            "stan": obj.get("stan"),
            "aci": obj.get("aci"),
            "tdcc": obj.get("tdcc"),
            "pcode": obj.get("pcode"),
            "vcode": obj.get("vcode"),
            "downgrade_code": obj.get("downgradeCode"),
            "cvc_error": obj.get("cvcError"),
            "data_error": obj.get("dataError"),
            "auth_source": obj.get("authSource"),
            "response_code": obj.get("responseCode"),
            "product_id": obj.get("productId"),
            "program_id": obj.get("programId"),
            "merchant_advice": obj.get("merchantAdvice"),
            "service_option": obj.get("serviceOption"),
            "fleet_prompts": obj.get("fleetPrompts"),
            "custom_data": [NetworkCustomData.from_dict(_item) for _item in obj.get("customData")] if obj.get("customData") is not None else None,
            "mac": obj.get("mac"),
            "pos_seq_num": obj.get("posSeqNum"),
            "mac_key": obj.get("macKey"),
            "pin_key": obj.get("pinKey"),
            "field_key": obj.get("fieldKey"),
            "trans_date": obj.get("transDate"),
            "trans_time": obj.get("transTime"),
            "host_control_data": obj.get("hostControlData")
        })
        return _obj


