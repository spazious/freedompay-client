# coding: utf-8

"""
    Hosted Payment Controls API Documentation v1.5

    The API for Hosted Payment Controls. To access the swagger.json file open the following link: https://hpc.uat.freedompay.com/api/swagger/docs/v1.5  # noqa: E501

    OpenAPI spec version: v1.5
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from freedompay_client.configuration import Configuration


class PromoService(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'options': 'str',
        'action': 'str',
        'scenario_code': 'str',
        'program_code': 'str',
        'quick_promo': 'str',
        'force_code': 'str',
        'force_message': 'str',
        'validation_code': 'str',
        'run': 'str'
    }

    attribute_map = {
        'options': 'options',
        'action': 'action',
        'scenario_code': 'scenarioCode',
        'program_code': 'programCode',
        'quick_promo': 'quickPromo',
        'force_code': 'forceCode',
        'force_message': 'forceMessage',
        'validation_code': 'validationCode',
        'run': 'run'
    }

    def __init__(self, options=None, action=None, scenario_code=None, program_code=None, quick_promo=None, force_code=None, force_message=None, validation_code=None, run=None, _configuration=None):  # noqa: E501
        """PromoService - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._options = None
        self._action = None
        self._scenario_code = None
        self._program_code = None
        self._quick_promo = None
        self._force_code = None
        self._force_message = None
        self._validation_code = None
        self._run = None
        self.discriminator = None

        if options is not None:
            self.options = options
        if action is not None:
            self.action = action
        if scenario_code is not None:
            self.scenario_code = scenario_code
        if program_code is not None:
            self.program_code = program_code
        if quick_promo is not None:
            self.quick_promo = quick_promo
        if force_code is not None:
            self.force_code = force_code
        if force_message is not None:
            self.force_message = force_message
        if validation_code is not None:
            self.validation_code = validation_code
        if run is not None:
            self.run = run

    @property
    def options(self):
        """Gets the options of this PromoService.  # noqa: E501


        :return: The options of this PromoService.  # noqa: E501
        :rtype: str
        """
        return self._options

    @options.setter
    def options(self, options):
        """Sets the options of this PromoService.


        :param options: The options of this PromoService.  # noqa: E501
        :type: str
        """

        self._options = options

    @property
    def action(self):
        """Gets the action of this PromoService.  # noqa: E501


        :return: The action of this PromoService.  # noqa: E501
        :rtype: str
        """
        return self._action

    @action.setter
    def action(self, action):
        """Sets the action of this PromoService.


        :param action: The action of this PromoService.  # noqa: E501
        :type: str
        """

        self._action = action

    @property
    def scenario_code(self):
        """Gets the scenario_code of this PromoService.  # noqa: E501


        :return: The scenario_code of this PromoService.  # noqa: E501
        :rtype: str
        """
        return self._scenario_code

    @scenario_code.setter
    def scenario_code(self, scenario_code):
        """Sets the scenario_code of this PromoService.


        :param scenario_code: The scenario_code of this PromoService.  # noqa: E501
        :type: str
        """

        self._scenario_code = scenario_code

    @property
    def program_code(self):
        """Gets the program_code of this PromoService.  # noqa: E501


        :return: The program_code of this PromoService.  # noqa: E501
        :rtype: str
        """
        return self._program_code

    @program_code.setter
    def program_code(self, program_code):
        """Sets the program_code of this PromoService.


        :param program_code: The program_code of this PromoService.  # noqa: E501
        :type: str
        """

        self._program_code = program_code

    @property
    def quick_promo(self):
        """Gets the quick_promo of this PromoService.  # noqa: E501


        :return: The quick_promo of this PromoService.  # noqa: E501
        :rtype: str
        """
        return self._quick_promo

    @quick_promo.setter
    def quick_promo(self, quick_promo):
        """Sets the quick_promo of this PromoService.


        :param quick_promo: The quick_promo of this PromoService.  # noqa: E501
        :type: str
        """

        self._quick_promo = quick_promo

    @property
    def force_code(self):
        """Gets the force_code of this PromoService.  # noqa: E501


        :return: The force_code of this PromoService.  # noqa: E501
        :rtype: str
        """
        return self._force_code

    @force_code.setter
    def force_code(self, force_code):
        """Sets the force_code of this PromoService.


        :param force_code: The force_code of this PromoService.  # noqa: E501
        :type: str
        """

        self._force_code = force_code

    @property
    def force_message(self):
        """Gets the force_message of this PromoService.  # noqa: E501


        :return: The force_message of this PromoService.  # noqa: E501
        :rtype: str
        """
        return self._force_message

    @force_message.setter
    def force_message(self, force_message):
        """Sets the force_message of this PromoService.


        :param force_message: The force_message of this PromoService.  # noqa: E501
        :type: str
        """

        self._force_message = force_message

    @property
    def validation_code(self):
        """Gets the validation_code of this PromoService.  # noqa: E501


        :return: The validation_code of this PromoService.  # noqa: E501
        :rtype: str
        """
        return self._validation_code

    @validation_code.setter
    def validation_code(self, validation_code):
        """Sets the validation_code of this PromoService.


        :param validation_code: The validation_code of this PromoService.  # noqa: E501
        :type: str
        """

        self._validation_code = validation_code

    @property
    def run(self):
        """Gets the run of this PromoService.  # noqa: E501


        :return: The run of this PromoService.  # noqa: E501
        :rtype: str
        """
        return self._run

    @run.setter
    def run(self, run):
        """Sets the run of this PromoService.


        :param run: The run of this PromoService.  # noqa: E501
        :type: str
        """

        self._run = run

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PromoService, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PromoService):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, PromoService):
            return True

        return self.to_dict() != other.to_dict()
