# coding: utf-8

"""
    Hosted Payment Controls API Documentation v1.5

    The API for Hosted Payment Controls. To access the swagger.json file open the following link: https://hpc.uat.freedompay.com/api/swagger/docs/v1.5  # noqa: E501

    OpenAPI spec version: v1.5
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from freedompay_client.configuration import Configuration


class OfflineControl(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'dtk': 'str',
        'retry_count': 'str',
        'internal_ffw': 'str',
        'saf_request_id': 'str',
        'saf_system_id': 'str'
    }

    attribute_map = {
        'dtk': 'dtk',
        'retry_count': 'retryCount',
        'internal_ffw': 'internal_ffw',
        'saf_request_id': 'safRequestId',
        'saf_system_id': 'safSystemId'
    }

    def __init__(self, dtk=None, retry_count=None, internal_ffw=None, saf_request_id=None, saf_system_id=None, _configuration=None):  # noqa: E501
        """OfflineControl - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._dtk = None
        self._retry_count = None
        self._internal_ffw = None
        self._saf_request_id = None
        self._saf_system_id = None
        self.discriminator = None

        if dtk is not None:
            self.dtk = dtk
        if retry_count is not None:
            self.retry_count = retry_count
        if internal_ffw is not None:
            self.internal_ffw = internal_ffw
        if saf_request_id is not None:
            self.saf_request_id = saf_request_id
        if saf_system_id is not None:
            self.saf_system_id = saf_system_id

    @property
    def dtk(self):
        """Gets the dtk of this OfflineControl.  # noqa: E501


        :return: The dtk of this OfflineControl.  # noqa: E501
        :rtype: str
        """
        return self._dtk

    @dtk.setter
    def dtk(self, dtk):
        """Sets the dtk of this OfflineControl.


        :param dtk: The dtk of this OfflineControl.  # noqa: E501
        :type: str
        """

        self._dtk = dtk

    @property
    def retry_count(self):
        """Gets the retry_count of this OfflineControl.  # noqa: E501


        :return: The retry_count of this OfflineControl.  # noqa: E501
        :rtype: str
        """
        return self._retry_count

    @retry_count.setter
    def retry_count(self, retry_count):
        """Sets the retry_count of this OfflineControl.


        :param retry_count: The retry_count of this OfflineControl.  # noqa: E501
        :type: str
        """

        self._retry_count = retry_count

    @property
    def internal_ffw(self):
        """Gets the internal_ffw of this OfflineControl.  # noqa: E501


        :return: The internal_ffw of this OfflineControl.  # noqa: E501
        :rtype: str
        """
        return self._internal_ffw

    @internal_ffw.setter
    def internal_ffw(self, internal_ffw):
        """Sets the internal_ffw of this OfflineControl.


        :param internal_ffw: The internal_ffw of this OfflineControl.  # noqa: E501
        :type: str
        """

        self._internal_ffw = internal_ffw

    @property
    def saf_request_id(self):
        """Gets the saf_request_id of this OfflineControl.  # noqa: E501


        :return: The saf_request_id of this OfflineControl.  # noqa: E501
        :rtype: str
        """
        return self._saf_request_id

    @saf_request_id.setter
    def saf_request_id(self, saf_request_id):
        """Sets the saf_request_id of this OfflineControl.


        :param saf_request_id: The saf_request_id of this OfflineControl.  # noqa: E501
        :type: str
        """

        self._saf_request_id = saf_request_id

    @property
    def saf_system_id(self):
        """Gets the saf_system_id of this OfflineControl.  # noqa: E501


        :return: The saf_system_id of this OfflineControl.  # noqa: E501
        :rtype: str
        """
        return self._saf_system_id

    @saf_system_id.setter
    def saf_system_id(self, saf_system_id):
        """Sets the saf_system_id of this OfflineControl.


        :param saf_system_id: The saf_system_id of this OfflineControl.  # noqa: E501
        :type: str
        """

        self._saf_system_id = saf_system_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(OfflineControl, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, OfflineControl):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, OfflineControl):
            return True

        return self.to_dict() != other.to_dict()
