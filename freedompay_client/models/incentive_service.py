# coding: utf-8

"""
    Hosted Payment Controls API Documentation v1.5

    The API for Hosted Payment Controls. To access the swagger.json file open the following link: https://hpc.uat.freedompay.com/api/swagger/docs/v1.5  # noqa: E501

    OpenAPI spec version: v1.5
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from freedompay_client.configuration import Configuration


class IncentiveService(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'system_id': 'str',
        'consumer_identifier_type': 'str',
        'consumer_identifier': 'str',
        'additional_data': 'str',
        'additional_data_type': 'str',
        'incentives': 'list[IncentiveIncentive]',
        'trans_type': 'str',
        'run': 'str'
    }

    attribute_map = {
        'system_id': 'systemId',
        'consumer_identifier_type': 'consumerIdentifierType',
        'consumer_identifier': 'consumerIdentifier',
        'additional_data': 'additionalData',
        'additional_data_type': 'additionalDataType',
        'incentives': 'incentives',
        'trans_type': 'transType',
        'run': 'run'
    }

    def __init__(self, system_id=None, consumer_identifier_type=None, consumer_identifier=None, additional_data=None, additional_data_type=None, incentives=None, trans_type=None, run=None, _configuration=None):  # noqa: E501
        """IncentiveService - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._system_id = None
        self._consumer_identifier_type = None
        self._consumer_identifier = None
        self._additional_data = None
        self._additional_data_type = None
        self._incentives = None
        self._trans_type = None
        self._run = None
        self.discriminator = None

        if system_id is not None:
            self.system_id = system_id
        if consumer_identifier_type is not None:
            self.consumer_identifier_type = consumer_identifier_type
        if consumer_identifier is not None:
            self.consumer_identifier = consumer_identifier
        if additional_data is not None:
            self.additional_data = additional_data
        if additional_data_type is not None:
            self.additional_data_type = additional_data_type
        if incentives is not None:
            self.incentives = incentives
        if trans_type is not None:
            self.trans_type = trans_type
        if run is not None:
            self.run = run

    @property
    def system_id(self):
        """Gets the system_id of this IncentiveService.  # noqa: E501


        :return: The system_id of this IncentiveService.  # noqa: E501
        :rtype: str
        """
        return self._system_id

    @system_id.setter
    def system_id(self, system_id):
        """Sets the system_id of this IncentiveService.


        :param system_id: The system_id of this IncentiveService.  # noqa: E501
        :type: str
        """

        self._system_id = system_id

    @property
    def consumer_identifier_type(self):
        """Gets the consumer_identifier_type of this IncentiveService.  # noqa: E501


        :return: The consumer_identifier_type of this IncentiveService.  # noqa: E501
        :rtype: str
        """
        return self._consumer_identifier_type

    @consumer_identifier_type.setter
    def consumer_identifier_type(self, consumer_identifier_type):
        """Sets the consumer_identifier_type of this IncentiveService.


        :param consumer_identifier_type: The consumer_identifier_type of this IncentiveService.  # noqa: E501
        :type: str
        """

        self._consumer_identifier_type = consumer_identifier_type

    @property
    def consumer_identifier(self):
        """Gets the consumer_identifier of this IncentiveService.  # noqa: E501


        :return: The consumer_identifier of this IncentiveService.  # noqa: E501
        :rtype: str
        """
        return self._consumer_identifier

    @consumer_identifier.setter
    def consumer_identifier(self, consumer_identifier):
        """Sets the consumer_identifier of this IncentiveService.


        :param consumer_identifier: The consumer_identifier of this IncentiveService.  # noqa: E501
        :type: str
        """

        self._consumer_identifier = consumer_identifier

    @property
    def additional_data(self):
        """Gets the additional_data of this IncentiveService.  # noqa: E501


        :return: The additional_data of this IncentiveService.  # noqa: E501
        :rtype: str
        """
        return self._additional_data

    @additional_data.setter
    def additional_data(self, additional_data):
        """Sets the additional_data of this IncentiveService.


        :param additional_data: The additional_data of this IncentiveService.  # noqa: E501
        :type: str
        """

        self._additional_data = additional_data

    @property
    def additional_data_type(self):
        """Gets the additional_data_type of this IncentiveService.  # noqa: E501


        :return: The additional_data_type of this IncentiveService.  # noqa: E501
        :rtype: str
        """
        return self._additional_data_type

    @additional_data_type.setter
    def additional_data_type(self, additional_data_type):
        """Sets the additional_data_type of this IncentiveService.


        :param additional_data_type: The additional_data_type of this IncentiveService.  # noqa: E501
        :type: str
        """

        self._additional_data_type = additional_data_type

    @property
    def incentives(self):
        """Gets the incentives of this IncentiveService.  # noqa: E501


        :return: The incentives of this IncentiveService.  # noqa: E501
        :rtype: list[IncentiveIncentive]
        """
        return self._incentives

    @incentives.setter
    def incentives(self, incentives):
        """Sets the incentives of this IncentiveService.


        :param incentives: The incentives of this IncentiveService.  # noqa: E501
        :type: list[IncentiveIncentive]
        """

        self._incentives = incentives

    @property
    def trans_type(self):
        """Gets the trans_type of this IncentiveService.  # noqa: E501


        :return: The trans_type of this IncentiveService.  # noqa: E501
        :rtype: str
        """
        return self._trans_type

    @trans_type.setter
    def trans_type(self, trans_type):
        """Sets the trans_type of this IncentiveService.


        :param trans_type: The trans_type of this IncentiveService.  # noqa: E501
        :type: str
        """

        self._trans_type = trans_type

    @property
    def run(self):
        """Gets the run of this IncentiveService.  # noqa: E501


        :return: The run of this IncentiveService.  # noqa: E501
        :rtype: str
        """
        return self._run

    @run.setter
    def run(self, run):
        """Sets the run of this IncentiveService.


        :param run: The run of this IncentiveService.  # noqa: E501
        :type: str
        """

        self._run = run

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(IncentiveService, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, IncentiveService):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, IncentiveService):
            return True

        return self.to_dict() != other.to_dict()
