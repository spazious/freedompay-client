# coding: utf-8

"""
    Hosted Payment Controls API Documentation v1.5

    The API for Hosted Payment Controls. To access the swagger.json file open the following link: https://hpc.uat.freedompay.com/api/swagger/docs/v1.5

    The version of the OpenAPI document: v1.5
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import re  # noqa: F401
import io
import warnings

from pydantic import validate_arguments, ValidationError

from typing_extensions import Annotated
from pydantic import Field, StrictInt, StrictStr

from typing import Any, Dict, Optional

from freedompay_client.models.acknowledge_request import AcknowledgeRequest
from freedompay_client.models.request_message import RequestMessage
from freedompay_client.models.reversal_request import ReversalRequest
from freedompay_client.models.token_information import TokenInformation

from freedompay_client.api_client import ApiClient
from freedompay_client.api_response import ApiResponse
from freedompay_client.exceptions import (  # noqa: F401
    ApiTypeError,
    ApiValueError
)


class PaymentsApi:
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None) -> None:
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client

    @validate_arguments
    def payments_acknowledge(self, authorization : Annotated[StrictStr, Field(..., description="A valid session key from a previously successful call to initialize a session.")], request : AcknowledgeRequest, **kwargs) -> object:  # noqa: E501
        """payments_acknowledge  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.payments_acknowledge(authorization, request, async_req=True)
        >>> result = thread.get()

        :param authorization: A valid session key from a previously successful call to initialize a session. (required)
        :type authorization: str
        :param request: (required)
        :type request: AcknowledgeRequest
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: object
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the payments_acknowledge_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.payments_acknowledge_with_http_info(authorization, request, **kwargs)  # noqa: E501

    @validate_arguments
    def payments_acknowledge_with_http_info(self, authorization : Annotated[StrictStr, Field(..., description="A valid session key from a previously successful call to initialize a session.")], request : AcknowledgeRequest, **kwargs) -> ApiResponse:  # noqa: E501
        """payments_acknowledge  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.payments_acknowledge_with_http_info(authorization, request, async_req=True)
        >>> result = thread.get()

        :param authorization: A valid session key from a previously successful call to initialize a session. (required)
        :type authorization: str
        :param request: (required)
        :type request: AcknowledgeRequest
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(object, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'authorization',
            'request'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method payments_acknowledge" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['authorization']:
            _header_params['Authorization'] = _params['authorization']

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        if _params['request'] is not None:
            _body_params = _params['request']

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/json', 'application/xml', 'text/xml'])  # noqa: E501

        # set the HTTP header `Content-Type`
        _content_types_list = _params.get('_content_type',
            self.api_client.select_header_content_type(
                ['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded']))
        if _content_types_list:
                _header_params['Content-Type'] = _content_types_list

        # authentication setting
        _auth_settings = []  # noqa: E501

        _response_types_map = {
            '200': "object",
        }

        return self.api_client.call_api(
            '/v1.5/payments/acknowledge', 'POST',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def payments_post_v13(self, authorization : Annotated[StrictStr, Field(..., description="A valid session key from a previously successful call to initialize a session.")], pos_sync_attempt_num : Optional[StrictInt] = None, pos_sync_id : Optional[StrictStr] = None, cc_auth : Optional[StrictStr] = None, payment_key : Optional[StrictStr] = None, request_message : Optional[RequestMessage] = None, token_information : Optional[TokenInformation] = None, **kwargs) -> object:  # noqa: E501
        """payments_post_v13  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.payments_post_v13(authorization, pos_sync_attempt_num, pos_sync_id, cc_auth, payment_key, request_message, token_information, async_req=True)
        >>> result = thread.get()

        :param authorization: A valid session key from a previously successful call to initialize a session. (required)
        :type authorization: str
        :param pos_sync_attempt_num:
        :type pos_sync_attempt_num: int
        :param pos_sync_id:
        :type pos_sync_id: str
        :param cc_auth:
        :type cc_auth: str
        :param payment_key:
        :type payment_key: str
        :param request_message:
        :type request_message: RequestMessage
        :param token_information:
        :type token_information: TokenInformation
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: object
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the payments_post_v13_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.payments_post_v13_with_http_info(authorization, pos_sync_attempt_num, pos_sync_id, cc_auth, payment_key, request_message, token_information, **kwargs)  # noqa: E501

    @validate_arguments
    def payments_post_v13_with_http_info(self, authorization : Annotated[StrictStr, Field(..., description="A valid session key from a previously successful call to initialize a session.")], pos_sync_attempt_num : Optional[StrictInt] = None, pos_sync_id : Optional[StrictStr] = None, cc_auth : Optional[StrictStr] = None, payment_key : Optional[StrictStr] = None, request_message : Optional[RequestMessage] = None, token_information : Optional[TokenInformation] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """payments_post_v13  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.payments_post_v13_with_http_info(authorization, pos_sync_attempt_num, pos_sync_id, cc_auth, payment_key, request_message, token_information, async_req=True)
        >>> result = thread.get()

        :param authorization: A valid session key from a previously successful call to initialize a session. (required)
        :type authorization: str
        :param pos_sync_attempt_num:
        :type pos_sync_attempt_num: int
        :param pos_sync_id:
        :type pos_sync_id: str
        :param cc_auth:
        :type cc_auth: str
        :param payment_key:
        :type payment_key: str
        :param request_message:
        :type request_message: RequestMessage
        :param token_information:
        :type token_information: TokenInformation
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(object, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'authorization',
            'pos_sync_attempt_num',
            'pos_sync_id',
            'cc_auth',
            'payment_key',
            'request_message',
            'token_information'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method payments_post_v13" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['authorization']:
            _header_params['Authorization'] = _params['authorization']

        # process the form parameters
        _form_params = []
        _files = {}
        if _params['pos_sync_attempt_num']:
            _form_params.append(('PosSyncAttemptNum', _params['pos_sync_attempt_num']))

        if _params['pos_sync_id']:
            _form_params.append(('PosSyncId', _params['pos_sync_id']))

        if _params['cc_auth']:
            _form_params.append(('CcAuth', _params['cc_auth']))

        if _params['payment_key']:
            _form_params.append(('PaymentKey', _params['payment_key']))

        if _params['request_message']:
            _form_params.append(('RequestMessage', _params['request_message']))

        if _params['token_information']:
            _form_params.append(('TokenInformation', _params['token_information']))

        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # set the HTTP header `Content-Type`
        _content_types_list = _params.get('_content_type',
            self.api_client.select_header_content_type(
                ['application/x-www-form-urlencoded']))
        if _content_types_list:
                _header_params['Content-Type'] = _content_types_list

        # authentication setting
        _auth_settings = []  # noqa: E501

        _response_types_map = {
            '200': "object",
        }

        return self.api_client.call_api(
            '/v1.5/payments', 'POST',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def payments_reverse(self, authorization : Annotated[StrictStr, Field(..., description="A valid session key from a previously successful call to initialize a session.")], request : ReversalRequest, **kwargs) -> object:  # noqa: E501
        """payments_reverse  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.payments_reverse(authorization, request, async_req=True)
        >>> result = thread.get()

        :param authorization: A valid session key from a previously successful call to initialize a session. (required)
        :type authorization: str
        :param request: (required)
        :type request: ReversalRequest
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: object
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the payments_reverse_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.payments_reverse_with_http_info(authorization, request, **kwargs)  # noqa: E501

    @validate_arguments
    def payments_reverse_with_http_info(self, authorization : Annotated[StrictStr, Field(..., description="A valid session key from a previously successful call to initialize a session.")], request : ReversalRequest, **kwargs) -> ApiResponse:  # noqa: E501
        """payments_reverse  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.payments_reverse_with_http_info(authorization, request, async_req=True)
        >>> result = thread.get()

        :param authorization: A valid session key from a previously successful call to initialize a session. (required)
        :type authorization: str
        :param request: (required)
        :type request: ReversalRequest
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(object, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'authorization',
            'request'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method payments_reverse" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['authorization']:
            _header_params['Authorization'] = _params['authorization']

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        if _params['request'] is not None:
            _body_params = _params['request']

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/json', 'application/xml', 'text/xml'])  # noqa: E501

        # set the HTTP header `Content-Type`
        _content_types_list = _params.get('_content_type',
            self.api_client.select_header_content_type(
                ['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded']))
        if _content_types_list:
                _header_params['Content-Type'] = _content_types_list

        # authentication setting
        _auth_settings = []  # noqa: E501

        _response_types_map = {
            '200': "object",
        }

        return self.api_client.call_api(
            '/v1.5/payments/reverse', 'POST',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))
