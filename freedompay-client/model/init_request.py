# coding: utf-8

"""
    Hosted Payment Controls API Documentation v1.5

    The API for Hosted Payment Controls. To access the swagger.json file open the following link: https://hpc.uat.freedompay.com/api/swagger/docs/v1.5  # noqa: E501

    The version of the OpenAPI document: v1.5
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from freedompay-client import schemas  # noqa: F401


class InitRequest(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        
        class properties:
        
            @staticmethod
            def Button() -> typing.Type['ButtonControl']:
                return ButtonControl
            
            
            class ButtonType(
                schemas.EnumBase,
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    enum_value_to_name = {
                        "Unknown": "UNKNOWN",
                        "Buy": "BUY",
                        "BuyNow": "BUY_NOW",
                        "Donate": "DONATE",
                        "Next": "NEXT",
                        "Pay": "PAY",
                        "PayNow": "PAY_NOW",
                        "PayWithCard": "PAY_WITH_CARD",
                        "Save": "SAVE",
                        "CompleteYourReservation": "COMPLETE_YOUR_RESERVATION",
                        "PayByBank": "PAY_BY_BANK",
                        "SubmitToHotel": "SUBMIT_TO_HOTEL",
                        "UpdateReservation": "UPDATE_RESERVATION",
                        "CompleteReservation": "COMPLETE_RESERVATION",
                    }
                
                @schemas.classproperty
                def UNKNOWN(cls):
                    return cls("Unknown")
                
                @schemas.classproperty
                def BUY(cls):
                    return cls("Buy")
                
                @schemas.classproperty
                def BUY_NOW(cls):
                    return cls("BuyNow")
                
                @schemas.classproperty
                def DONATE(cls):
                    return cls("Donate")
                
                @schemas.classproperty
                def NEXT(cls):
                    return cls("Next")
                
                @schemas.classproperty
                def PAY(cls):
                    return cls("Pay")
                
                @schemas.classproperty
                def PAY_NOW(cls):
                    return cls("PayNow")
                
                @schemas.classproperty
                def PAY_WITH_CARD(cls):
                    return cls("PayWithCard")
                
                @schemas.classproperty
                def SAVE(cls):
                    return cls("Save")
                
                @schemas.classproperty
                def COMPLETE_YOUR_RESERVATION(cls):
                    return cls("CompleteYourReservation")
                
                @schemas.classproperty
                def PAY_BY_BANK(cls):
                    return cls("PayByBank")
                
                @schemas.classproperty
                def SUBMIT_TO_HOTEL(cls):
                    return cls("SubmitToHotel")
                
                @schemas.classproperty
                def UPDATE_RESERVATION(cls):
                    return cls("UpdateReservation")
                
                @schemas.classproperty
                def COMPLETE_RESERVATION(cls):
                    return cls("CompleteReservation")
        
            @staticmethod
            def PayPal() -> typing.Type['PayPalInitRequest']:
                return PayPalInitRequest
        
            @staticmethod
            def PostalCode() -> typing.Type['PostalCodeControl']:
                return PostalCodeControl
        
            @staticmethod
            def PayByBank() -> typing.Type['PayByBankInitRequest']:
                return PayByBankInitRequest
        
            @staticmethod
            def FraudCheck() -> typing.Type['FraudCheckOptions']:
                return FraudCheckOptions
        
            @staticmethod
            def CardNumber() -> typing.Type['CardNumberControl']:
                return CardNumberControl
        
            @staticmethod
            def ConsumerAuthentication() -> typing.Type['ConsumerAuthentication']:
                return ConsumerAuthentication
        
            @staticmethod
            def Dcc() -> typing.Type['DccOptions']:
                return DccOptions
        
            @staticmethod
            def ExpirationDate() -> typing.Type['ExpirationDateControl']:
                return ExpirationDateControl
        
            @staticmethod
            def OrderDetails() -> typing.Type['OrderDetails']:
                return OrderDetails
        
            @staticmethod
            def SecurityCode() -> typing.Type['SecurityCodeControl']:
                return SecurityCodeControl
        
            @staticmethod
            def TokenInformation() -> typing.Type['TokenInformation']:
                return TokenInformation
            
            
            class CardIconDisplayType(
                schemas.EnumBase,
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    enum_value_to_name = {
                        "Unknown": "UNKNOWN",
                        "Dynamic": "DYNAMIC",
                        "Fixed": "FIXED",
                        "Hidden": "HIDDEN",
                    }
                
                @schemas.classproperty
                def UNKNOWN(cls):
                    return cls("Unknown")
                
                @schemas.classproperty
                def DYNAMIC(cls):
                    return cls("Dynamic")
                
                @schemas.classproperty
                def FIXED(cls):
                    return cls("Fixed")
                
                @schemas.classproperty
                def HIDDEN(cls):
                    return cls("Hidden")
            
            
            class PaymentType(
                schemas.EnumBase,
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    enum_value_to_name = {
                        "Unknown": "UNKNOWN",
                        "Card": "CARD",
                        "CardOnFile": "CARD_ON_FILE",
                        "GiftCard": "GIFT_CARD",
                        "RewardCard": "REWARD_CARD",
                        "GooglePay": "GOOGLE_PAY",
                        "ApplePay": "APPLE_PAY",
                        "PrivateLabelCard": "PRIVATE_LABEL_CARD",
                        "PayPal": "PAY_PAL",
                        "PayByBank": "PAY_BY_BANK",
                    }
                
                @schemas.classproperty
                def UNKNOWN(cls):
                    return cls("Unknown")
                
                @schemas.classproperty
                def CARD(cls):
                    return cls("Card")
                
                @schemas.classproperty
                def CARD_ON_FILE(cls):
                    return cls("CardOnFile")
                
                @schemas.classproperty
                def GIFT_CARD(cls):
                    return cls("GiftCard")
                
                @schemas.classproperty
                def REWARD_CARD(cls):
                    return cls("RewardCard")
                
                @schemas.classproperty
                def GOOGLE_PAY(cls):
                    return cls("GooglePay")
                
                @schemas.classproperty
                def APPLE_PAY(cls):
                    return cls("ApplePay")
                
                @schemas.classproperty
                def PRIVATE_LABEL_CARD(cls):
                    return cls("PrivateLabelCard")
                
                @schemas.classproperty
                def PAY_PAL(cls):
                    return cls("PayPal")
                
                @schemas.classproperty
                def PAY_BY_BANK(cls):
                    return cls("PayByBank")
            
            
            class WorkflowType(
                schemas.EnumBase,
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    enum_value_to_name = {
                        "Unknown": "UNKNOWN",
                        "Standard": "STANDARD",
                        "VerifyAuth": "VERIFY_AUTH",
                        "MultiUse": "MULTI_USE",
                    }
                
                @schemas.classproperty
                def UNKNOWN(cls):
                    return cls("Unknown")
                
                @schemas.classproperty
                def STANDARD(cls):
                    return cls("Standard")
                
                @schemas.classproperty
                def VERIFY_AUTH(cls):
                    return cls("VerifyAuth")
                
                @schemas.classproperty
                def MULTI_USE(cls):
                    return cls("MultiUse")
            CultureCode = schemas.StrSchema
            EsKey = schemas.StrSchema
        
            @staticmethod
            def Legal() -> typing.Type['LegalControl']:
                return LegalControl
            StoreId = schemas.StrSchema
            Styles = schemas.StrSchema
            TerminalId = schemas.StrSchema
            
            
            class ValidationMessageType(
                schemas.EnumBase,
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    enum_value_to_name = {
                        "Unknown": "UNKNOWN",
                        "None": "NONE",
                        "Feedback": "FEEDBACK",
                        "Tooltip": "TOOLTIP",
                    }
                
                @schemas.classproperty
                def UNKNOWN(cls):
                    return cls("Unknown")
                
                @schemas.classproperty
                def NONE(cls):
                    return cls("None")
                
                @schemas.classproperty
                def FEEDBACK(cls):
                    return cls("Feedback")
                
                @schemas.classproperty
                def TOOLTIP(cls):
                    return cls("Tooltip")
            ReferenceId = schemas.UUIDSchema
            __annotations__ = {
                "Button": Button,
                "ButtonType": ButtonType,
                "PayPal": PayPal,
                "PostalCode": PostalCode,
                "PayByBank": PayByBank,
                "FraudCheck": FraudCheck,
                "CardNumber": CardNumber,
                "ConsumerAuthentication": ConsumerAuthentication,
                "Dcc": Dcc,
                "ExpirationDate": ExpirationDate,
                "OrderDetails": OrderDetails,
                "SecurityCode": SecurityCode,
                "TokenInformation": TokenInformation,
                "CardIconDisplayType": CardIconDisplayType,
                "PaymentType": PaymentType,
                "WorkflowType": WorkflowType,
                "CultureCode": CultureCode,
                "EsKey": EsKey,
                "Legal": Legal,
                "StoreId": StoreId,
                "Styles": Styles,
                "TerminalId": TerminalId,
                "ValidationMessageType": ValidationMessageType,
                "ReferenceId": ReferenceId,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["Button"]) -> 'ButtonControl': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["ButtonType"]) -> MetaOapg.properties.ButtonType: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["PayPal"]) -> 'PayPalInitRequest': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["PostalCode"]) -> 'PostalCodeControl': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["PayByBank"]) -> 'PayByBankInitRequest': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["FraudCheck"]) -> 'FraudCheckOptions': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["CardNumber"]) -> 'CardNumberControl': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["ConsumerAuthentication"]) -> 'ConsumerAuthentication': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["Dcc"]) -> 'DccOptions': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["ExpirationDate"]) -> 'ExpirationDateControl': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["OrderDetails"]) -> 'OrderDetails': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["SecurityCode"]) -> 'SecurityCodeControl': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["TokenInformation"]) -> 'TokenInformation': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["CardIconDisplayType"]) -> MetaOapg.properties.CardIconDisplayType: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["PaymentType"]) -> MetaOapg.properties.PaymentType: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["WorkflowType"]) -> MetaOapg.properties.WorkflowType: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["CultureCode"]) -> MetaOapg.properties.CultureCode: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["EsKey"]) -> MetaOapg.properties.EsKey: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["Legal"]) -> 'LegalControl': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["StoreId"]) -> MetaOapg.properties.StoreId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["Styles"]) -> MetaOapg.properties.Styles: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["TerminalId"]) -> MetaOapg.properties.TerminalId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["ValidationMessageType"]) -> MetaOapg.properties.ValidationMessageType: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["ReferenceId"]) -> MetaOapg.properties.ReferenceId: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["Button", "ButtonType", "PayPal", "PostalCode", "PayByBank", "FraudCheck", "CardNumber", "ConsumerAuthentication", "Dcc", "ExpirationDate", "OrderDetails", "SecurityCode", "TokenInformation", "CardIconDisplayType", "PaymentType", "WorkflowType", "CultureCode", "EsKey", "Legal", "StoreId", "Styles", "TerminalId", "ValidationMessageType", "ReferenceId", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["Button"]) -> typing.Union['ButtonControl', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["ButtonType"]) -> typing.Union[MetaOapg.properties.ButtonType, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["PayPal"]) -> typing.Union['PayPalInitRequest', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["PostalCode"]) -> typing.Union['PostalCodeControl', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["PayByBank"]) -> typing.Union['PayByBankInitRequest', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["FraudCheck"]) -> typing.Union['FraudCheckOptions', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["CardNumber"]) -> typing.Union['CardNumberControl', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["ConsumerAuthentication"]) -> typing.Union['ConsumerAuthentication', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["Dcc"]) -> typing.Union['DccOptions', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["ExpirationDate"]) -> typing.Union['ExpirationDateControl', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["OrderDetails"]) -> typing.Union['OrderDetails', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["SecurityCode"]) -> typing.Union['SecurityCodeControl', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["TokenInformation"]) -> typing.Union['TokenInformation', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["CardIconDisplayType"]) -> typing.Union[MetaOapg.properties.CardIconDisplayType, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["PaymentType"]) -> typing.Union[MetaOapg.properties.PaymentType, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["WorkflowType"]) -> typing.Union[MetaOapg.properties.WorkflowType, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["CultureCode"]) -> typing.Union[MetaOapg.properties.CultureCode, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["EsKey"]) -> typing.Union[MetaOapg.properties.EsKey, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["Legal"]) -> typing.Union['LegalControl', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["StoreId"]) -> typing.Union[MetaOapg.properties.StoreId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["Styles"]) -> typing.Union[MetaOapg.properties.Styles, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["TerminalId"]) -> typing.Union[MetaOapg.properties.TerminalId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["ValidationMessageType"]) -> typing.Union[MetaOapg.properties.ValidationMessageType, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["ReferenceId"]) -> typing.Union[MetaOapg.properties.ReferenceId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["Button", "ButtonType", "PayPal", "PostalCode", "PayByBank", "FraudCheck", "CardNumber", "ConsumerAuthentication", "Dcc", "ExpirationDate", "OrderDetails", "SecurityCode", "TokenInformation", "CardIconDisplayType", "PaymentType", "WorkflowType", "CultureCode", "EsKey", "Legal", "StoreId", "Styles", "TerminalId", "ValidationMessageType", "ReferenceId", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        Button: typing.Union['ButtonControl', schemas.Unset] = schemas.unset,
        ButtonType: typing.Union[MetaOapg.properties.ButtonType, str, schemas.Unset] = schemas.unset,
        PayPal: typing.Union['PayPalInitRequest', schemas.Unset] = schemas.unset,
        PostalCode: typing.Union['PostalCodeControl', schemas.Unset] = schemas.unset,
        PayByBank: typing.Union['PayByBankInitRequest', schemas.Unset] = schemas.unset,
        FraudCheck: typing.Union['FraudCheckOptions', schemas.Unset] = schemas.unset,
        CardNumber: typing.Union['CardNumberControl', schemas.Unset] = schemas.unset,
        ConsumerAuthentication: typing.Union['ConsumerAuthentication', schemas.Unset] = schemas.unset,
        Dcc: typing.Union['DccOptions', schemas.Unset] = schemas.unset,
        ExpirationDate: typing.Union['ExpirationDateControl', schemas.Unset] = schemas.unset,
        OrderDetails: typing.Union['OrderDetails', schemas.Unset] = schemas.unset,
        SecurityCode: typing.Union['SecurityCodeControl', schemas.Unset] = schemas.unset,
        TokenInformation: typing.Union['TokenInformation', schemas.Unset] = schemas.unset,
        CardIconDisplayType: typing.Union[MetaOapg.properties.CardIconDisplayType, str, schemas.Unset] = schemas.unset,
        PaymentType: typing.Union[MetaOapg.properties.PaymentType, str, schemas.Unset] = schemas.unset,
        WorkflowType: typing.Union[MetaOapg.properties.WorkflowType, str, schemas.Unset] = schemas.unset,
        CultureCode: typing.Union[MetaOapg.properties.CultureCode, str, schemas.Unset] = schemas.unset,
        EsKey: typing.Union[MetaOapg.properties.EsKey, str, schemas.Unset] = schemas.unset,
        Legal: typing.Union['LegalControl', schemas.Unset] = schemas.unset,
        StoreId: typing.Union[MetaOapg.properties.StoreId, str, schemas.Unset] = schemas.unset,
        Styles: typing.Union[MetaOapg.properties.Styles, str, schemas.Unset] = schemas.unset,
        TerminalId: typing.Union[MetaOapg.properties.TerminalId, str, schemas.Unset] = schemas.unset,
        ValidationMessageType: typing.Union[MetaOapg.properties.ValidationMessageType, str, schemas.Unset] = schemas.unset,
        ReferenceId: typing.Union[MetaOapg.properties.ReferenceId, str, uuid.UUID, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'InitRequest':
        return super().__new__(
            cls,
            *args,
            Button=Button,
            ButtonType=ButtonType,
            PayPal=PayPal,
            PostalCode=PostalCode,
            PayByBank=PayByBank,
            FraudCheck=FraudCheck,
            CardNumber=CardNumber,
            ConsumerAuthentication=ConsumerAuthentication,
            Dcc=Dcc,
            ExpirationDate=ExpirationDate,
            OrderDetails=OrderDetails,
            SecurityCode=SecurityCode,
            TokenInformation=TokenInformation,
            CardIconDisplayType=CardIconDisplayType,
            PaymentType=PaymentType,
            WorkflowType=WorkflowType,
            CultureCode=CultureCode,
            EsKey=EsKey,
            Legal=Legal,
            StoreId=StoreId,
            Styles=Styles,
            TerminalId=TerminalId,
            ValidationMessageType=ValidationMessageType,
            ReferenceId=ReferenceId,
            _configuration=_configuration,
            **kwargs,
        )

from freedompay-client.model.button_control import ButtonControl
from freedompay-client.model.card_number_control import CardNumberControl
from freedompay-client.model.consumer_authentication import ConsumerAuthentication
from freedompay-client.model.dcc_options import DccOptions
from freedompay-client.model.expiration_date_control import ExpirationDateControl
from freedompay-client.model.fraud_check_options import FraudCheckOptions
from freedompay-client.model.legal_control import LegalControl
from freedompay-client.model.order_details import OrderDetails
from freedompay-client.model.pay_by_bank_init_request import PayByBankInitRequest
from freedompay-client.model.pay_pal_init_request import PayPalInitRequest
from freedompay-client.model.postal_code_control import PostalCodeControl
from freedompay-client.model.security_code_control import SecurityCodeControl
from freedompay-client.model.token_information import TokenInformation
