# coding: utf-8

"""
    Hosted Payment Controls API Documentation v1.5

    The API for Hosted Payment Controls. To access the swagger.json file open the following link: https://hpc.uat.freedompay.com/api/swagger/docs/v1.5  # noqa: E501

    The version of the OpenAPI document: v1.5
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from freedompay-client import schemas  # noqa: F401


class SecurityCodeControl(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        
        class properties:
            
            
            class LabelType(
                schemas.EnumBase,
                schemas.StrSchema
            ):
                
                @schemas.classproperty
                def UNKNOWN(cls):
                    return cls("Unknown")
                
                @schemas.classproperty
                def DEFAULT(cls):
                    return cls("Default")
                
                @schemas.classproperty
                def REQUIRED(cls):
                    return cls("Required")
                
                @schemas.classproperty
                def IF_PRESENT(cls):
                    return cls("IfPresent")
                
                @schemas.classproperty
                def OPTIONAL(cls):
                    return cls("Optional")
                
                @schemas.classproperty
                def NOT_AVAILABLE(cls):
                    return cls("NotAvailable")
                
                @schemas.classproperty
                def PIN_DEFAULT(cls):
                    return cls("PinDefault")
            
            
            class MaskType(
                schemas.EnumBase,
                schemas.StrSchema
            ):
                
                @schemas.classproperty
                def DEFAULT(cls):
                    return cls("Default")
                
                @schemas.classproperty
                def NONE(cls):
                    return cls("None")
                
                @schemas.classproperty
                def BLUR(cls):
                    return cls("Blur")
                
                @schemas.classproperty
                def KEYPRESS(cls):
                    return cls("Keypress")
            
            
            class PlaceholderType(
                schemas.EnumBase,
                schemas.StrSchema
            ):
                
                @schemas.classproperty
                def UNKNOWN(cls):
                    return cls("Unknown")
                
                @schemas.classproperty
                def BLANK(cls):
                    return cls("Blank")
                
                @schemas.classproperty
                def DEFAULT(cls):
                    return cls("Default")
                
                @schemas.classproperty
                def CVC(cls):
                    return cls("Cvc")
                
                @schemas.classproperty
                def CVV(cls):
                    return cls("Cvv")
                
                @schemas.classproperty
                def CVC_NUMBER(cls):
                    return cls("CvcNumber")
                
                @schemas.classproperty
                def CVV_NUMBER(cls):
                    return cls("CvvNumber")
                
                @schemas.classproperty
                def PIN(cls):
                    return cls("Pin")
            
            
            class ValidationType(
                schemas.EnumBase,
                schemas.StrSchema
            ):
                
                @schemas.classproperty
                def UNKNOWN(cls):
                    return cls("Unknown")
                
                @schemas.classproperty
                def NOT_APPLICABLE(cls):
                    return cls("NotApplicable")
                
                @schemas.classproperty
                def OPTIONAL(cls):
                    return cls("Optional")
                
                @schemas.classproperty
                def REQUIRED(cls):
                    return cls("Required")
                
                @schemas.classproperty
                def OPTIONAL_EXPLICIT(cls):
                    return cls("OptionalExplicit")
            __annotations__ = {
                "LabelType": LabelType,
                "MaskType": MaskType,
                "PlaceholderType": PlaceholderType,
                "ValidationType": ValidationType,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["LabelType"]) -> MetaOapg.properties.LabelType: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["MaskType"]) -> MetaOapg.properties.MaskType: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["PlaceholderType"]) -> MetaOapg.properties.PlaceholderType: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["ValidationType"]) -> MetaOapg.properties.ValidationType: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["LabelType", "MaskType", "PlaceholderType", "ValidationType", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["LabelType"]) -> typing.Union[MetaOapg.properties.LabelType, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["MaskType"]) -> typing.Union[MetaOapg.properties.MaskType, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["PlaceholderType"]) -> typing.Union[MetaOapg.properties.PlaceholderType, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["ValidationType"]) -> typing.Union[MetaOapg.properties.ValidationType, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["LabelType", "MaskType", "PlaceholderType", "ValidationType", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        LabelType: typing.Union[MetaOapg.properties.LabelType, str, schemas.Unset] = schemas.unset,
        MaskType: typing.Union[MetaOapg.properties.MaskType, str, schemas.Unset] = schemas.unset,
        PlaceholderType: typing.Union[MetaOapg.properties.PlaceholderType, str, schemas.Unset] = schemas.unset,
        ValidationType: typing.Union[MetaOapg.properties.ValidationType, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'SecurityCodeControl':
        return super().__new__(
            cls,
            *args,
            LabelType=LabelType,
            MaskType=MaskType,
            PlaceholderType=PlaceholderType,
            ValidationType=ValidationType,
            _configuration=_configuration,
            **kwargs,
        )
