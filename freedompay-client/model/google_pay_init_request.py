# coding: utf-8

"""
    Hosted Payment Controls API Documentation v1.5

    The API for Hosted Payment Controls. To access the swagger.json file open the following link: https://hpc.uat.freedompay.com/api/swagger/docs/v1.5  # noqa: E501

    The version of the OpenAPI document: v1.5
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from freedompay-client import schemas  # noqa: F401


class GooglePayInitRequest(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        
        class properties:
        
            @staticmethod
            def BillingAddress() -> typing.Type['GoogleBillingAddressRequest']:
                return GoogleBillingAddressRequest
            
            
            class ButtonColor(
                schemas.EnumBase,
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    enum_value_to_name = {
                        "Unknown": "UNKNOWN",
                        "Black": "BLACK",
                        "White": "WHITE",
                    }
                
                @schemas.classproperty
                def UNKNOWN(cls):
                    return cls("Unknown")
                
                @schemas.classproperty
                def BLACK(cls):
                    return cls("Black")
                
                @schemas.classproperty
                def WHITE(cls):
                    return cls("White")
            
            
            class ButtonType(
                schemas.EnumBase,
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    enum_value_to_name = {
                        "Unknown": "UNKNOWN",
                        "Icon": "ICON",
                        "Buy": "BUY",
                        "Checkout": "CHECKOUT",
                        "Donate": "DONATE",
                        "Order": "ORDER",
                        "Pay": "PAY",
                        "Plain": "PLAIN",
                        "Subscribe": "SUBSCRIBE",
                        "Book": "BOOK",
                    }
                
                @schemas.classproperty
                def UNKNOWN(cls):
                    return cls("Unknown")
                
                @schemas.classproperty
                def ICON(cls):
                    return cls("Icon")
                
                @schemas.classproperty
                def BUY(cls):
                    return cls("Buy")
                
                @schemas.classproperty
                def CHECKOUT(cls):
                    return cls("Checkout")
                
                @schemas.classproperty
                def DONATE(cls):
                    return cls("Donate")
                
                @schemas.classproperty
                def ORDER(cls):
                    return cls("Order")
                
                @schemas.classproperty
                def PAY(cls):
                    return cls("Pay")
                
                @schemas.classproperty
                def PLAIN(cls):
                    return cls("Plain")
                
                @schemas.classproperty
                def SUBSCRIBE(cls):
                    return cls("Subscribe")
                
                @schemas.classproperty
                def BOOK(cls):
                    return cls("Book")
            
            
            class ButtonSizeMode(
                schemas.EnumBase,
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    enum_value_to_name = {
                        "Static": "STATIC",
                        "Fill": "FILL",
                    }
                
                @schemas.classproperty
                def STATIC(cls):
                    return cls("Static")
                
                @schemas.classproperty
                def FILL(cls):
                    return cls("Fill")
        
            @staticmethod
            def ConsumerAuthentication() -> typing.Type['ConsumerAuthentication']:
                return ConsumerAuthentication
            CurrencyCode = schemas.StrSchema
            IsEmailRequired = schemas.BoolSchema
            
            
            class ResponseType(
                schemas.EnumBase,
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    enum_value_to_name = {
                        "Unknown": "UNKNOWN",
                        "Dictionary": "DICTIONARY",
                        "Raw": "RAW",
                    }
                
                @schemas.classproperty
                def UNKNOWN(cls):
                    return cls("Unknown")
                
                @schemas.classproperty
                def DICTIONARY(cls):
                    return cls("Dictionary")
                
                @schemas.classproperty
                def RAW(cls):
                    return cls("Raw")
            TotalPrice = schemas.StrSchema
            CultureCode = schemas.StrSchema
            EsKey = schemas.StrSchema
        
            @staticmethod
            def Legal() -> typing.Type['LegalControl']:
                return LegalControl
            StoreId = schemas.StrSchema
            Styles = schemas.StrSchema
            TerminalId = schemas.StrSchema
            
            
            class ValidationMessageType(
                schemas.EnumBase,
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    enum_value_to_name = {
                        "Unknown": "UNKNOWN",
                        "None": "NONE",
                        "Feedback": "FEEDBACK",
                        "Tooltip": "TOOLTIP",
                    }
                
                @schemas.classproperty
                def UNKNOWN(cls):
                    return cls("Unknown")
                
                @schemas.classproperty
                def NONE(cls):
                    return cls("None")
                
                @schemas.classproperty
                def FEEDBACK(cls):
                    return cls("Feedback")
                
                @schemas.classproperty
                def TOOLTIP(cls):
                    return cls("Tooltip")
            ReferenceId = schemas.UUIDSchema
            __annotations__ = {
                "BillingAddress": BillingAddress,
                "ButtonColor": ButtonColor,
                "ButtonType": ButtonType,
                "ButtonSizeMode": ButtonSizeMode,
                "ConsumerAuthentication": ConsumerAuthentication,
                "CurrencyCode": CurrencyCode,
                "IsEmailRequired": IsEmailRequired,
                "ResponseType": ResponseType,
                "TotalPrice": TotalPrice,
                "CultureCode": CultureCode,
                "EsKey": EsKey,
                "Legal": Legal,
                "StoreId": StoreId,
                "Styles": Styles,
                "TerminalId": TerminalId,
                "ValidationMessageType": ValidationMessageType,
                "ReferenceId": ReferenceId,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["BillingAddress"]) -> 'GoogleBillingAddressRequest': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["ButtonColor"]) -> MetaOapg.properties.ButtonColor: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["ButtonType"]) -> MetaOapg.properties.ButtonType: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["ButtonSizeMode"]) -> MetaOapg.properties.ButtonSizeMode: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["ConsumerAuthentication"]) -> 'ConsumerAuthentication': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["CurrencyCode"]) -> MetaOapg.properties.CurrencyCode: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["IsEmailRequired"]) -> MetaOapg.properties.IsEmailRequired: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["ResponseType"]) -> MetaOapg.properties.ResponseType: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["TotalPrice"]) -> MetaOapg.properties.TotalPrice: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["CultureCode"]) -> MetaOapg.properties.CultureCode: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["EsKey"]) -> MetaOapg.properties.EsKey: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["Legal"]) -> 'LegalControl': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["StoreId"]) -> MetaOapg.properties.StoreId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["Styles"]) -> MetaOapg.properties.Styles: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["TerminalId"]) -> MetaOapg.properties.TerminalId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["ValidationMessageType"]) -> MetaOapg.properties.ValidationMessageType: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["ReferenceId"]) -> MetaOapg.properties.ReferenceId: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["BillingAddress", "ButtonColor", "ButtonType", "ButtonSizeMode", "ConsumerAuthentication", "CurrencyCode", "IsEmailRequired", "ResponseType", "TotalPrice", "CultureCode", "EsKey", "Legal", "StoreId", "Styles", "TerminalId", "ValidationMessageType", "ReferenceId", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["BillingAddress"]) -> typing.Union['GoogleBillingAddressRequest', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["ButtonColor"]) -> typing.Union[MetaOapg.properties.ButtonColor, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["ButtonType"]) -> typing.Union[MetaOapg.properties.ButtonType, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["ButtonSizeMode"]) -> typing.Union[MetaOapg.properties.ButtonSizeMode, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["ConsumerAuthentication"]) -> typing.Union['ConsumerAuthentication', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["CurrencyCode"]) -> typing.Union[MetaOapg.properties.CurrencyCode, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["IsEmailRequired"]) -> typing.Union[MetaOapg.properties.IsEmailRequired, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["ResponseType"]) -> typing.Union[MetaOapg.properties.ResponseType, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["TotalPrice"]) -> typing.Union[MetaOapg.properties.TotalPrice, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["CultureCode"]) -> typing.Union[MetaOapg.properties.CultureCode, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["EsKey"]) -> typing.Union[MetaOapg.properties.EsKey, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["Legal"]) -> typing.Union['LegalControl', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["StoreId"]) -> typing.Union[MetaOapg.properties.StoreId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["Styles"]) -> typing.Union[MetaOapg.properties.Styles, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["TerminalId"]) -> typing.Union[MetaOapg.properties.TerminalId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["ValidationMessageType"]) -> typing.Union[MetaOapg.properties.ValidationMessageType, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["ReferenceId"]) -> typing.Union[MetaOapg.properties.ReferenceId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["BillingAddress", "ButtonColor", "ButtonType", "ButtonSizeMode", "ConsumerAuthentication", "CurrencyCode", "IsEmailRequired", "ResponseType", "TotalPrice", "CultureCode", "EsKey", "Legal", "StoreId", "Styles", "TerminalId", "ValidationMessageType", "ReferenceId", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        BillingAddress: typing.Union['GoogleBillingAddressRequest', schemas.Unset] = schemas.unset,
        ButtonColor: typing.Union[MetaOapg.properties.ButtonColor, str, schemas.Unset] = schemas.unset,
        ButtonType: typing.Union[MetaOapg.properties.ButtonType, str, schemas.Unset] = schemas.unset,
        ButtonSizeMode: typing.Union[MetaOapg.properties.ButtonSizeMode, str, schemas.Unset] = schemas.unset,
        ConsumerAuthentication: typing.Union['ConsumerAuthentication', schemas.Unset] = schemas.unset,
        CurrencyCode: typing.Union[MetaOapg.properties.CurrencyCode, str, schemas.Unset] = schemas.unset,
        IsEmailRequired: typing.Union[MetaOapg.properties.IsEmailRequired, bool, schemas.Unset] = schemas.unset,
        ResponseType: typing.Union[MetaOapg.properties.ResponseType, str, schemas.Unset] = schemas.unset,
        TotalPrice: typing.Union[MetaOapg.properties.TotalPrice, str, schemas.Unset] = schemas.unset,
        CultureCode: typing.Union[MetaOapg.properties.CultureCode, str, schemas.Unset] = schemas.unset,
        EsKey: typing.Union[MetaOapg.properties.EsKey, str, schemas.Unset] = schemas.unset,
        Legal: typing.Union['LegalControl', schemas.Unset] = schemas.unset,
        StoreId: typing.Union[MetaOapg.properties.StoreId, str, schemas.Unset] = schemas.unset,
        Styles: typing.Union[MetaOapg.properties.Styles, str, schemas.Unset] = schemas.unset,
        TerminalId: typing.Union[MetaOapg.properties.TerminalId, str, schemas.Unset] = schemas.unset,
        ValidationMessageType: typing.Union[MetaOapg.properties.ValidationMessageType, str, schemas.Unset] = schemas.unset,
        ReferenceId: typing.Union[MetaOapg.properties.ReferenceId, str, uuid.UUID, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'GooglePayInitRequest':
        return super().__new__(
            cls,
            *args,
            BillingAddress=BillingAddress,
            ButtonColor=ButtonColor,
            ButtonType=ButtonType,
            ButtonSizeMode=ButtonSizeMode,
            ConsumerAuthentication=ConsumerAuthentication,
            CurrencyCode=CurrencyCode,
            IsEmailRequired=IsEmailRequired,
            ResponseType=ResponseType,
            TotalPrice=TotalPrice,
            CultureCode=CultureCode,
            EsKey=EsKey,
            Legal=Legal,
            StoreId=StoreId,
            Styles=Styles,
            TerminalId=TerminalId,
            ValidationMessageType=ValidationMessageType,
            ReferenceId=ReferenceId,
            _configuration=_configuration,
            **kwargs,
        )

from freedompay-client.model.consumer_authentication import ConsumerAuthentication
from freedompay-client.model.google_billing_address_request import GoogleBillingAddressRequest
from freedompay-client.model.legal_control import LegalControl
